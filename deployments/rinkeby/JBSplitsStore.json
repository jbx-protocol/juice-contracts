{
  "address": "0x1922FF97D4558ff806f28f1d8E4474990e623E24",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "INVALID_LOCKED_UNTIL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_PROJECT_ID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_SPLIT_PERCENT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_TOTAL_PERCENT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "group",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "preferAddToBalance",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBSplit",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetSplit",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_group",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "preferAddToBalance",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "internalType": "struct JBSplit[]",
          "name": "_splits",
          "type": "tuple[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_group",
          "type": "uint256"
        }
      ],
      "name": "splitsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "preferAddToBalance",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "internalType": "struct JBSplit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d29c21b519935e2221fda9cb7677e9b21c6e47648589cf7e63e9197961563b5",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x1922FF97D4558ff806f28f1d8E4474990e623E24",
    "transactionIndex": 0,
    "gasUsed": "1099805",
    "logsBloom": "0x
    "blockHash": "0xbfbc6a16737fcc64db42dee6a34902ff119592f81b78d48483fd68814af357d5",
    "transactionHash": "0x1d29c21b519935e2221fda9cb7677e9b21c6e47648589cf7e63e9197961563b5",
    "logs": [],
    "blockNumber": 10510704,
    "cumulativeGasUsed": "1099805",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA2e4ffE69A28226858A70D3fba94C10C53088029",
    "0xe63eCb9784D96E5D9be81b8b78c550Be309acb26",
    "0xb7e8eb6bB402cceAF55A14E135d754D36E4736fa"
  ],
  "numDeployments": 1,
  "solcInputHash": "122fb715eefa62c2e442108fed43e375",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"INVALID_LOCKED_UNTIL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_PROJECT_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_SPLIT_PERCENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_TOTAL_PERCENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferAddToBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBSplit\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetSplit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferAddToBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"_splits\",\"type\":\"tuple[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_group\",\"type\":\"uint256\"}],\"name\":\"splitsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferAddToBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Adheres to: IJBSplitsStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.Inherits from: JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\"}},\"set(uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address)[])\":{\"details\":\"Only the owner or operator of a project, or the current controller contract of the project, can set its splits.The new splits must include any currently set splits that are locked.\",\"params\":{\"_domain\":\"An identifier within which the splits should be considered active.\",\"_group\":\"An identifier between of splits being set. All splits within this _group must add up to within 100%.\",\"_projectId\":\"The ID of the project for which splits are being added.\",\"_splits\":\"The splits to set.\"}},\"splitsOf(uint256,uint256,uint256)\":{\"params\":{\"_domain\":\"An identifier within which the returned splits should be considered active.\",\"_group\":\"The identifying group of the splits.\",\"_projectId\":\"The ID of the project to get splits for.\"},\"returns\":{\"_0\":\"An array of all splits for the project.\"}}},\"stateVariables\":{\"_packedSplitParts2Of\":{\"details\":\"This packed data is often 0. _projectId The ID of the project to get packed splits data for. _domain An identifier within which the returned splits should be considered active. _group The identifying group of the splits. _index The indexed order that the split was set at.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"directory()\":{\"notice\":\" The directory of terminals and controllers for projects.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"projects()\":{\"notice\":\" Mints ERC-721's that represent project ownership and transfers.\"},\"set(uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address)[])\":{\"notice\":\" Sets a project's splits.\"},\"splitsOf(uint256,uint256,uint256)\":{\"notice\":\" Get all splits for the specified project ID, within the specified domain, for the specified group.\"}},\"notice\":\"Stores splits for each project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBSplitsStore.sol\":\"JBSplitsStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/JBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './abstract/JBOperatable.sol';\\nimport './interfaces/IJBDirectory.sol';\\nimport './interfaces/IJBSplitsStore.sol';\\nimport './libraries/JBConstants.sol';\\nimport './libraries/JBOperations.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror INVALID_LOCKED_UNTIL();\\nerror INVALID_PROJECT_ID();\\nerror INVALID_SPLIT_PERCENT();\\nerror INVALID_TOTAL_PERCENT();\\nerror PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\\n\\n/**\\n  @notice\\n  Stores splits for each project.\\n\\n  @dev\\n  Adheres to:\\n  IJBSplitsStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\\n\\n  @dev\\n  Inherits from:\\n  JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\\n*/\\ncontract JBSplitsStore is IJBSplitsStore, JBOperatable {\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The number of splits currently set for each project ID's configurations.\\n\\n    _projectId The ID of the project to get the split count for.\\n    _domain An identifier within which the returned splits should be considered active.\\n    _group The identifying group of the splits.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) private _splitCountOf;\\n\\n  /** \\n    @notice\\n    Packed data of splits for each project ID's configurations.\\n\\n    _projectId The ID of the project to get packed splits data for.\\n    _domain An identifier within which the returned splits should be considered active.\\n    _group The identifying group of the splits.\\n    _index The indexed order that the split was set at.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))))\\n    private _packedSplitParts1Of;\\n\\n  /** \\n    @notice\\n    More packed data of splits for each project ID's configurations.\\n\\n    @dev\\n    This packed data is often 0.\\n\\n    _projectId The ID of the project to get packed splits data for.\\n    _domain An identifier within which the returned splits should be considered active.\\n    _group The identifying group of the splits.\\n    _index The indexed order that the split was set at.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))))\\n    private _packedSplitParts2Of;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  /** \\n    @notice \\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n  @notice \\n  Get all splits for the specified project ID, within the specified domain, for the specified group.\\n\\n  @param _projectId The ID of the project to get splits for.\\n  @param _domain An identifier within which the returned splits should be considered active.\\n  @param _group The identifying group of the splits.\\n\\n  @return An array of all splits for the project.\\n*/\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view override returns (JBSplit[] memory) {\\n    return _getStructsFor(_projectId, _domain, _group);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory\\n  ) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n    directory = _directory;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Sets a project's splits.\\n\\n    @dev\\n    Only the owner or operator of a project, or the current controller contract of the project, can set its splits.\\n\\n    @dev\\n    The new splits must include any currently set splits that are locked.\\n\\n    @param _projectId The ID of the project for which splits are being added.\\n    @param _domain An identifier within which the splits should be considered active.\\n    @param _group An identifier between of splits being set. All splits within this _group must add up to within 100%.\\n    @param _splits The splits to set.\\n  */\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  )\\n    external\\n    override\\n    requirePermissionAllowingOverride(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.SET_SPLITS,\\n      address(directory.controllerOf(_projectId)) == msg.sender\\n    )\\n  {\\n    // Get a reference to the project's current splits.\\n    JBSplit[] memory _currentSplits = _getStructsFor(_projectId, _domain, _group);\\n\\n    // Check to see if all locked splits are included.\\n    for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\\n      // If not locked, continue.\\n      if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\\n\\n      // Keep a reference to whether or not the locked split being iterated on is included.\\n      bool _includesLocked = false;\\n\\n      for (uint256 _j = 0; _j < _splits.length; _j++) {\\n        // Check for sameness.\\n        if (\\n          _splits[_j].percent == _currentSplits[_i].percent &&\\n          _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\\n          _splits[_j].allocator == _currentSplits[_i].allocator &&\\n          _splits[_j].projectId == _currentSplits[_i].projectId &&\\n          // Allow lock extention.\\n          _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\\n        ) _includesLocked = true;\\n      }\\n\\n      if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\\n    }\\n\\n    // Add up all the percents to make sure they cumulative are under 100%.\\n    uint256 _percentTotal = 0;\\n\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // The percent should be greater than 0.\\n      if (_splits[_i].percent == 0) revert INVALID_SPLIT_PERCENT();\\n\\n      // ProjectId should be within a uint56\\n      if (_splits[_i].projectId > type(uint56).max) revert INVALID_PROJECT_ID();\\n\\n      // Add to the total percents.\\n      _percentTotal = _percentTotal + _splits[_i].percent;\\n\\n      // Validate the total does not exceed the expected value.\\n      if (_percentTotal > JBConstants.SPLITS_TOTAL_PERCENT) revert INVALID_TOTAL_PERCENT();\\n\\n      uint256 _packedSplitParts1;\\n\\n      if (_splits[_i].preferClaimed) _packedSplitParts1 = 1;\\n      if (_splits[_i].preferAddToBalance) _packedSplitParts1 |= 1 << 1;\\n      _packedSplitParts1 |= _splits[_i].percent << 2;\\n      _packedSplitParts1 |= _splits[_i].projectId << 34;\\n      _packedSplitParts1 |= uint256(uint160(address(_splits[_i].beneficiary))) << 90;\\n\\n      // Store the first spit part.\\n      _packedSplitParts1Of[_projectId][_domain][_group][_i] = _packedSplitParts1;\\n\\n      // If there's data to store in the second packed split part, pack and store.\\n      if (_splits[_i].lockedUntil > 0 || _splits[_i].allocator != IJBSplitAllocator(address(0))) {\\n        // Locked until should be within a uint48\\n        if (_splits[_i].lockedUntil > type(uint48).max) revert INVALID_LOCKED_UNTIL();\\n\\n        uint256 _packedSplitParts2 = uint48(_splits[_i].lockedUntil);\\n        _packedSplitParts2 |= uint256(uint160(address(_splits[_i].allocator))) << 48;\\n        _packedSplitParts2Of[_projectId][_domain][_group][_i] = _packedSplitParts2;\\n        // Otherwise if there's a value stored in the indexed position, delete it.\\n      } else if (_packedSplitParts2Of[_projectId][_domain][_group][_i] > 0)\\n        delete _packedSplitParts2Of[_projectId][_domain][_group][_i];\\n\\n      emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender);\\n    }\\n\\n    // Set the new length of the splits.\\n    _splitCountOf[_projectId][_domain][_group] = _splits.length;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice \\n    Unpack splits' packed stored values into easy-to-work-with spit structs.\\n\\n    @param _projectId The ID of the project to which the split belongs.\\n    @param _domain The identifier within which the returned splits should be considered active.\\n    @param _group The identifying group of the splits.\\n\\n    @return splits The split structs.\\n  */\\n  function _getStructsFor(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) private view returns (JBSplit[] memory) {\\n    // Get a reference to the number of splits that need to be added to the returned array.\\n    uint256 _splitCount = _splitCountOf[_projectId][_domain][_group];\\n\\n    // Initialize an array to be returned that has the set length.\\n    JBSplit[] memory _splits = new JBSplit[](_splitCount);\\n\\n    // Loop through each split and unpack the values into structs.\\n    for (uint256 _i = 0; _i < _splitCount; _i++) {\\n      // Get a reference to the fist packed data.\\n      uint256 _packedSplitPart1 = _packedSplitParts1Of[_projectId][_domain][_group][_i];\\n\\n      // Populate the split struct.\\n      JBSplit memory _split;\\n\\n      _split.preferClaimed = _packedSplitPart1 & 1 == 1;\\n      _split.preferAddToBalance = (_packedSplitPart1 >> 1) & 1 == 1;\\n      _split.percent = uint256(uint32(_packedSplitPart1 >> 2));\\n      _split.projectId = uint256(uint56(_packedSplitPart1 >> 34));\\n      _split.beneficiary = payable(address(uint160(_packedSplitPart1 >> 90)));\\n\\n      // Get a reference to the second packed data.\\n      uint256 _packedSplitPart2 = _packedSplitParts2Of[_projectId][_domain][_group][_i];\\n\\n      // If there's anything in it, unpack.\\n      if (_packedSplitPart2 > 0) {\\n        _split.lockedUntil = uint256(uint48(_packedSplitPart2));\\n        _split.allocator = IJBSplitAllocator(address(uint160(_packedSplitPart2 >> 48)));\\n      }\\n\\n      // Add the split to the value being returned.\\n      _splits[_i] = _split;\\n    }\\n\\n    return _splits;\\n  }\\n}\\n\",\"keccak256\":\"0x50e7a48b5e222701f75f18d0ff986d7aabf71962b9e3417b541b6380727c20fb\",\"license\":\"MIT\"},\"contracts/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors -------------------------- //\\n//*********************************************************************//\\nerror UNAUTHORIZED();\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  //*********************************************************************//\\n  // ---------------------------- modifiers ---------------------------- //\\n  //*********************************************************************//\\n\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    _requirePermission(_account, _domain, _permissionIndex);\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    _requirePermissionAllowingOverride(_account, _domain, _permissionIndex, _override);\\n    _;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- internal views ------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Require the message sender is either the account or has the specified permission.\\n\\n    @param _account The account to allow.\\n    @param _domain The domain within which the permission index will be checked.\\n    @param _domain The permission index that an operator must have within the specified domain to be allowed.\\n  */\\n  function _requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) internal view {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n  }\\n\\n  /** \\n    @notice\\n    Require the message sender is either the account, has the specified permission, or the override condition is true.\\n\\n    @param _account The account to allow.\\n    @param _domain The domain within which the permission index will be checked.\\n    @param _domain The permission index that an operator must have within the specified domain to be allowed.\\n    @param _override The override condition to allow.\\n  */\\n  function _requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) internal view {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n  }\\n}\\n\",\"keccak256\":\"0x9a02cc53fb4c773d3a5ddee8c58b82f0d37c8d2af86319842726028cbcafcc5a\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Active,\\n  Approved,\\n  Failed\\n}\\n\",\"keccak256\":\"0xadf07fd49f7e0947006fa1921bc7fd8fb532e8fecf3b9266721a8b7e43907461\",\"license\":\"MIT\"},\"contracts/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBFundingCycleData.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\nimport './../structs/JBProjectMetadata.sol';\\nimport './../structs/JBGroupedSplits.sol';\\nimport './../structs/JBFundAccessConstraints.sol';\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBToken.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBTokenStore.sol';\\nimport './IJBSplitsStore.sol';\\n\\ninterface IJBController {\\n  event LaunchProject(uint256 configuration, uint256 projectId, string memo, address caller);\\n\\n  event LaunchFundingCycles(uint256 configuration, uint256 projectId, string memo, address caller);\\n\\n  event ReconfigureFundingCycles(\\n    uint256 configuration,\\n    uint256 projectId,\\n    string memo,\\n    address caller\\n  );\\n\\n  event SetFundAccessConstraints(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBFundAccessConstraints constraints,\\n    address caller\\n  );\\n\\n  event DistributeReservedTokens(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 tokenCount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event DistributeToReservedTokenSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    uint256 tokenCount,\\n    address caller\\n  );\\n\\n  event MintTokens(\\n    address indexed beneficiary,\\n    uint256 indexed projectId,\\n    uint256 tokenCount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    uint256 reservedRate,\\n    address caller\\n  );\\n\\n  event BurnTokens(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 tokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event Migrate(uint256 indexed projectId, IJBController to, address caller);\\n\\n  event PrepMigration(uint256 indexed projectId, IJBController from, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function tokenStore() external view returns (IJBTokenStore);\\n\\n  function splitsStore() external view returns (IJBSplitsStore);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal,\\n    address _token\\n  ) external view returns (uint256 distributionLimit, uint256 distributionLimitCurrency);\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal,\\n    address _token\\n  ) external view returns (uint256 overflowAllowance, uint256 overflowAllowanceCurrency);\\n\\n  function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function currentFundingCycleOf(uint256 _projectId)\\n    external\\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\\n\\n  function queuedFundingCycleOf(uint256 _projectId)\\n    external\\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\\n\\n  function launchProjectFor(\\n    address _owner,\\n    JBProjectMetadata calldata _projectMetadata,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals,\\n    string calldata _memo\\n  ) external returns (uint256 projectId);\\n\\n  function launchFundingCyclesFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals,\\n    string calldata _memo\\n  ) external returns (uint256 configuration);\\n\\n  function reconfigureFundingCyclesOf(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    string calldata _memo\\n  ) external returns (uint256);\\n\\n  function issueTokenFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeTokenOf(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    bool _useReservedRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    external\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function migrate(uint256 _projectId, IJBController _to) external;\\n}\\n\",\"keccak256\":\"0x7e49cbccd0ef6b4c8b5e96bb0fbcbac4f64ccd2eb5bc525ccff4a3e03ec6e3ce\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event SetTerminals(uint256 indexed projectId, IJBPaymentTerminal[] terminals, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function isAllowedToSetFirstController(address _address) external view returns (bool);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\\n    external\\n    view\\n    returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function setPrimaryTerminalOf(\\n    uint256 _projectId,\\n    address _token,\\n    IJBPaymentTerminal _terminal\\n  ) external;\\n\\n  function setIsAllowedToSetFirstController(address _address, bool _flag) external;\\n}\\n\",\"keccak256\":\"0x2720681c23d05ebea6cf2a9c00fafc77adfb0782997107e19c548b3a65dc1b59\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    uint256 _start\\n  ) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x5f57c8b6a3c13a24b41497278ebcb7c6cf05cc6e3a19b0c3c43d4092c499c936\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _data)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _data)\\n    external\\n    view\\n    returns (\\n      uint256 reclaimAmount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate\\n    );\\n}\\n\",\"keccak256\":\"0xd3ce9c75c0e5da0de3bdf6fb57a75e39e4782d2042128deed0c15949c6c4e38f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../enums/JBBallotState.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0x98cf13694d24d79ab5612b4d14a9662dd67ad73e7438af5aac6a076e3a4db6e3\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _data) external;\\n}\\n\",\"keccak256\":\"0x09990dcf429fd0a9b740cfffdb580e6c3186e1492313d97f8c1cce03638f6f91\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBPaymentTerminal {\\n  function acceptsToken(address _token) external view returns (bool);\\n\\n  function currencyForToken(address _token) external view returns (uint256);\\n\\n  function decimalsForToken(address _token) external view returns (uint256);\\n\\n  // Return value must be a fixed point number with 18 decimals.\\n  function currentEthOverflowOf(uint256 _projectId) external view returns (uint256);\\n\\n  function pay(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address _token,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external payable returns (uint256 beneficiaryTokenCount);\\n\\n  function addToBalanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address _token,\\n    string calldata _memo\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x0a69a112d8f20eb628c6a07b9c301c988a2eb888817e04051436912bd88feeb0\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 projectId);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x4482009111379531b33b6d924760987a6a68c83eeb71092d74fccd65960ca5ce\",\"license\":\"MIT\"},\"contracts/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _data) external;\\n}\\n\",\"keccak256\":\"0x8f98d6412d36ad4048a878aea19e6c11ed40ce63b765b0aa32d71623d2b5068f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '../structs/JBSplitAllocationData.sol';\\n\\ninterface IJBSplitAllocator {\\n  function allocate(JBSplitAllocationData calldata _data) external payable;\\n}\\n\",\"keccak256\":\"0x0f5d9e98fa8069881d6173b956980481a76d6cddecf76e6adcb4dbb4cc80541e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _account, uint256 _projectId) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function approve(\\n    uint256,\\n    address _spender,\\n    uint256 _amount\\n  ) external;\\n\\n  function transfer(\\n    uint256 _projectId,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    uint256 _projectId,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x23ce305c82865663f8dbd3315dfc85d04a963f05a50bfcfa1c7c1ce29397422d\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 initialUnclaimedBalance,\\n    uint256 initialClaimedBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 initialUnclaimedBalance,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed newToken,\\n    IJBToken indexed oldToken,\\n    address owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projectOf(IJBToken _token) external view returns (uint256);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external returns (IJBToken oldToken);\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    address _recipient,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2b7a6cdb457e710161079a46683e9804d66d4cc7d18be8f64de25ba7bfadf9ef\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475\",\"license\":\"MIT\"},\"contracts/libraries/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n  @notice\\n  Global constants used across multiple Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  /** \\n    @notice\\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\\n  */\\n  uint256 public constant MAX_RESERVED_RATE = 10000;\\n\\n  /**\\n    @notice\\n    Maximum token redemption rate.  \\n    */\\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\\n\\n  /** \\n    @notice\\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\\n  */\\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum splits percentage.\\n  */\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum fee rate as a percentage out of 1000000000\\n  */\\n  uint256 public constant MAX_FEE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum discount on fee granted by a gauge.\\n  */\\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\\n}\",\"keccak256\":\"0x7f180cf76ff6265a6074497f16a3d94191c9330484ec145f766fa2fa06cf1d3c\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_METADATA = 6;\\n  uint256 public constant ISSUE = 7;\\n  uint256 public constant CHANGE_TOKEN = 8;\\n  uint256 public constant MINT = 9;\\n  uint256 public constant BURN = 10;\\n  uint256 public constant CLAIM = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant REQUIRE_CLAIM = 13;\\n  uint256 public constant SET_CONTROLLER = 14;\\n  uint256 public constant SET_TERMINALS = 15;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 16;\\n  uint256 public constant USE_ALLOWANCE = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x828971de3d07c31e294c188335e250ee0b28919dd86f0dd570f89b97cca13932\",\"license\":\"MIT\"},\"contracts/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The number of project tokens minted for the beneficiary.\\n  uint256 projectTokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xc9854f845a2aca0953e1c850d40fa8c930638e1e0ebfaea103c93c8500150bbb\",\"license\":\"MIT\"},\"contracts/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of project tokens being redeemed.\\n  uint256 projectTokenCount;\\n  // The reclaimed amount. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount reclaimedAmount;\\n  // The address to which the reclaimed amount will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xcf3cc8993b656900db99a916ee1a9a73547894ffd0295fa273c7a40ffa3b5c37\",\"license\":\"MIT\"},\"contracts/structs/JBFundAccessConstraints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBFundAccessConstraints {\\n  // The terminal within which the distribution limit and the overflow allowance applies.\\n  IJBPaymentTerminal terminal;\\n  // The token for which the fund access constraints apply.\\n  address token;\\n  // The amount of the distribution limit, as a fixed point number with the same number of decimals as the terminal within which the limit applies.\\n  uint256 distributionLimit;\\n  // The currency of the distribution limit.\\n  uint256 distributionLimitCurrency;\\n  // The amount of the allowance, as a fixed point number with the same number of decimals as the terminal within which the allowance applies.\\n  uint256 overflowAllowance;\\n  // The currency of the overflow allowance.\\n  uint256 overflowAllowanceCurrency;\\n}\\n\",\"keccak256\":\"0xbd8bba178dc52d4e1ac49a66e2f9a7523d14ce52b6539ae18cea8ae76799e268\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle that was active when this cycle was created.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on.\\n  // For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n  uint256 weight;\\n  // A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 90%, the next funding cycle will have a 10% smaller weight.\\n  // This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x1b8aabfc72ba75adcf6d26789732e3bd511976b28f6916f1ebde21a795dcfdf7\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on.\\n  // For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n  uint256 weight;\\n  // A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 90%, the next funding cycle will have a 10% smaller weight.\\n  // This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x453e70b56ec06dab62d72fe04e5e38539f6503c1d42fa0462cf51d6d94cffa66\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_RESERVED_RATE`.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the distribute functionality should be paused during the funding cycle.\\n  bool pauseDistributions;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If the mint functionality should be allowed during the funding cycle.\\n  bool allowMinting;\\n  // If changing tokens should be allowed during this funding cycle.\\n  bool allowChangeToken;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If setting terminals should be allowed during this funding cycle.\\n  bool allowSetTerminals;\\n  // If setting a new controller should be allowed during this funding cycle.\\n  bool allowSetController;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.\\n  bool useTotalOverflowForRedemptions;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0xb8d9a6c35303e519434778ddd873c64e1de9e8db87a181050b24c6dc4a34cfa0\",\"license\":\"MIT\"},\"contracts/structs/JBGroupedSplits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBSplit.sol';\\nimport '../libraries/JBSplitsGroups.sol';\\n\\nstruct JBGroupedSplits {\\n  // The group indentifier.\\n  uint256 group;\\n  // The splits to associate with the group.\\n  JBSplit[] splits;\\n}\\n\",\"keccak256\":\"0xdd5c829c9838a32789918ad54666d91c2489616da991a0adb040cdadb0d99dbf\",\"license\":\"MIT\"},\"contracts/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  // A domain of 0 is a wildcard domain, which gives an operator access to all domains.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x322991d4e93cf67e62b11039d3639c970abffae7707c3f773ac6c85bd326e333\",\"license\":\"MIT\"},\"contracts/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBPayParamsData {\\n  // The terminal that is facilitating the payment.\\n  IJBPaymentTerminal terminal;\\n  // The address from which the payment originated.\\n  address payer;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The ID of the project being paid.\\n  uint256 projectId;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The memo that was sent alongside the payment.\\n  string memo;\\n  // Arbitrary metadata provided by the payer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x54a73d77a14756f479d85f3fe484c88a87356790ee28f995dbdb9fe18979d810\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBProjectMetadata {\\n  // Metadata content.\\n  string content;\\n  // The domain within which the metadata applies.\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0xc3b76e617b453c6dc60cc8bd3683ff7726f1a967b28fb8e760b1d16f52c07d17\",\"license\":\"MIT\"},\"contracts/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBRedeemParamsData {\\n  // The terminal that is facilitating the redemption.\\n  IJBPaymentTerminal terminal;\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The ID of the project whos tokens are being redeemed.\\n  uint256 projectId;\\n  // The proposed number of tokens being redeemed, as a fixed point number with 18 decimals.\\n  uint256 tokenCount;\\n  // The total supply of tokens used in the calculation, as a fixed point number with 18 decimals.\\n  uint256 totalSupply;\\n  // The amount of overflow used in the reclaim amount calculation.\\n  uint256 overflow;\\n  // The number of decimals included in the reclaim amount fixed point number.\\n  uint256 decimals;\\n  // The currency that the reclaim amount is expected to be in terms of.\\n  uint256 currency;\\n  // The amount that should be reclaimed by the redeemer using the protocol's standard bonding curve redemption formula.\\n  uint256 reclaimAmount;\\n  // If overflow across all of a project's terminals is being used when making redemptions.\\n  bool useTotalOverflow;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Arbitrary metadata provided by the redeemer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x04cc0633eff14f5116f7c2940a7e9fd402e72ee4752ce6f281a8adb1e81fc741\",\"license\":\"MIT\"},\"contracts/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and the project has a token contract attached.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered claimed into the beneficiary's wallet, or unclaimed to save gas.\\n  bool preferClaimed;\\n  // A flag indicating if a distribution to a project should prefer triggering it's addToBalance function instead of its pay function.\\n  bool preferAddToBalance;\\n  // The percent of the whole group that this split occupies. This number is out of `JBConstants.SPLITS_TOTAL_PERCENT`.\\n  uint256 percent;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the protocol treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the claimed token preference respected.\\n  uint256 projectId;\\n  // The role the of the beneficary depends on whether or not projectId is specified, and whether or not an allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // Specifies if the split should be unchangeable until the specified time, with the exception of extending the locked period.\\n  uint256 lockedUntil;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with all properties of this split.\\n  IJBSplitAllocator allocator;\\n}\\n\",\"keccak256\":\"0x0d58248edc1ee72a7e2e0647f7ab2ed4a5aee88cf0addfeba2ce6462cc74b56a\",\"license\":\"MIT\"},\"contracts/structs/JBSplitAllocationData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBSplit.sol';\\nimport './JBTokenAmount.sol';\\n\\nstruct JBSplitAllocationData {\\n  // The token being sent to the split allocator.\\n  address token;\\n  // The amount being sent to the split allocator, as a fixed point number.\\n  uint256 amount;\\n  // The number of decimals in the amount.\\n  uint256 decimals;\\n  // The project to which the split belongs.\\n  uint256 projectId;\\n  // The group to which the split belongs.\\n  uint256 group;\\n  // The split that caused the allocation.\\n  JBSplit split;\\n}\\n\",\"keccak256\":\"0xe5d7a1deccecc1b59d5be5e9b8fbe15daed7327cacada207508ec8532c33ff75\",\"license\":\"MIT\"},\"contracts/structs/JBTokenAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBTokenAmount {\\n  // The token the payment was made in.\\n  address token;\\n  // The amount of tokens that was paid, as a fixed point number.\\n  uint256 value;\\n  // The number of decimals included in the value fixed point number.\\n  uint256 decimals;\\n  // The expected currency of the value.\\n  uint256 currency;\\n}\\n\",\"keccak256\":\"0x64550c4998ba63f2f602bc4f9aac4f81ede7fc475c42f5e7c9f44508b3fee769\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80638b79543c116100505780638b79543c146100aa578063ad007d63146100f6578063c41c2f241461011d57600080fd5b806312e7c4c61461006c57806369e11cc514610081575b600080fd5b61007f61007a366004610eb5565b610144565b005b61009461008f366004610e89565b610a21565b6040516100a19190610ff8565b60405180910390f35b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a1565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156101ca57600080fd5b505afa1580156101de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102029190610e48565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690528590601290339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561028f57600080fd5b505afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610e48565b73ffffffffffffffffffffffffffffffffffffffff16146102ea84848484610a36565b60006102f7898989610c4f565b905060005b815181101561054d578181815181106103175761031761122e565b602002602001015160a00151421061032e5761053b565b6000805b88518110156105015783838151811061034d5761034d61122e565b60200260200101516040015189828151811061036b5761036b61122e565b6020026020010151604001511480156103e957508383815181106103915761039161122e565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff168982815181106103c5576103c561122e565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16145b801561045a57508383815181106104025761040261122e565b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff168982815181106104365761043661122e565b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff16145b801561049f57508383815181106104735761047361122e565b6020026020010151606001518982815181106104915761049161122e565b602002602001015160600151145b80156104e557508383815181106104b8576104b861122e565b602002602001015160a001518982815181106104d6576104d661122e565b602002602001015160a0015110155b156104ef57600191505b806104f9816111c6565b915050610332565b5080610539576040517f1974459500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b80610545816111c6565b9150506102fc565b506000805b87518110156109f25787818151811061056d5761056d61122e565b602002602001015160400151600014156105b3576040517fe119ba4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b66ffffffffffffff80168882815181106105cf576105cf61122e565b6020026020010151606001511115610613576040517f3b44d99200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8781815181106106255761062561122e565b6020026020010151604001518261063c91906111ae565b9150633b9aca0082111561067c576040517feca7361000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008882815181106106905761069061122e565b602002602001015160000151156106a5575060015b8882815181106106b7576106b761122e565b602002602001015160200151156106cc576002175b60028983815181106106e0576106e061122e565b602002602001015160400151901b8117905060228983815181106107065761070661122e565b602002602001015160600151901b81179050605a89838151811061072c5761072c61122e565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff16901b8117905080600160008e815260200190815260200160002060008d815260200190815260200160002060008c815260200190815260200160002060008481526020019081526020016000208190555060008983815181106107b3576107b361122e565b602002602001015160a0015111806108155750600073ffffffffffffffffffffffffffffffffffffffff168983815181106107f0576107f061122e565b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff1614155b156109305765ffffffffffff80168983815181106108355761083561122e565b602002602001015160a001511115610879576040517fd509b54d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089838151811061088d5761088d61122e565b602002602001015160a0015165ffffffffffff16905060308a84815181106108b7576108b761122e565b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff16901b8117905080600260008f815260200190815260200160002060008e815260200190815260200160002060008d81526020019081526020016000206000858152602001908152602001600020819055505061098a565b60008c81526002602090815260408083208e845282528083208d845282528083208584529091529020541561098a5760008c81526002602090815260408083208e845282528083208d845282528083208584529091528120555b898b8d7f1d65eeba667d8160993d485b4782f11eef3bc64186c6521f2a0801f816e752e78c86815181106109c0576109c061122e565b6020026020010151336040516109d79291906110a5565b60405180910390a450806109ea816111c6565b915050610552565b50509451600098895260208981526040808b20998b52988152888a20978a529690965250505092909320555050565b6060610a2e848484610c4f565b949350505050565b80158015610a5a57503373ffffffffffffffffffffffffffffffffffffffff851614155b8015610b3657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190610e6c565b155b8015610c1257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610bd857600080fd5b505afa158015610bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c109190610e6c565b155b15610c49576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60008381526020818152604080832085845282528083208484529091528120546060918167ffffffffffffffff811115610c8b57610c8b61125d565b604051908082528060200260200182016040528015610d1057816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610ca95790505b50905060005b82811015610e3e5760008781526001602081815260408084208a855282528084208985528252808420858552825280842054815160e08101835260a0810186905260c081018690528185168514815281851c851690941484840152600281811c63ffffffff1685840152602282901c66ffffffffffffff166060860152605a82901c73ffffffffffffffffffffffffffffffffffffffff1660808601528c865283528185208b865283528185208a86528352818520868652909252909220548015610e0a5765ffffffffffff811660a083015273ffffffffffffffffffffffffffffffffffffffff603082901c1660c08301525b81858581518110610e1d57610e1d61122e565b60200260200101819052505050508080610e36906111c6565b915050610d16565b5095945050505050565b600060208284031215610e5a57600080fd5b8151610e658161128c565b9392505050565b600060208284031215610e7e57600080fd5b8151610e65816112b1565b600080600060608486031215610e9e57600080fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610ecb57600080fd5b843593506020808601359350604080870135935060608088013567ffffffffffffffff80821115610efb57600080fd5b818a0191508a601f830112610f0f57600080fd5b813581811115610f2157610f2161125d565b610f2f868260051b0161115f565b818152868101925083870160e08302850188018e1015610f4e57600080fd5b600094505b82851015610fe65760e0818f031215610f6b57600080fd5b610f73611136565b8135610f7e816112b1565b815281890135610f8d816112b1565b818a0152818801358882015286820135878201526080820135610faf8161128c565b608082015260a0828101359082015260c0820135610fcc8161128c565b60c08201528452600194909401939287019260e001610f53565b50999c989b5096995050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611099576110868385518051151582526020810151151560208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff808216608085015260a083015160a08501528060c08401511660c085015250505050565b9284019260e09290920191600101611014565b50909695505050505050565b610100810161111382858051151582526020810151151560208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff808216608085015260a083015160a08501528060c08401511660c085015250505050565b73ffffffffffffffffffffffffffffffffffffffff831660e08301529392505050565b60405160e0810167ffffffffffffffff811182821017156111595761115961125d565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111a6576111a661125d565b604052919050565b600082198211156111c1576111c16111ff565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111f8576111f86111ff565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146112ae57600080fd5b50565b80151581146112ae57600080fdfea26469706673582212201a146aedcaf085e20b059009fcadc82671ea97700bc5b597207bd7df1a0cdaf464736f6c63430008060033",
  "devdoc": {
    "details": "Adheres to: IJBSplitsStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.Inherits from: JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "set(uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address)[])": {
        "details": "Only the owner or operator of a project, or the current controller contract of the project, can set its splits.The new splits must include any currently set splits that are locked.",
        "params": {
          "_domain": "An identifier within which the splits should be considered active.",
          "_group": "An identifier between of splits being set. All splits within this _group must add up to within 100%.",
          "_projectId": "The ID of the project for which splits are being added.",
          "_splits": "The splits to set."
        }
      },
      "splitsOf(uint256,uint256,uint256)": {
        "params": {
          "_domain": "An identifier within which the returned splits should be considered active.",
          "_group": "The identifying group of the splits.",
          "_projectId": "The ID of the project to get splits for."
        },
        "returns": {
          "_0": "An array of all splits for the project."
        }
      }
    },
    "stateVariables": {
      "_packedSplitParts2Of": {
        "details": "This packed data is often 0. _projectId The ID of the project to get packed splits data for. _domain An identifier within which the returned splits should be considered active. _group The identifying group of the splits. _index The indexed order that the split was set at."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "directory()": {
        "notice": " The directory of terminals and controllers for projects."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "projects()": {
        "notice": " Mints ERC-721's that represent project ownership and transfers."
      },
      "set(uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address)[])": {
        "notice": " Sets a project's splits."
      },
      "splitsOf(uint256,uint256,uint256)": {
        "notice": " Get all splits for the specified project ID, within the specified domain, for the specified group."
      }
    },
    "notice": "Stores splits for each project.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12030,
        "contract": "contracts/JBSplitsStore.sol:JBSplitsStore",
        "label": "_splitCountOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 12041,
        "contract": "contracts/JBSplitsStore.sol:JBSplitsStore",
        "label": "_packedSplitParts1Of",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))))"
      },
      {
        "astId": 12052,
        "contract": "contracts/JBSplitsStore.sol:JBSplitsStore",
        "label": "_packedSplitParts2Of",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))))"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}