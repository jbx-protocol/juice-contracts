{
  "address": "0x53C0CE78b61B29816b548C705dAc4cD4839693b6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ALLOCATOR_AND_BENEFICIARY_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_LOCKED_UNTIL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_PROJECT_ID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_SPLIT_PERCENT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_TOTAL_PERCENT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "group",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBSplit",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetSplit",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_group",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "internalType": "struct JBSplit[]",
          "name": "_splits",
          "type": "tuple[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_group",
          "type": "uint256"
        }
      ],
      "name": "splitsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "internalType": "struct JBSplit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3ea5275f63fb5df1797239679896f8b0371e0f31c5aeb84d6ebcf648f0d7947",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x53C0CE78b61B29816b548C705dAc4cD4839693b6",
    "transactionIndex": 2,
    "gasUsed": "1122991",
    "logsBloom": "0x
    "blockHash": "0xdd19194b8e220ff245f99a5aaa678e65f1798053880531e2320da93f674e0a97",
    "transactionHash": "0xd3ea5275f63fb5df1797239679896f8b0371e0f31c5aeb84d6ebcf648f0d7947",
    "logs": [],
    "blockNumber": 10088465,
    "cumulativeGasUsed": "1381922",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xacD28185AE65adc711481c0aECB0B99Ac8608698",
    "0x05ea48673d41DC75fbDC8f32fA825be69c1BD5B2",
    "0xedfCFdCB621aFA76781eFBe7586fAe83D1578Ac2"
  ],
  "numDeployments": 2,
  "solcInputHash": "84ad828d78fb9f44a0d0346f7fab757e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ALLOCATOR_AND_BENEFICIARY_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_LOCKED_UNTIL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_PROJECT_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_SPLIT_PERCENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_TOTAL_PERCENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBSplit\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetSplit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"_splits\",\"type\":\"tuple[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_group\",\"type\":\"uint256\"}],\"name\":\"splitsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\"}},\"set(uint256,uint256,uint256,(bool,uint256,uint256,address,uint256,address)[])\":{\"details\":\"Only the owner or operator of a project, or the current controller contract of the project, can set its splits.The new splits must include any currently set splits that are locked.\",\"params\":{\"_domain\":\"An identifier within which the splits should be considered active.\",\"_group\":\"An identifier between of splits being set. All splits within this _group must add up to within 100%.\",\"_projectId\":\"The ID of the project for which splits are being added.\",\"_splits\":\"The splits to set.\"}},\"splitsOf(uint256,uint256,uint256)\":{\"params\":{\"_domain\":\"An identifier within which the returned splits should be considered active.\",\"_group\":\"The identifying group of the splits.\",\"_projectId\":\"The ID of the project to get splits for.\"},\"returns\":{\"_0\":\"An array of all splits for the project.\"}}},\"stateVariables\":{\"_packedSplitParts2Of\":{\"details\":\"This packed data is often 0. _projectId The ID of the project to get packed splits data for. _domain An identifier within which the returned splits should be considered active. _group The identifying group of the splits. _index The indexed order that the split was set at.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"directory()\":{\"notice\":\" The directory of terminals and controllers for projects.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"projects()\":{\"notice\":\" The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"set(uint256,uint256,uint256,(bool,uint256,uint256,address,uint256,address)[])\":{\"notice\":\" Sets a project's splits.\"},\"splitsOf(uint256,uint256,uint256)\":{\"notice\":\" Get all splits for the specified project ID, within the specified domain, for the specified group.\"}},\"notice\":\"Stores splits for each project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBSplitsStore.sol\":\"JBSplitsStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transfered.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/JBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './libraries/JBOperations.sol';\\n\\n// Inheritance\\nimport './abstract/JBOperatable.sol';\\n\\nimport './interfaces/IJBSplitsStore.sol';\\nimport './interfaces/IJBDirectory.sol';\\n\\nimport './libraries/JBConstants.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror ALLOCATOR_AND_BENEFICIARY_ZERO_ADDRESS();\\nerror INVALID_SPLIT_PERCENT();\\nerror INVALID_TOTAL_PERCENT();\\nerror INVALID_PROJECT_ID();\\nerror INVALID_LOCKED_UNTIL();\\nerror PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\\n\\n/**\\n  @notice\\n  Stores splits for each project.\\n*/\\ncontract JBSplitsStore is IJBSplitsStore, JBOperatable {\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The number of splits currently set for each project ID's configurations.\\n\\n    _projectId The ID of the project to get the split count for.\\n    _domain An identifier within which the returned splits should be considered active.\\n    _group The identifying group of the splits.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) private _splitCountOf;\\n\\n  /** \\n    @notice\\n    Packed data of splits for each project ID's configurations.\\n\\n    _projectId The ID of the project to get packed splits data for.\\n    _domain An identifier within which the returned splits should be considered active.\\n    _group The identifying group of the splits.\\n    _index The indexed order that the split was set at.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))))\\n    private _packedSplitParts1Of;\\n\\n  /** \\n    @notice\\n    More packed data of splits for each project ID's configurations.\\n\\n    @dev\\n    This packed data is often 0.\\n\\n    _projectId The ID of the project to get packed splits data for.\\n    _domain An identifier within which the returned splits should be considered active.\\n    _group The identifying group of the splits.\\n    _index The indexed order that the split was set at.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))))\\n    private _packedSplitParts2Of;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  /** \\n    @notice \\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n  @notice \\n  Get all splits for the specified project ID, within the specified domain, for the specified group.\\n\\n  @param _projectId The ID of the project to get splits for.\\n  @param _domain An identifier within which the returned splits should be considered active.\\n  @param _group The identifying group of the splits.\\n\\n  @return An array of all splits for the project.\\n*/\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view override returns (JBSplit[] memory) {\\n    return _getStructsFor(_projectId, _domain, _group);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory\\n  ) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n    directory = _directory;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Sets a project's splits.\\n\\n    @dev\\n    Only the owner or operator of a project, or the current controller contract of the project, can set its splits.\\n\\n    @dev\\n    The new splits must include any currently set splits that are locked.\\n\\n    @param _projectId The ID of the project for which splits are being added.\\n    @param _domain An identifier within which the splits should be considered active.\\n    @param _group An identifier between of splits being set. All splits within this _group must add up to within 100%.\\n    @param _splits The splits to set.\\n  */\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  )\\n    external\\n    override\\n    requirePermissionAllowingOverride(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.SET_SPLITS,\\n      address(directory.controllerOf(_projectId)) == msg.sender\\n    )\\n  {\\n    // Get a reference to the project's current splits.\\n    JBSplit[] memory _currentSplits = _getStructsFor(_projectId, _domain, _group);\\n\\n    // Check to see if all locked splits are included.\\n    for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\\n      // If not locked, continue.\\n      if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\\n\\n      // Keep a reference to whether or not the locked split being iterated on is included.\\n      bool _includesLocked = false;\\n\\n      for (uint256 _j = 0; _j < _splits.length; _j++) {\\n        // Check for sameness.\\n        if (\\n          _splits[_j].percent == _currentSplits[_i].percent &&\\n          _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\\n          _splits[_j].allocator == _currentSplits[_i].allocator &&\\n          _splits[_j].projectId == _currentSplits[_i].projectId &&\\n          // Allow lock extention.\\n          _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\\n        ) _includesLocked = true;\\n      }\\n\\n      if (!_includesLocked) {\\n        revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\\n      }\\n    }\\n\\n    // Add up all the percents to make sure they cumulative are under 100%.\\n    uint256 _percentTotal = 0;\\n\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // The percent should be greater than 0.\\n      if (_splits[_i].percent == 0) {\\n        revert INVALID_SPLIT_PERCENT();\\n      }\\n      // ProjectId should be within a uint56\\n      if (_splits[_i].projectId > type(uint56).max) {\\n        revert INVALID_PROJECT_ID();\\n      }\\n\\n      // The allocator and the beneficiary shouldn't both be the zero address.\\n      if (\\n        _splits[_i].allocator == IJBSplitAllocator(address(0)) &&\\n        _splits[_i].beneficiary == address(0)\\n      ) {\\n        revert ALLOCATOR_AND_BENEFICIARY_ZERO_ADDRESS();\\n      }\\n\\n      // Add to the total percents.\\n      _percentTotal = _percentTotal + _splits[_i].percent;\\n\\n      // Validate the total does not exceed the expected value.\\n      if (_percentTotal > JBConstants.SPLITS_TOTAL_PERCENT) {\\n        revert INVALID_TOTAL_PERCENT();\\n      }\\n\\n      uint256 _packedSplitParts1 = _splits[_i].preferClaimed ? 1 : 0;\\n      _packedSplitParts1 |= _splits[_i].percent << 1;\\n      _packedSplitParts1 |= _splits[_i].projectId << 33;\\n      _packedSplitParts1 |= uint256(uint160(address(_splits[_i].beneficiary))) << 89;\\n\\n      // Store the first spit part.\\n      _packedSplitParts1Of[_projectId][_domain][_group][_i] = _packedSplitParts1;\\n\\n      // If there's data to store in the second packed split part, pack and store.\\n      if (_splits[_i].lockedUntil > 0 || _splits[_i].allocator != IJBSplitAllocator(address(0))) {\\n        // Locked until should be within a uint48\\n        if (_splits[_i].lockedUntil > type(uint48).max) {\\n          revert INVALID_LOCKED_UNTIL();\\n        }\\n        uint256 _packedSplitParts2 = uint48(_splits[_i].lockedUntil);\\n        _packedSplitParts2 |= uint256(uint160(address(_splits[_i].allocator))) << 48;\\n        _packedSplitParts2Of[_projectId][_domain][_group][_i] = _packedSplitParts2;\\n        // Otherwise if there's a value stored in the indexed position, delete it.\\n      } else if (_packedSplitParts2Of[_projectId][_domain][_group][_i] > 0) {\\n        delete _packedSplitParts2Of[_projectId][_domain][_group][_i];\\n      }\\n\\n      emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender);\\n    }\\n\\n    // Set the new length of the splits.\\n    _splitCountOf[_projectId][_domain][_group] = _splits.length;\\n  }\\n\\n  /**\\n    @notice \\n    Unpack splits' packed stored values into easy-to-work-with spit structs.\\n\\n    @param _projectId The ID of the project to which the split belongs.\\n    @param _domain The identifier within which the returned splits should be considered active.\\n    @param _group The identifying group of the splits.\\n\\n    @return splits The split structs.\\n  */\\n  function _getStructsFor(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) private view returns (JBSplit[] memory) {\\n    // Get a reference to the number of splits that need to be added to the returned array.\\n    uint256 _splitCount = _splitCountOf[_projectId][_domain][_group];\\n\\n    // Initialize an array to be returned that has the set length.\\n    JBSplit[] memory _splits = new JBSplit[](_splitCount);\\n\\n    // Loop through each split and unpack the values into structs.\\n    for (uint256 _i = 0; _i < _splitCount; _i++) {\\n      // Get a reference to the fist packed data.\\n      uint256 _packedSplitPart1 = _packedSplitParts1Of[_projectId][_domain][_group][_i];\\n\\n      JBSplit memory _split;\\n\\n      _split.preferClaimed = (_packedSplitPart1 & 1) == 1;\\n      _split.percent = uint256(uint32(_packedSplitPart1 >> 1));\\n      _split.projectId = uint256(uint56(_packedSplitPart1 >> 33));\\n      _split.beneficiary = payable(address(uint160(_packedSplitPart1 >> 89)));\\n\\n      // Get a reference to the second packed data.\\n      uint256 _packedSplitPart2 = _packedSplitParts2Of[_projectId][_domain][_group][_i];\\n\\n      // If there's anything in it, unpack.\\n      if (_packedSplitPart2 > 0) {\\n        _split.lockedUntil = uint256(uint48(_packedSplitPart2));\\n        _split.allocator = IJBSplitAllocator(address(uint160(_packedSplitPart2 >> 48)));\\n      }\\n\\n      // Add the split to the value being returned.\\n      _splits[_i] = _split;\\n    }\\n\\n    return _splits;\\n  }\\n}\\n\",\"keccak256\":\"0x46d87366aa12625f556f13893f15774068f983a1318c2c450977ecbec963917a\",\"license\":\"MIT\"},\"contracts/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n// --------------------------- custom errors -------------------------- //\\n//*********************************************************************//\\nerror UNAUTHORIZED();\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) {\\n      revert UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) {\\n      revert UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x54dabe4efc06083ac139b6fb0f2c48157611f2186dd5959867aa2161a413407a\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed\\n}\\n\",\"keccak256\":\"0xda8544e199de385d447fc485037d66ba906a88985328a5e1e0ddcb178b44f382\",\"license\":\"MIT\"},\"contracts/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function overflowAllowanceCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9cde0919d7d96124cf75e36e2bc97c0b5fb8a418a6dd14fe45e574bada5d1ec3\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event AddToSetControllerAllowlist(address indexed _address, address caller);\\n\\n  event RemoveFromSetControllerAllowlist(address indexed _address, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function isAllowedToSetController(address _address) external view returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function addToSetControllerAllowlist(address _address) external;\\n\\n  function removeFromSetControllerAllowlist(address _address) external;\\n}\\n\",\"keccak256\":\"0xcb8d82ed4c1b3a7800e0075d304a389e6810e2ba5df39e65870d7b65f9d900e5\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x7649782cc0f754b369bace5ac88e863027fa35d5912eef32ab0e8aef123adccb\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xf8212a9e70b63c818f53aec3ed8728a2679d7b984d93b67a7d7e2890b6da8260\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 id);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x11b7a85bd31d24e7cd08fe864ccd3ec5789e5d264e445d30a3b88de0979dfdab\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '../structs/JBSplit.sol';\\n\\ninterface IJBSplitAllocator {\\n  function allocate(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    uint256 _group,\\n    JBSplit calldata _split\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xb203a9130c48dfeed047f4cdca7e250479295fb0c65041869b3c2e4303525669\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBPaymentTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function remainingDistributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _fundingCycleConfiguration,\\n    uint256 _fundingCycleNumber\\n  ) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable;\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0xd8482a6347d06d13106c2f8252e1b6f9646a438af3c946b8075e4a2bb4fca32c\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475\",\"license\":\"MIT\"},\"contracts/libraries/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n  @notice\\n  Global constants used across multiple Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  /** \\n    @notice\\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\\n  */\\n  uint256 public constant MAX_RESERVED_RATE = 10000;\\n\\n  /**\\n    @notice\\n    Maximum token redemption rate.  \\n    */\\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\\n\\n  /** \\n    @notice\\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\\n  */\\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum splits percentage.\\n  */\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum discount on fee granted by a gauge.\\n  */\\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\\n}\\n\",\"keccak256\":\"0x9a12e8bb803d650356783fd995db0dbbd09dedd3f93195bf689c902c102f59a9\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_HANDLE = 6;\\n  uint256 public constant SET_METADATA = 7;\\n  uint256 public constant ISSUE = 8;\\n  uint256 public constant CHANGE_TOKEN = 9;\\n  uint256 public constant MINT = 10;\\n  uint256 public constant BURN = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant REQUIRE_CLAIM = 13;\\n  uint256 public constant SET_CONTROLLER = 14;\\n  uint256 public constant ADD_TERMINALS = 15;\\n  uint256 public constant REMOVE_TERMINAL = 16;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 17;\\n  uint256 public constant USE_ALLOWANCE = 18;\\n  uint256 public constant SET_SPLITS = 19;\\n}\\n\",\"keccak256\":\"0x1c56caf6c44994cc44a3e16de9781e880079e8543d8ce541a405178b3407838f\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // An unsigned 60.18-decimal fixed-point number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x8ff64289216ea89220cc828df7d0ca1a363286c71a158faddd1b3161958b190e\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0xc68e73a33a605bab8bd4fa260833e7ba3b539f90e96f43b4851a33e53811eb2d\",\"license\":\"MIT\"},\"contracts/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x25a5007c18c3c057615869124af6b0e9cdfbd64fd8d2d7a17f428d6eea5a4835\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBProjectMetadata {\\n  // Metadata content.\\n  string content;\\n  // The domain within which the metadata applies.\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0xc3b76e617b453c6dc60cc8bd3683ff7726f1a967b28fb8e760b1d16f52c07d17\",\"license\":\"MIT\"},\"contracts/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and that project has issued its tokens.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered staked or unstaked to the beneficiary.\\n  bool preferClaimed;\\n  // The percent of the whole group that this split occupies. This number is out of 1000000000.\\n  uint256 percent;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the Juicebox treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the unstaked token preference respected.\\n  uint256 projectId;\\n  // The role the  beneficary depends on whether or not projectId is specified, or whether or not allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // Specifies if the split should be unchangeable until the specifies time comes, with the exception of extending the lockedUntil period.\\n  uint256 lockedUntil;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with the projectId, beneficiary, preferClaimed properties.\\n  IJBSplitAllocator allocator;\\n}\\n\",\"keccak256\":\"0xbf9548ed07950457a334c38a74d2bf66fedd248f755634e01ba4b95d8711dcd7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051620014723803806200147283398101604081905261003191610058565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526100bd565b60008060006060848603121561006d57600080fd5b8351610078816100a5565b6020850151909350610089816100a5565b604085015190925061009a816100a5565b809150509250925092565b6001600160a01b03811681146100ba57600080fd5b50565b60805160601c60a05160601c60c05160601c61136262000110600039600081816101220152610262015260008181609a015261018801526000818160fb01528181610376015261045201526113626000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639acff5ac116100505780639acff5ac146100e1578063ad007d63146100f6578063c41c2f241461011d57600080fd5b806369e11cc51461006c5780638b79543c14610095575b600080fd5b61007f61007a366004610f1f565b610144565b60405161008c919061107e565b60405180910390f35b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b6100f46100ef366004610f4b565b610159565b005b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b6060610151848484610cf8565b949350505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156101df57600080fd5b505afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102179190610ede565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690528590601390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190610ede565b73ffffffffffffffffffffffffffffffffffffffff161480158161031657503373ffffffffffffffffffffffffffffffffffffffff851614155b80156103f257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156103b857600080fd5b505afa1580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f09190610f02565b155b80156104ce57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561049457600080fd5b505afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc9190610f02565b155b15610505576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610512898989610cf8565b905060005b8151811015610768578181815181106105325761053261129b565b602002602001015160800151421061054957610756565b6000805b885181101561071c578383815181106105685761056861129b565b6020026020010151602001518982815181106105865761058661129b565b60200260200101516020015114801561060457508383815181106105ac576105ac61129b565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff168982815181106105e0576105e061129b565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff16145b8015610675575083838151811061061d5761061d61129b565b602002602001015160a0015173ffffffffffffffffffffffffffffffffffffffff168982815181106106515761065161129b565b602002602001015160a0015173ffffffffffffffffffffffffffffffffffffffff16145b80156106ba575083838151811061068e5761068e61129b565b6020026020010151604001518982815181106106ac576106ac61129b565b602002602001015160400151145b801561070057508383815181106106d3576106d361129b565b6020026020010151608001518982815181106106f1576106f161129b565b60200260200101516080015110155b1561070a57600191505b8061071481611233565b91505061054d565b5080610754576040517f1974459500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b8061076081611233565b915050610517565b506000805b8751811015610cc9578781815181106107885761078861129b565b602002602001015160200151600014156107ce576040517fe119ba4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b66ffffffffffffff80168882815181106107ea576107ea61129b565b602002602001015160400151111561082e576040517f3b44d99200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168882815181106108585761085861129b565b602002602001015160a0015173ffffffffffffffffffffffffffffffffffffffff161480156108d05750600073ffffffffffffffffffffffffffffffffffffffff168882815181106108ac576108ac61129b565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff16145b15610907576040517f8833af6e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8781815181106109195761091961129b565b60200260200101516020015182610930919061121b565b9150633b9aca00821115610970576040517feca7361000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008882815181106109845761098461129b565b60200260200101516000015161099b57600061099e565b60015b60ff16905060018983815181106109b7576109b761129b565b602002602001015160200151901b8117905060218983815181106109dd576109dd61129b565b602002602001015160400151901b811790506059898381518110610a0357610a0361129b565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff16901b8117905080600160008e815260200190815260200160002060008d815260200190815260200160002060008c81526020019081526020016000206000848152602001908152602001600020819055506000898381518110610a8a57610a8a61129b565b6020026020010151608001511180610aec5750600073ffffffffffffffffffffffffffffffffffffffff16898381518110610ac757610ac761129b565b602002602001015160a0015173ffffffffffffffffffffffffffffffffffffffff1614155b15610c075765ffffffffffff8016898381518110610b0c57610b0c61129b565b6020026020010151608001511115610b50576040517fd509b54d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000898381518110610b6457610b6461129b565b60200260200101516080015165ffffffffffff16905060308a8481518110610b8e57610b8e61129b565b602002602001015160a0015173ffffffffffffffffffffffffffffffffffffffff16901b8117905080600260008f815260200190815260200160002060008e815260200190815260200160002060008d815260200190815260200160002060008581526020019081526020016000208190555050610c61565b60008c81526002602090815260408083208e845282528083208d8452825280832085845290915290205415610c615760008c81526002602090815260408083208e845282528083208d845282528083208584529091528120555b898b8d7f0d7ea8ac1cb69dfa18ce2b18e90d31b4d4a0370aacadf7db42d42930a09b3f018c8681518110610c9757610c9761129b565b602002602001015133604051610cae92919061111f565b60405180910390a45080610cc181611233565b91505061076d565b50509451600098895260208981526040808b20998b52988152888a20978a529690965250505092909320555050565b60008381526020818152604080832085845282528083208484529091528120546060918167ffffffffffffffff811115610d3457610d346112ca565b604051908082528060200260200182016040528015610db257816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610d525790505b50905060005b82811015610ed45760008781526001602081815260408084208a855282528084208985528252808420858552825280842054815160c0810183526080810186905260a08101869052818516851481529381901c63ffffffff1684840152602181901c66ffffffffffffff1684830152605981901c73ffffffffffffffffffffffffffffffffffffffff1660608501528b8552600283528185208b865283528185208a86528352818520868652909252909220548015610ea05765ffffffffffff8116608083015273ffffffffffffffffffffffffffffffffffffffff603082901c1660a08301525b81858581518110610eb357610eb361129b565b60200260200101819052505050508080610ecc90611233565b915050610db8565b5095945050505050565b600060208284031215610ef057600080fd5b8151610efb816112f9565b9392505050565b600060208284031215610f1457600080fd5b8151610efb8161131e565b600080600060608486031215610f3457600080fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610f6157600080fd5b8435935060208086013593506040860135925060608087013567ffffffffffffffff80821115610f9057600080fd5b818901915089601f830112610fa457600080fd5b813581811115610fb657610fb66112ca565b610fc4858260051b016111cc565b818152858101925083860160c08302850187018d1015610fe357600080fd5b60009450845b8381101561106a5760c0828f031215611000578586fd5b6110086111a3565b82356110138161131e565b815282890135898201526040808401359082015287830135611034816112f9565b818901526080838101359082015260a0830135611050816112f9565b60a082015285529387019360c09190910190600101610fe9565b505080965050505050505092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015611113576111008385518051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b9284019260c0929092019160010161109a565b50909695505050505050565b60e0810161118082858051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b73ffffffffffffffffffffffffffffffffffffffff831660c08301529392505050565b60405160c0810167ffffffffffffffff811182821017156111c6576111c66112ca565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611213576112136112ca565b604052919050565b6000821982111561122e5761122e61126c565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112655761126561126c565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461131b57600080fd5b50565b801515811461131b57600080fdfea26469706673582212202083a1a4cc5ab4407fd573dbe37daeea22369a8166621491e8ac6ca9a1bb28e164736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "set(uint256,uint256,uint256,(bool,uint256,uint256,address,uint256,address)[])": {
        "details": "Only the owner or operator of a project, or the current controller contract of the project, can set its splits.The new splits must include any currently set splits that are locked.",
        "params": {
          "_domain": "An identifier within which the splits should be considered active.",
          "_group": "An identifier between of splits being set. All splits within this _group must add up to within 100%.",
          "_projectId": "The ID of the project for which splits are being added.",
          "_splits": "The splits to set."
        }
      },
      "splitsOf(uint256,uint256,uint256)": {
        "params": {
          "_domain": "An identifier within which the returned splits should be considered active.",
          "_group": "The identifying group of the splits.",
          "_projectId": "The ID of the project to get splits for."
        },
        "returns": {
          "_0": "An array of all splits for the project."
        }
      }
    },
    "stateVariables": {
      "_packedSplitParts2Of": {
        "details": "This packed data is often 0. _projectId The ID of the project to get packed splits data for. _domain An identifier within which the returned splits should be considered active. _group The identifying group of the splits. _index The indexed order that the split was set at."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "directory()": {
        "notice": " The directory of terminals and controllers for projects."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "projects()": {
        "notice": " The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "set(uint256,uint256,uint256,(bool,uint256,uint256,address,uint256,address)[])": {
        "notice": " Sets a project's splits."
      },
      "splitsOf(uint256,uint256,uint256)": {
        "notice": " Get all splits for the specified project ID, within the specified domain, for the specified group."
      }
    },
    "notice": "Stores splits for each project.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12087,
        "contract": "contracts/JBSplitsStore.sol:JBSplitsStore",
        "label": "_splitCountOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 12098,
        "contract": "contracts/JBSplitsStore.sol:JBSplitsStore",
        "label": "_packedSplitParts1Of",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))))"
      },
      {
        "astId": 12109,
        "contract": "contracts/JBSplitsStore.sol:JBSplitsStore",
        "label": "_packedSplitParts2Of",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))))"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
