{
  "address": "0x2d110f9DDa8d019B453299151631e9dfb69cfcb7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "contract IJBSplitsStore",
          "name": "_splitsStore",
          "type": "address"
        },
        {
          "internalType": "contract JBETHPaymentTerminalStore",
          "name": "_store",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FEE_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PAY_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REDEEM_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TERMINAL_IN_SPLIT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TERMINAL_TOKENS_INCOMPATIBLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE_SENT",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AddToBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beneficiaryDistributionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributePayouts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBSplit",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeToPayoutSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBPaymentTerminal",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "fee",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFee[]",
          "name": "fees",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ProcessFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RedeemTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IJBFeeGauge",
          "name": "feeGauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetFeeGauge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UseAllowance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "addToBalanceOf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "distributePayoutsOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "ethBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeGauge",
      "outputs": [
        {
          "internalType": "contract IJBFeeGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "heldFeesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "fee",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct JBFee[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedTokens",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_delegateMetadata",
          "type": "bytes"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "processFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_delegateMetadata",
          "type": "bytes"
        }
      ],
      "name": "redeemTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingCycleNumber",
          "type": "uint256"
        }
      ],
      "name": "remainingDistributionLimitOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBFeeGauge",
          "name": "_feeGauge",
          "type": "address"
        }
      ],
      "name": "setFeeGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitsStore",
      "outputs": [
        {
          "internalType": "contract IJBSplitsStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "store",
      "outputs": [
        {
          "internalType": "contract JBETHPaymentTerminalStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedWei",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "useAllowanceOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13d222afc32490aea37a87a7a16b5d4f6af2691a6f6215996cacb9730b937ee1",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x2d110f9DDa8d019B453299151631e9dfb69cfcb7",
    "transactionIndex": 3,
    "gasUsed": "3981561",
    "logsBloom": "0x00000000000000000000000000000200000000000040000000c00000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800040000000000000000000000000000400000000800000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060400000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd8e6e7aed512be49eb8b3d6f5ebfe75b70e19c571da0421e900be8603dc9f1b9",
    "transactionHash": "0x13d222afc32490aea37a87a7a16b5d4f6af2691a6f6215996cacb9730b937ee1",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10088579,
        "transactionHash": "0x13d222afc32490aea37a87a7a16b5d4f6af2691a6f6215996cacb9730b937ee1",
        "address": "0x2d110f9DDa8d019B453299151631e9dfb69cfcb7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e9be6df23c7f9caba3005da2fa2d8714d340d0af"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xd8e6e7aed512be49eb8b3d6f5ebfe75b70e19c571da0421e900be8603dc9f1b9"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 10088579,
        "transactionHash": "0x13d222afc32490aea37a87a7a16b5d4f6af2691a6f6215996cacb9730b937ee1",
        "address": "0x2d110f9DDa8d019B453299151631e9dfb69cfcb7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e9be6df23c7f9caba3005da2fa2d8714d340d0af",
          "0x00000000000000000000000069c6026e3938ade9e1dde8ff6a37ec96595bf1e1"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xd8e6e7aed512be49eb8b3d6f5ebfe75b70e19c571da0421e900be8603dc9f1b9"
      }
    ],
    "blockNumber": 10088579,
    "cumulativeGasUsed": "4211984",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xacD28185AE65adc711481c0aECB0B99Ac8608698",
    "0x05ea48673d41DC75fbDC8f32fA825be69c1BD5B2",
    "0xedfCFdCB621aFA76781eFBe7586fAe83D1578Ac2",
    "0x53C0CE78b61B29816b548C705dAc4cD4839693b6",
    "0x224628D88858cBc535486C3BC3bB25bBB487fa8A",
    "0x69C6026e3938adE9e1ddE8Ff6A37eC96595bF1e1"
  ],
  "numDeployments": 2,
  "solcInputHash": "84ad828d78fb9f44a0d0346f7fab757e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"_splitsStore\",\"type\":\"address\"},{\"internalType\":\"contract JBETHPaymentTerminalStore\",\"name\":\"_store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PAY_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REDEEM_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TERMINAL_IN_SPLIT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TERMINAL_TOKENS_INCOMPATIBLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_VALUE_SENT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AddToBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaryDistributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributePayouts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBSplit\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeToPayoutSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBFee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProcessFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedeemTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IJBFeeGauge\",\"name\":\"feeGauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetFeeGauge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UseAllowance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"addToBalanceOf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"distributePayoutsOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"ethBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGauge\",\"outputs\":[{\"internalType\":\"contract IJBFeeGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"heldFeesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct JBFee[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_delegateMetadata\",\"type\":\"bytes\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"processFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_delegateMetadata\",\"type\":\"bytes\"}],\"name\":\"redeemTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleConfiguration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingCycleNumber\",\"type\":\"uint256\"}],\"name\":\"remainingDistributionLimitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBFeeGauge\",\"name\":\"_feeGauge\",\"type\":\"address\"}],\"name\":\"setFeeGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitsStore\",\"outputs\":[{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract JBETHPaymentTerminalStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedWei\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"useAllowanceOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time. Inherits from: IJBPayoutRedemptionPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\",\"kind\":\"dev\",\"methods\":{\"addToBalanceOf(uint256,string)\":{\"params\":{\"_memo\":\"A memo to pass along to the emitted event.\",\"_projectId\":\"The ID of the project to which the funds received belong.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_owner\":\"The address that will own this contract.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\",\"_splitsStore\":\"A contract that stores splits for each project.\",\"_store\":\"A contract that stores the terminal's data.\"}},\"delegate()\":{\"returns\":{\"_0\":\"The delegate address.\"}},\"distributePayoutsOf(uint256,uint256,uint256,uint256,string)\":{\"details\":\"Payouts are sent to the preprogrammed splits.Anyone can distribute payouts on a project's behalf.\",\"params\":{\"_amount\":\"The amount being distributed.\",\"_currency\":\"The expected currency of the amount being distributed. Must match the project's current funding cycle's currency.\",\"_minReturnedWei\":\"The minimum number of wei that the amount should be valued at.\",\"_projectId\":\"The ID of the project having its payouts distributed.\"}},\"ethBalanceOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to which the balance belongs.\"},\"returns\":{\"_0\":\"The ETH balance.\"}},\"heldFeesOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project for which fees are being held.\"},\"returns\":{\"_0\":\"An array of fees that are being held.\"}},\"migrate(uint256,address)\":{\"details\":\"Only a project's owner or a designated operator can migrate it.\",\"params\":{\"_projectId\":\"The ID of the project being migrated.\",\"_to\":\"The terminal contract that will gain the project's funds.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pay(uint256,address,uint256,bool,string,bytes)\":{\"details\":\"The msg.value is the amount of the contribution in wei.\",\"params\":{\"_beneficiary\":\"The address to mint tokens for and pass along to the funding cycle's data source and delegate.\",\"_delegateMetadata\":\"Bytes to send along to the delegate, if one is provided.\",\"_memo\":\"A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\",\"_minReturnedTokens\":\"The minimum number of tokens expected in return.\",\"_preferClaimedTokens\":\"A flag indicating whether the request prefers to issue tokens unstaked rather than staked.\",\"_projectId\":\"The ID of the project being paid.\"}},\"processFees(uint256)\":{\"details\":\"Only a project owner, an operator, or the contract's owner can process held fees.\",\"params\":{\"_projectId\":\"The ID of the project whos held fees should be processed.\"}},\"redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)\":{\"details\":\"Only a token's holder or a designated operator can redeem it.\",\"params\":{\"_beneficiary\":\"The address to send the ETH to. Send the address this contract to burn the count.\",\"_delegateMetadata\":\"Bytes to send along to the delegate, if one is provided.\",\"_holder\":\"The account to redeem tokens for.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_minReturnedWei\":\"The minimum amount of Wei expected in return.\",\"_projectId\":\"The ID of the project to which the tokens being redeemed belong.\",\"_tokenCount\":\"The number of tokens to redeem.\"},\"returns\":{\"claimAmount\":\"The amount of ETH that the tokens were redeemed for, in wei.\"}},\"remainingDistributionLimitOf(uint256,uint256,uint256)\":{\"params\":{\"_fundingCycleConfiguration\":\"The funding cycle configuration during which the limit remaining is being calculated.\",\"_fundingCycleNumber\":\"The number of the funding cycle during which the limit remaining is being calculated.\",\"_projectId\":\"The ID of the project to which the remaining limit belongs.\"},\"returns\":{\"_0\":\"The remaining distribution limit for this terminal.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"details\":\"Only the owner of this contract can change the fee.\",\"params\":{\"_fee\":\"The new fee.\"}},\"setFeeGauge(address)\":{\"details\":\"Only the owner of this contract can change the fee gauge.\",\"params\":{\"_feeGauge\":\"The new fee gauge.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"useAllowanceOf(uint256,uint256,uint256,uint256,address)\":{\"details\":\"Only a project's owner or a designated operator can migrate it.\",\"params\":{\"_amount\":\"The amount of the allowance to use.\",\"_beneficiary\":\"The address to send the funds to.\",\"_projectId\":\"The ID of the project to use the allowance of.\"}}},\"stateVariables\":{\"fee\":{\"details\":\"Out of 200.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"addToBalanceOf(uint256,string)\":{\"notice\":\"Receives funds belonging to the specified project.\"},\"delegate()\":{\"notice\":\"An address that serves as this terminal's delegate when making requests to ecosystem contracts.\"},\"directory()\":{\"notice\":\"The directory of terminals and controllers for projects.\"},\"distributePayoutsOf(uint256,uint256,uint256,uint256,string)\":{\"notice\":\"Distributes payouts for a project according to the constraints of its current funding cycle.\"},\"ethBalanceOf(uint256)\":{\"notice\":\"The ETH balance that this terminal holds for each project.\"},\"fee()\":{\"notice\":\"The platform fee percent.\"},\"feeGauge()\":{\"notice\":\"The data source that returns a discount to apply to a project's fee.\"},\"heldFeesOf(uint256)\":{\"notice\":\"The fees that are currently being held to be processed later for each project.\"},\"migrate(uint256,address)\":{\"notice\":\"Allows a project owner to migrate its funds and operations to a new terminal.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"pay(uint256,address,uint256,bool,string,bytes)\":{\"notice\":\"Contribute ETH to a project.\"},\"processFees(uint256)\":{\"notice\":\"Process any fees that are being held for the project.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)\":{\"notice\":\"Addresses can redeem their tokens to claim the project's overflowed ETH, or to trigger rules determined by the project's current funding cycle's data source.\"},\"remainingDistributionLimitOf(uint256,uint256,uint256)\":{\"notice\":\"The amount of funds that can still be distributed within the preconfigured limit.\"},\"setFee(uint256)\":{\"notice\":\"Allows the fee to be updated for subsequent funding cycle configurations.\"},\"setFeeGauge(address)\":{\"notice\":\"Allows the fee gauge to be updated.\"},\"splitsStore()\":{\"notice\":\"The contract that stores splits for each project.\"},\"store()\":{\"notice\":\"The contract that stores and manages the terminal's data.\"},\"token()\":{\"notice\":\"The token that this terminal accepts.\"},\"useAllowanceOf(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Allows a project to send funds from its overflow up to the preconfigured allowance.\"}},\"notice\":\"This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBETHPaymentTerminal.sol\":\"JBETHPaymentTerminal\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transfered.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transfered to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transfering `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3777e696b62134e6177440dbe6e6601c0c156a443f57167194b67e75527439de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0x42821345981bc0434a90ba2268a2f5278dfe9e38166981d72fc7f3b776a29495\",\"license\":\"Unlicense\"},\"@paulrberg/contracts/math/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\",\"keccak256\":\"0xe170989159224c21fd720fa923e6c8111005f767f6e5a266034f82a1b4348f93\",\"license\":\"Unlicense\"},\"contracts/JBETHPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './libraries/JBConstants.sol';\\nimport './libraries/JBCurrencies.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBTokens.sol';\\n\\nimport './JBETHPaymentTerminalStore.sol';\\n\\n// Inheritance\\nimport './interfaces/IJBETHPaymentTerminal.sol';\\nimport './interfaces/IJBPaymentTerminal.sol';\\nimport './abstract/JBOperatable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror FEE_TOO_HIGH();\\nerror PAY_TO_ZERO_ADDRESS();\\nerror REDEEM_TO_ZERO_ADDRESS();\\nerror TERMINAL_IN_SPLIT_ZERO_ADDRESS();\\nerror TERMINAL_TOKENS_INCOMPATIBLE();\\nerror ZERO_VALUE_SENT();\\n\\n/**\\n  @notice\\n  This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\\n\\n  @dev\\n  A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time.\\n\\n  Inherits from:\\n\\n  IJBPayoutRedemptionPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the protocol's rules.\\n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\\n*/\\ncontract JBETHPaymentTerminal is\\n  IJBETHPaymentTerminal,\\n  IJBPaymentTerminal,\\n  JBOperatable,\\n  Ownable,\\n  ReentrancyGuard\\n{\\n  // A library that parses the packed funding cycle metadata into a more friendly format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  //*********************************************************************//\\n  // --------------------- private stored constants -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Maximum fee that can be set for a funding cycle configuration.\\n  */\\n  uint256 private constant _MAX_FEE = 10;\\n\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Fees that are being held to be processed later.\\n\\n    _projectId The ID of the project for which fees are being held.\\n  */\\n  mapping(uint256 => JBFee[]) private _heldFeesOf;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  /**\\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  /**\\n    @notice\\n    The contract that stores splits for each project.\\n  */\\n  IJBSplitsStore public immutable override splitsStore;\\n\\n  /**\\n    @notice\\n    The contract that stores and manages the terminal's data.\\n  */\\n  JBETHPaymentTerminalStore public immutable store;\\n\\n  /**\\n    @notice\\n    The token that this terminal accepts.\\n  */\\n  address public immutable override token = JBTokens.ETH;\\n\\n  /**\\n    @notice\\n    The platform fee percent.\\n\\n    @dev\\n    Out of 200.\\n  */\\n  uint256 public override fee = 10;\\n\\n  /**\\n    @notice\\n    The data source that returns a discount to apply to a project's fee.\\n  */\\n  IJBFeeGauge public override feeGauge;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The ETH balance that this terminal holds for each project.\\n\\n    @param _projectId The ID of the project to which the balance belongs.\\n\\n    @return The ETH balance.\\n  */\\n  function ethBalanceOf(uint256 _projectId) external view override returns (uint256) {\\n    // The store's balance is already in ETH.\\n    return store.balanceOf(_projectId);\\n  }\\n\\n  /**\\n    @notice\\n    The amount of funds that can still be distributed within the preconfigured limit.\\n\\n    @param _projectId The ID of the project to which the remaining limit belongs.\\n    @param _fundingCycleConfiguration The funding cycle configuration during which the limit remaining is being calculated.\\n    @param _fundingCycleNumber The number of the funding cycle during which the limit remaining is being calculated.\\n\\n    @return The remaining distribution limit for this terminal.\\n  */\\n  function remainingDistributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _fundingCycleConfiguration,\\n    uint256 _fundingCycleNumber\\n  ) external view override returns (uint256) {\\n    // Subtract the used distribution limit during the specified funding cycle from the preconfigured distribution limit.\\n    return\\n      directory.controllerOf(_projectId).distributionLimitOf(\\n        _projectId,\\n        _fundingCycleConfiguration,\\n        this\\n      ) - store.usedDistributionLimitOf(_projectId, _fundingCycleNumber);\\n  }\\n\\n  /**\\n    @notice\\n    The fees that are currently being held to be processed later for each project.\\n\\n    @param _projectId The ID of the project for which fees are being held.\\n\\n    @return An array of fees that are being held.\\n  */\\n  function heldFeesOf(uint256 _projectId) external view override returns (JBFee[] memory) {\\n    return _heldFeesOf[_projectId];\\n  }\\n\\n  /**\\n    @notice\\n    An address that serves as this terminal's delegate when making requests to ecosystem contracts.\\n\\n    @return The delegate address.\\n  */\\n  function delegate() external view override returns (address) {\\n    // The store is the delegate.\\n    return address(store);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _splitsStore A contract that stores splits for each project.\\n    @param _store A contract that stores the terminal's data.\\n    @param _owner The address that will own this contract.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBSplitsStore _splitsStore,\\n    JBETHPaymentTerminalStore _store,\\n    address _owner\\n  ) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n    directory = _directory;\\n    splitsStore = _splitsStore;\\n\\n    // Claim the store so that it recognizes this terminal as the one that can access it.\\n    _store.claimFor(this);\\n\\n    store = _store;\\n\\n    transferOwnership(_owner);\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Contribute ETH to a project.\\n\\n    @dev\\n    The msg.value is the amount of the contribution in wei.\\n\\n    @param _projectId The ID of the project being paid.\\n    @param _beneficiary The address to mint tokens for and pass along to the funding cycle's data source and delegate.\\n    @param _minReturnedTokens The minimum number of tokens expected in return.\\n    @param _preferClaimedTokens A flag indicating whether the request prefers to issue tokens unstaked rather than staked.\\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is provided.\\n  */\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable override {\\n    return\\n      _pay(\\n        msg.value,\\n        msg.sender,\\n        _projectId,\\n        _beneficiary,\\n        _minReturnedTokens,\\n        _preferClaimedTokens,\\n        _memo,\\n        _delegateMetadata\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Distributes payouts for a project according to the constraints of its current funding cycle.\\n\\n    @dev\\n    Payouts are sent to the preprogrammed splits.\\n\\n    @dev\\n    Anyone can distribute payouts on a project's behalf.\\n\\n    @param _projectId The ID of the project having its payouts distributed.\\n    @param _amount The amount being distributed.\\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's currency.\\n    @param _minReturnedWei The minimum number of wei that the amount should be valued at.\\n  */\\n  function distributePayoutsOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei,\\n    string memory _memo\\n  ) external override nonReentrant {\\n    // Record the distribution.\\n    (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordDistributionFor(\\n      _projectId,\\n      _amount,\\n      _currency,\\n      _minReturnedWei\\n    );\\n\\n    // Get a reference to the project owner, which will receive tokens from paying the platform fee\\n    // and receive any extra distributable funds not allocated to payout splits.\\n    address payable _projectOwner = payable(projects.ownerOf(_projectId));\\n\\n    // Take a fee from the _distributedAmount, if needed.\\n    // The project's owner will be the beneficiary of the resulting minted tokens from platform project.\\n    // The platform project's ID is 1.\\n    uint256 _feeAmount = fee == 0 || _projectId == 1\\n      ? 0\\n      : _takeFeeFrom(_projectId, _fundingCycle, _distributedAmount, _projectOwner);\\n\\n    // Payout to splits and get a reference to the leftover transfer amount after all mods have been paid.\\n    // The net transfer amount is the withdrawn amount minus the fee.\\n    uint256 _leftoverDistributionAmount = _distributeToPayoutSplitsOf(\\n      _projectId,\\n      _fundingCycle,\\n      _distributedAmount - _feeAmount\\n    );\\n\\n    // Transfer any remaining balance to the project owner.\\n    if (_leftoverDistributionAmount > 0)\\n      Address.sendValue(_projectOwner, _leftoverDistributionAmount);\\n\\n    emit DistributePayouts(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _projectOwner,\\n      _amount,\\n      _distributedAmount,\\n      _feeAmount,\\n      _leftoverDistributionAmount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Allows a project to send funds from its overflow up to the preconfigured allowance.\\n\\n    @dev\\n    Only a project's owner or a designated operator can migrate it.\\n\\n    @param _projectId The ID of the project to use the allowance of.\\n    @param _amount The amount of the allowance to use.\\n    @param _beneficiary The address to send the funds to.\\n  */\\n  function useAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.USE_ALLOWANCE)\\n  {\\n    // Record the use of the allowance.\\n    (JBFundingCycle memory _fundingCycle, uint256 _withdrawnAmount) = store.recordUsedAllowanceOf(\\n      _projectId,\\n      _amount,\\n      _currency,\\n      _minReturnedWei\\n    );\\n\\n    // Get a reference to the project owner, which will receive tokens from paying the platform fee\\n    // and receive any extra distributable funds not allocated to payout splits.\\n    address payable _projectOwner = payable(projects.ownerOf(_projectId));\\n\\n    // Take a fee from the _withdrawnAmount, if needed.\\n    // The project's owner will be the beneficiary.\\n    uint256 _feeAmount = fee == 0 || _projectId == 1 // The platform project's ID is 1.\\n      ? 0\\n      : _takeFeeFrom(_projectId, _fundingCycle, _withdrawnAmount, _projectOwner);\\n\\n    // Transfer any remaining balance to the project owner.\\n    Address.sendValue(_beneficiary, _withdrawnAmount - _feeAmount);\\n\\n    emit UseAllowance(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _beneficiary,\\n      _withdrawnAmount,\\n      _feeAmount,\\n      _withdrawnAmount - _feeAmount,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Addresses can redeem their tokens to claim the project's overflowed ETH, or to trigger rules determined by the project's current funding cycle's data source.\\n\\n    @dev\\n    Only a token's holder or a designated operator can redeem it.\\n\\n    @param _holder The account to redeem tokens for.\\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\\n    @param _tokenCount The number of tokens to redeem.\\n    @param _minReturnedWei The minimum amount of Wei expected in return.\\n    @param _beneficiary The address to send the ETH to. Send the address this contract to burn the count.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is provided.\\n\\n    @return claimAmount The amount of ETH that the tokens were redeemed for, in wei.\\n  */\\n  function redeemTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermission(_holder, _projectId, JBOperations.REDEEM)\\n    returns (uint256 claimAmount)\\n  {\\n    // Can't send claimed funds to the zero address.\\n    if (_beneficiary == address(0)) {\\n      revert REDEEM_TO_ZERO_ADDRESS();\\n    }\\n\\n    // Keep a reference to the funding cycles during which the redemption is being made.\\n    JBFundingCycle memory _fundingCycle;\\n\\n    // Record the redemption.\\n    (_fundingCycle, claimAmount, _memo) = store.recordRedemptionFor(\\n      _holder,\\n      _projectId,\\n      _tokenCount,\\n      _minReturnedWei,\\n      _beneficiary,\\n      _memo,\\n      _delegateMetadata\\n    );\\n\\n    // Send the claimed funds to the beneficiary.\\n    if (claimAmount > 0) Address.sendValue(_beneficiary, claimAmount);\\n\\n    emit RedeemTokens(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _holder,\\n      _beneficiary,\\n      _tokenCount,\\n      claimAmount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Allows a project owner to migrate its funds and operations to a new terminal.\\n\\n    @dev\\n    Only a project's owner or a designated operator can migrate it.\\n\\n    @param _projectId The ID of the project being migrated.\\n    @param _to The terminal contract that will gain the project's funds.\\n  */\\n  function migrate(uint256 _projectId, IJBPaymentTerminal _to)\\n    external\\n    override\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_TERMINAL)\\n  {\\n    // The terminal being migrated to must accept the same token as this terminal.\\n    if (token != _to.token()) {\\n      revert TERMINAL_TOKENS_INCOMPATIBLE();\\n    }\\n\\n    // Record the migration in the store.\\n    uint256 _balance = store.recordMigration(_projectId);\\n\\n    if (_balance > 0)\\n      // Withdraw the balance to transfer to the new terminal;\\n      _to.addToBalanceOf{value: _balance}(_projectId, '');\\n\\n    emit Migrate(_projectId, _to, _balance, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Receives funds belonging to the specified project.\\n\\n    @param _projectId The ID of the project to which the funds received belong.\\n    @param _memo A memo to pass along to the emitted event.\\n  */\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable override {\\n    // Amount must be greater than 0.\\n    if (msg.value == 0) {\\n      revert ZERO_VALUE_SENT();\\n    }\\n\\n    // Record the added funds.\\n    store.recordAddedBalanceFor(_projectId, msg.value);\\n\\n    // Refund any held fees to make sure the project doesn't pay double for funds going in and out of the protocol.\\n    _refundHeldFees(_projectId, msg.value);\\n\\n    emit AddToBalance(_projectId, msg.value, _memo, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Process any fees that are being held for the project.\\n\\n    @dev\\n    Only a project owner, an operator, or the contract's owner can process held fees.\\n\\n    @param _projectId The ID of the project whos held fees should be processed.\\n  */\\n  function processFees(uint256 _projectId)\\n    external\\n    requirePermissionAllowingOverride(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.PROCESS_FEES,\\n      msg.sender == owner()\\n    )\\n    nonReentrant\\n  {\\n    // Get a reference to the project's held fees.\\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\\n\\n    // Process each fee.\\n    for (uint256 _i = 0; _i < _heldFees.length; _i++)\\n      _takeFee(\\n        _heldFees[_i].amount - PRBMath.mulDiv(_heldFees[_i].amount, 200, _heldFees[_i].fee + 200),\\n        _heldFees[_i].beneficiary\\n      );\\n\\n    // Delete the held fee's now that they've been processed.\\n    delete _heldFeesOf[_projectId];\\n\\n    emit ProcessFees(_projectId, _heldFees, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Allows the fee to be updated for subsequent funding cycle configurations.\\n\\n    @dev\\n    Only the owner of this contract can change the fee.\\n\\n    @param _fee The new fee.\\n  */\\n  function setFee(uint256 _fee) external onlyOwner {\\n    // The max fee is 5%.\\n    if (_fee > _MAX_FEE) {\\n      revert FEE_TOO_HIGH();\\n    }\\n\\n    // Store the new fee.\\n    fee = _fee;\\n\\n    emit SetFee(_fee, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Allows the fee gauge to be updated.\\n\\n    @dev\\n    Only the owner of this contract can change the fee gauge.\\n\\n    @param _feeGauge The new fee gauge.\\n  */\\n  function setFeeGauge(IJBFeeGauge _feeGauge) external onlyOwner {\\n    // Store the new fee gauge.\\n    feeGauge = _feeGauge;\\n\\n    emit SetFeeGauge(_feeGauge, msg.sender);\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Pays out splits for a project's funding cycle configuration.\\n\\n    @param _projectId The ID of the project for which payout splits are being distributed.\\n    @param _fundingCycle The funding cycle during which the distribution is being made.\\n    @param _amount The total amount being distributed.\\n\\n    @return leftoverAmount If the leftover amount if the splits don't add up to 100%.\\n  */\\n  function _distributeToPayoutSplitsOf(\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _amount\\n  ) private returns (uint256 leftoverAmount) {\\n    // Set the leftover amount to the initial amount.\\n    leftoverAmount = _amount;\\n\\n    // Get a reference to the project's payout splits.\\n    JBSplit[] memory _splits = splitsStore.splitsOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      JBSplitsGroups.ETH_PAYOUT\\n    );\\n\\n    //Transfer between all splits.\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // Get a reference to the mod being iterated on.\\n      JBSplit memory _split = _splits[_i];\\n\\n      // The amount to send towards mods.\\n      uint256 _payoutAmount = PRBMath.mulDiv(\\n        _amount,\\n        _split.percent,\\n        JBConstants.SPLITS_TOTAL_PERCENT\\n      );\\n\\n      if (_payoutAmount > 0) {\\n        // Transfer ETH to the mod.\\n        // If there's an allocator set, transfer to its `allocate` function.\\n        if (_split.allocator != IJBSplitAllocator(address(0))) {\\n          _split.allocator.allocate{value: _payoutAmount}(\\n            _payoutAmount,\\n            _projectId,\\n            JBSplitsGroups.ETH_PAYOUT,\\n            _split\\n          );\\n          // Otherwise, if a project is specified, make a payment to it.\\n        } else if (_split.projectId != 0) {\\n          // Get a reference to the Juicebox terminal being used.\\n          IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_split.projectId, token);\\n\\n          // The project must have a terminal to send funds to.\\n          if (_terminal == IJBPaymentTerminal(address(0))) {\\n            revert TERMINAL_IN_SPLIT_ZERO_ADDRESS();\\n          }\\n\\n          // Save gas if this contract is being used as the terminal.\\n          if (_terminal == this) {\\n            _pay(\\n              _payoutAmount,\\n              address(this),\\n              _split.projectId,\\n              _split.beneficiary,\\n              0,\\n              _split.preferClaimed,\\n              '',\\n              bytes('')\\n            );\\n          } else {\\n            _terminal.pay{value: _payoutAmount}(\\n              _split.projectId,\\n              _split.beneficiary,\\n              0,\\n              _split.preferClaimed,\\n              '',\\n              bytes('')\\n            );\\n          }\\n        } else {\\n          // Otherwise, send the funds directly to the beneficiary.\\n          Address.sendValue(_split.beneficiary, _payoutAmount);\\n        }\\n\\n        // Subtract from the amount to be sent to the beneficiary.\\n        leftoverAmount = leftoverAmount - _payoutAmount;\\n      }\\n\\n      emit DistributeToPayoutSplit(\\n        _fundingCycle.configuration,\\n        _fundingCycle.number,\\n        _projectId,\\n        _split,\\n        _payoutAmount,\\n        msg.sender\\n      );\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Takes a fee into the platform's project, which has an id of 1.\\n\\n    @param _projectId The ID of the project having fees taken from.\\n    @param _fundingCycle The funding cycle during which the fee is being taken.\\n    @param _amount The amount to take a fee from.\\n    @param _beneficiary The address to print the platforms tokens for.\\n\\n    @return feeAmount The amount of the fee taken.\\n  */\\n  function _takeFeeFrom(\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _amount,\\n    address _beneficiary\\n  ) private returns (uint256 feeAmount) {\\n    // Get the fee discount.\\n    uint256 _feeDiscount = feeGauge == IJBFeeGauge(address(0))\\n      ? 0\\n      : feeGauge.currentDiscountFor(_projectId);\\n\\n    // Set the discounted fee if its valid.\\n    if (_feeDiscount > JBConstants.MAX_FEE_DISCOUNT) _feeDiscount = 0;\\n\\n    // Calculate the discounted fee.\\n    uint256 _discountedFee = fee - PRBMath.mulDiv(fee, _feeDiscount, JBConstants.MAX_FEE_DISCOUNT);\\n\\n    // The amount of ETH from the _amount to pay as a fee.\\n    feeAmount = _amount - PRBMath.mulDiv(_amount, 200, _discountedFee + 200);\\n\\n    // Nothing to do if there's no fee to take.\\n    if (feeAmount == 0) return 0;\\n\\n    _fundingCycle.shouldHoldFees()\\n      ? _heldFeesOf[_projectId].push(JBFee(_amount, uint8(fee), _beneficiary))\\n      : _takeFee(feeAmount, _beneficiary); // Take the fee.\\n  }\\n\\n  /**\\n    @notice\\n    Take a fee of the specified amount.\\n\\n    @param _amount The fee amount.\\n    @param _beneficiary The address to print the platforms tokens for.\\n  */\\n  function _takeFee(uint256 _amount, address _beneficiary) private {\\n    // Get the terminal for the protocol project.\\n    IJBPaymentTerminal _terminal = directory.primaryTerminalOf(1, token);\\n\\n    // When processing the admin fee, save gas if the admin is using this contract as its terminal.\\n    _terminal == this\\n      ? _pay(_amount, address(this), 1, _beneficiary, 0, false, '', bytes('')) // Use the local pay call.\\n      : _terminal.pay{value: _amount}(1, _beneficiary, 0, false, '', bytes('')); // Use the external pay call of the correct terminal.\\n  }\\n\\n  /**\\n    @notice\\n    See the documentation for 'pay'.\\n  */\\n  function _pay(\\n    uint256 _amount,\\n    address _payer,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  ) private {\\n    // Cant send tokens to the zero address.\\n    if (_beneficiary == address(0)) {\\n      revert PAY_TO_ZERO_ADDRESS();\\n    }\\n\\n    JBFundingCycle memory _fundingCycle;\\n    uint256 _weight;\\n    uint256 _tokenCount;\\n\\n    // Record the payment.\\n    (_fundingCycle, _weight, _tokenCount, _memo) = store.recordPaymentFrom(\\n      _payer,\\n      _amount,\\n      _projectId,\\n      (_preferClaimedTokens ? 1 : 0) | (uint256(uint160(_beneficiary)) << 1),\\n      _minReturnedTokens,\\n      _memo,\\n      _delegateMetadata\\n    );\\n\\n    emit Pay(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _beneficiary,\\n      _amount,\\n      _weight,\\n      _tokenCount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Refund fees based on the specified amount.\\n\\n    @param _projectId The project for which fees are being refunded.\\n    @param _amount The amount to base the refund on.\\n  */\\n  function _refundHeldFees(uint256 _projectId, uint256 _amount) private {\\n    // Get a reference to the project's held fees.\\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\\n\\n    // Delete the current held fees.\\n    delete _heldFeesOf[_projectId];\\n\\n    // Process each fee.\\n    for (uint256 _i = 0; _i < _heldFees.length; _i++) {\\n      if (_amount == 0) {\\n        _heldFeesOf[_projectId].push(_heldFees[_i]);\\n      } else if (_amount >= _heldFees[_i].amount) {\\n        _amount = _amount - _heldFees[_i].amount;\\n      } else {\\n        _heldFeesOf[_projectId].push(\\n          JBFee(_heldFees[_i].amount - _amount, _heldFees[_i].fee, _heldFees[_i].beneficiary)\\n        );\\n        _amount = 0;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x294540f7680db1ff9cd9b6482aefd783c8c9d6c568ade343cc464c990a166c56\",\"license\":\"MIT\"},\"contracts/JBETHPaymentTerminalStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './interfaces/IJBPrices.sol';\\nimport './interfaces/IJBTokenStore.sol';\\nimport './interfaces/IJBPaymentTerminal.sol';\\n\\nimport './libraries/JBConstants.sol';\\nimport './libraries/JBCurrencies.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror CURRENCY_MISMATCH();\\nerror DISTRIBUTION_AMOUNT_LIMIT_REACHED();\\nerror FUNDING_CYCLE_PAYMENT_PAUSED();\\nerror FUNDING_CYCLE_DISTRIBUTION_PAUSED();\\nerror FUNDING_CYCLE_REDEEM_PAUSED();\\nerror INADEQUATE_RECLAIM_AMOUNT();\\nerror INADEQUATE_CONTROLLER_ALLOWANCE();\\nerror INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\nerror INADEQUATE_TOKEN_COUNT();\\nerror INADEQUATE_DISTRIBUTION_AMOUNT();\\nerror INSUFFICIENT_TOKENS();\\nerror INVALID_FUNDING_CYCLE();\\nerror PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\\nerror PAYMENT_TERMINAL_UNAUTHORIZED();\\nerror STORE_ALREADY_CLAIMED();\\n\\n/**\\n  @notice\\n  This contract manages all bookkeeping for inflows and outflows of funds for a terminal.\\n\\n  @dev\\n  Aside from the public view methods, the external methods should be called by the associated terminal.\\n*/\\ncontract JBETHPaymentTerminalStore {\\n  // A library that parses the packed funding cycle metadata into a friendlier format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  // A modifier only allowing the associated payment terminal to access the function.\\n  modifier onlyAssociatedPaymentTerminal() {\\n    if (msg.sender != address(terminal)) {\\n      revert PAYMENT_TERMINAL_UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  event DelegateDidPay(IJBPayDelegate indexed delegate, JBDidPayData data);\\n\\n  event DelegateDidRedeem(IJBRedemptionDelegate indexed delegate, JBDidRedeemData data);\\n\\n  /**\\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable projects;\\n\\n  /**\\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable directory;\\n\\n  /**\\n    @notice\\n    The contract storing all funding cycle configurations.\\n  */\\n  IJBFundingCycleStore public immutable fundingCycleStore;\\n\\n  /**\\n    @notice\\n    The contract that manages token minting and burning.\\n  */\\n  IJBTokenStore public immutable tokenStore;\\n\\n  /**\\n    @notice\\n    The contract that exposes price feeds.\\n  */\\n  IJBPrices public immutable prices;\\n\\n  /**\\n    @notice\\n    The associated payment terminal for which this contract stores data.\\n  */\\n  IJBPaymentTerminal public terminal;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The amount of ETH that each project has.\\n\\n    _projectId The ID of the project to get the balance of.\\n  */\\n  mapping(uint256 => uint256) public balanceOf;\\n\\n  /**\\n    @notice\\n    The amount of overflow (in the terminal's currency) that a project has used from its allowance during the current funding cycle configuration.\\n\\n    @dev\\n    Increases as projects use their allowance.\\n\\n    _projectId The ID of the project to get the used overflow allowance of.\\n    _configuration The configuration of the during which the allowance applies.\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) public usedOverflowAllowanceOf;\\n\\n  /**\\n    @notice\\n    The amount (in the terminal's currency) that a project has distributed from its limit during the current funding cycle.\\n\\n    @dev\\n    Increases as projects use their distribution limit.\\n\\n    _projectId The ID of the project to get the used distribution limit of.\\n    _number The number representing the funding cycle.\\n  */\\n  mapping(uint256 => mapping(uint256 => uint256)) public usedDistributionLimitOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount (in the terminal's currency) in this terminal for a specified project.\\n\\n    @param _projectId The ID of the project to get overflow for.\\n\\n    @return The current amount of overflow that project has in this terminal.\\n  */\\n  function currentOverflowOf(uint256 _projectId) external view returns (uint256) {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    return _overflowDuring(_projectId, _fundingCycle);\\n  }\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount (in the terminal's currency) for a specified project across all terminals.\\n\\n    @param _projectId The ID of the project to get total overflow for.\\n\\n    @return The current total amount of overflow that project has across all terminals.\\n  */\\n  function currentTotalOverflowOf(uint256 _projectId) external view returns (uint256) {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    return _totalOverflowDuring(_projectId, _fundingCycle);\\n  }\\n\\n  /**\\n    @notice\\n    The amount of overflowed ETH that can be claimed by the specified number of tokens.\\n\\n    @dev If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\\n\\n    @param _projectId The ID of the project to get a claimable amount for.\\n    @param _tokenCount The number of tokens to make the calculation with.\\n\\n    @return The amount of overflowed ETH that can be claimed.\\n  */\\n  function claimableOverflowOf(uint256 _projectId, uint256 _tokenCount)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _claimableOverflowOf(_projectId, fundingCycleStore.currentOf(_projectId), _tokenCount);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _prices A contract that exposes price feeds.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\\n    @param _tokenStore A contract that manages token minting and burning.\\n  */\\n  constructor(\\n    IJBPrices _prices,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBFundingCycleStore _fundingCycleStore,\\n    IJBTokenStore _tokenStore\\n  ) {\\n    prices = _prices;\\n    projects = _projects;\\n    directory = _directory;\\n    fundingCycleStore = _fundingCycleStore;\\n    tokenStore = _tokenStore;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Records newly contributed ETH to a project.\\n\\n    @dev\\n    Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.\\n\\n    @dev\\n    Only the associated payment terminal can record a payment.\\n\\n    @param _payer The original address that sent the payment to the terminal.\\n    @param _amount The amount that is being paid in wei.\\n    @param _projectId The ID of the project being paid.\\n    @param _preferClaimedTokensAndBeneficiary Two properties are included in this packed uint256:\\n      The first bit contains the flag indicating whether the request prefers to issue tokens claimed as ERC-20s.\\n      The remaining bits contains the address that should receive benefits from the payment.\\n\\n      This design is necessary two prevent a \\\"Stack too deep\\\" compiler error that comes up if the variables are declared seperately.\\n    @param _minReturnedTokens The minimum number of tokens expected to be minted in return.\\n    @param _memo A memo that will be included in the published event.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is used.\\n\\n    @return fundingCycle The project's funding cycle during which payment was made.\\n    @return weight The weight according to which new token supply was minted.\\n    @return tokenCount The number of tokens that were minted.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordPaymentFrom(\\n    address _payer,\\n    uint256 _amount,\\n    uint256 _projectId,\\n    uint256 _preferClaimedTokensAndBeneficiary,\\n    uint256 _minReturnedTokens,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 weight,\\n      uint256 tokenCount,\\n      string memory memo\\n    )\\n  {\\n    // Get a reference to the current funding cycle for the project.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The project must have a funding cycle configured.\\n    if (fundingCycle.number == 0) {\\n      revert INVALID_FUNDING_CYCLE();\\n    }\\n\\n    // Must not be paused.\\n    if (fundingCycle.payPaused()) {\\n      revert FUNDING_CYCLE_PAYMENT_PAUSED();\\n    }\\n\\n    // Save a reference to the delegate to use.\\n    IJBPayDelegate _delegate;\\n\\n    // If the funding cycle has configured a data source, use it to derive a weight and memo.\\n    if (fundingCycle.useDataSourceForPay()) {\\n      (weight, memo, _delegate, _delegateMetadata) = fundingCycle.dataSource().payParams(\\n        JBPayParamsData(\\n          _payer,\\n          _amount,\\n          _projectId,\\n          fundingCycle.weight,\\n          fundingCycle.reservedRate(),\\n          address(uint160(_preferClaimedTokensAndBeneficiary >> 1)),\\n          _memo,\\n          _delegateMetadata\\n        )\\n      );\\n      // Otherwise use the funding cycle's weight\\n    } else {\\n      weight = fundingCycle.weight;\\n      memo = _memo;\\n    }\\n\\n    // Multiply the amount by the weight to determine the amount of tokens to mint.\\n    uint256 _weightedAmount = PRBMathUD60x18.mul(_amount, weight);\\n\\n    // Add the amount to the ETH balance of the project if needed.\\n    if (_amount > 0) balanceOf[_projectId] = balanceOf[_projectId] + _amount;\\n\\n    if (_weightedAmount > 0)\\n      tokenCount = directory.controllerOf(_projectId).mintTokensOf(\\n        _projectId,\\n        _weightedAmount,\\n        address(uint160(_preferClaimedTokensAndBeneficiary >> 1)),\\n        '',\\n        (_preferClaimedTokensAndBeneficiary & 1) == 1,\\n        fundingCycle.reservedRate()\\n      );\\n\\n    // The token count for the beneficiary must be greater than or equal to the minimum expected.\\n    if (tokenCount < _minReturnedTokens) {\\n      revert INADEQUATE_TOKEN_COUNT();\\n    }\\n\\n    // If a delegate was returned by the data source, issue a callback to it.\\n    if (_delegate != IJBPayDelegate(address(0))) {\\n      JBDidPayData memory _data = JBDidPayData(\\n        _payer,\\n        _projectId,\\n        _amount,\\n        weight,\\n        tokenCount,\\n        payable(address(uint160(_preferClaimedTokensAndBeneficiary >> 1))),\\n        memo,\\n        _delegateMetadata\\n      );\\n      _delegate.didPay(_data);\\n      emit DelegateDidPay(_delegate, _data);\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Records newly distributed funds for a project.\\n\\n    @dev\\n    Only the associated payment terminal can record a distribution.\\n\\n    @param _projectId The ID of the project that is having funds distributed.\\n    @param _amount The amount being distributed as a fixed point number.\\n    @param _currency The expected currency of the `_amount` being tapped. This must match the project's current funding cycle's currency.\\n    @param _minReturnedWei The minimum number of wei that should be distributed.\\n\\n    @return fundingCycle The funding cycle during which the withdrawal was made.\\n    @return distributedAmount The amount distribution in wei.\\n  */\\n  function recordDistributionFor(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The funding cycle must not be configured to have distributions paused.\\n    if (fundingCycle.distributionsPaused()) {\\n      revert FUNDING_CYCLE_DISTRIBUTION_PAUSED();\\n    }\\n\\n    // Make sure the currencies match.\\n    if (\\n      _currency !=\\n      directory.controllerOf(_projectId).distributionLimitCurrencyOf(\\n        _projectId,\\n        fundingCycle.configuration,\\n        terminal\\n      )\\n    ) {\\n      revert CURRENCY_MISMATCH();\\n    }\\n\\n    // The new total amount that has been distributed during this funding cycle.\\n    uint256 _newUsedDistributionLimitOf = usedDistributionLimitOf[_projectId][fundingCycle.number] +\\n      _amount;\\n\\n    // Amount must be within what is still distributable.\\n    if (\\n      _newUsedDistributionLimitOf >\\n      directory.controllerOf(_projectId).distributionLimitOf(\\n        _projectId,\\n        fundingCycle.configuration,\\n        terminal\\n      )\\n    ) {\\n      revert DISTRIBUTION_AMOUNT_LIMIT_REACHED();\\n    }\\n\\n    // Convert the amount to wei.\\n    distributedAmount = (_currency == JBCurrencies.ETH)\\n      ? _amount\\n      : PRBMathUD60x18.div(_amount, prices.priceFor(_currency, JBCurrencies.ETH));\\n\\n    // The amount being distributed must be available.\\n    if (distributedAmount > balanceOf[_projectId]) {\\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n    }\\n\\n    // The amount being distributed must be at least as much as was expected.\\n    if (_minReturnedWei > distributedAmount) {\\n      revert INADEQUATE_DISTRIBUTION_AMOUNT();\\n    }\\n\\n    // Store the new amount.\\n    usedDistributionLimitOf[_projectId][fundingCycle.number] = _newUsedDistributionLimitOf;\\n\\n    // Removed the distributed funds from the project's ETH balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] - distributedAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly used allowance funds of a project.\\n\\n    @dev\\t\\n    Only the associated payment terminal can record a used allowance. \\n\\n    @param _projectId The ID of the project to use the allowance of.\\n    @param _amount The amount of the allowance to use as a fixed point number.\\n    @param _currency The currency of the `_amount` value. Must match the funding cycle's currency.\\n    @param _minReturnedWei The amount of wei that is expected to be withdrawn.\\n\\n    @return fundingCycle The funding cycle during which the withdrawal is being made.\\n    @return withdrawnAmount The amount withdrawn in wei.\\n  */\\n  function recordUsedAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Make sure the currencies match.\\n    if (\\n      _currency !=\\n      directory.controllerOf(_projectId).overflowAllowanceCurrencyOf(\\n        _projectId,\\n        fundingCycle.configuration,\\n        terminal\\n      )\\n    ) {\\n      revert CURRENCY_MISMATCH();\\n    }\\n\\n    // Get a reference to the new used overflow allowance.\\n    uint256 _newUsedOverflowAllowanceOf = usedOverflowAllowanceOf[_projectId][\\n      fundingCycle.configuration\\n    ] + _amount;\\n\\n    // There must be sufficient allowance available.\\n    if (\\n      _newUsedOverflowAllowanceOf >\\n      directory.controllerOf(_projectId).overflowAllowanceOf(\\n        _projectId,\\n        fundingCycle.configuration,\\n        terminal\\n      )\\n    ) {\\n      revert INADEQUATE_CONTROLLER_ALLOWANCE();\\n    }\\n\\n    // Convert the amount to wei.\\n    withdrawnAmount = (_currency == JBCurrencies.ETH)\\n      ? _amount\\n      : PRBMathUD60x18.div(_amount, prices.priceFor(_currency, JBCurrencies.ETH));\\n\\n    // The amount being withdrawn must be available.\\n    if (withdrawnAmount > balanceOf[_projectId]) {\\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n    }\\n\\n    // The amount being withdrawn must be at least as much as was expected.\\n    if (_minReturnedWei > withdrawnAmount) {\\n      revert INADEQUATE_DISTRIBUTION_AMOUNT();\\n    }\\n\\n    // Store the incremented value.\\n    usedOverflowAllowanceOf[_projectId][fundingCycle.configuration] = _newUsedOverflowAllowanceOf;\\n\\n    // Update the project's ETH balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] - withdrawnAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly redeemed tokens of a project.\\n\\n    @dev\\n    Only the associated payment terminal can record a redemption.\\n\\n    @param _holder The account that is having its tokens redeemed.\\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\\n    @param _tokenCount The number of tokens to redeem.\\n    @param _minReturnedWei The minimum amount of wei expected in return.\\n    @param _beneficiary The address that will benefit from the claimed amount.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _delegateMetadata Bytes to send along to the delegate, if one is used.\\n\\n    @return fundingCycle The funding cycle during which the redemption was made.\\n    @return claimAmount The amount of wei claimed.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordRedemptionFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary,\\n    string memory _memo,\\n    bytes memory _delegateMetadata\\n  )\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 claimAmount,\\n      string memory memo\\n    )\\n  {\\n    // The holder must have the specified number of the project's tokens.\\n    if (tokenStore.balanceOf(_holder, _projectId) < _tokenCount) {\\n      revert INSUFFICIENT_TOKENS();\\n    }\\n\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    if (fundingCycle.redeemPaused()) {\\n      revert FUNDING_CYCLE_REDEEM_PAUSED();\\n    }\\n\\n    // Save a reference to the delegate to use.\\n    IJBRedemptionDelegate _delegate;\\n\\n    // If the funding cycle has configured a data source, use it to derive a claim amount and memo.\\n    if (fundingCycle.useDataSourceForRedeem()) {\\n      (claimAmount, memo, _delegate, _delegateMetadata) = fundingCycle.dataSource().redeemParams(\\n        JBRedeemParamsData(\\n          _holder,\\n          _tokenCount,\\n          _projectId,\\n          fundingCycle.redemptionRate(),\\n          fundingCycle.ballotRedemptionRate(),\\n          _beneficiary,\\n          _memo,\\n          _delegateMetadata\\n        )\\n      );\\n    } else {\\n      claimAmount = _claimableOverflowOf(_projectId, fundingCycle, _tokenCount);\\n      memo = _memo;\\n    }\\n\\n    // The amount being claimed must be within the project's balance.\\n    if (claimAmount > balanceOf[_projectId]) {\\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n    }\\n    // The amount being claimed must be at least as much as was expected.\\n    if (claimAmount < _minReturnedWei) {\\n      revert INADEQUATE_RECLAIM_AMOUNT();\\n    }\\n\\n    // Redeem the tokens, which burns them.\\n    if (_tokenCount > 0)\\n      directory.controllerOf(_projectId).burnTokensOf(_holder, _projectId, _tokenCount, '', false);\\n\\n    // Remove the redeemed funds from the project's balance.\\n    if (claimAmount > 0) balanceOf[_projectId] = balanceOf[_projectId] - claimAmount;\\n\\n    // If a delegate was returned by the data source, issue a callback to it.\\n    if (_delegate != IJBRedemptionDelegate(address(0))) {\\n      JBDidRedeemData memory _data = JBDidRedeemData(\\n        _holder,\\n        _projectId,\\n        _tokenCount,\\n        claimAmount,\\n        _beneficiary,\\n        memo,\\n        _delegateMetadata\\n      );\\n      _delegate.didRedeem(_data);\\n      emit DelegateDidRedeem(_delegate, _data);\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Records newly added funds for the project.\\n\\n    @dev\\n    Only the associated payment terminal can record an added balance.\\n\\n    @param _projectId The ID of the project to which the funds being added belong.\\n    @param _amount The amount added, in wei.\\n\\n    @return fundingCycle The current funding cycle for the project.\\n  */\\n  function recordAddedBalanceFor(uint256 _projectId, uint256 _amount)\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Increment the balance.\\n    balanceOf[_projectId] = balanceOf[_projectId] + _amount;\\n  }\\n\\n  /**\\n    @notice\\n    Records the migration of this terminal to another.\\n\\n    @param _projectId The ID of the project being migrated.\\n\\n    @return balance The project's current balance.\\n  */\\n  function recordMigration(uint256 _projectId)\\n    external\\n    onlyAssociatedPaymentTerminal\\n    returns (uint256 balance)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Migration must be allowed\\n    if (!_fundingCycle.terminalMigrationAllowed()) {\\n      revert PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\\n    }\\n\\n    // Return the current balance.\\n    balance = balanceOf[_projectId];\\n\\n    // Set the balance to 0.\\n    balanceOf[_projectId] = 0;\\n  }\\n\\n  /**\\n    @notice\\n    Allows this store to be claimed by an address so that it recognized the address as its terminal.\\n  */\\n  function claimFor(IJBPaymentTerminal _terminal) external {\\n    // This store can only be claimed once.\\n    if (terminal != IJBPaymentTerminal(address(0))) {\\n      revert STORE_ALREADY_CLAIMED();\\n    }\\n    // Set the terminal.\\n    terminal = _terminal;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    See docs for `claimableOverflowOf`\\n  */\\n  function _claimableOverflowOf(\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _tokenCount\\n  ) private view returns (uint256) {\\n    // Get the amount of current overflow.\\n    // Use the local overflow if the funding cycle specifies that it should be used. Otherwise use the project's total overflow across all of its terminals.\\n    uint256 _currentOverflow = _fundingCycle.shouldUseLocalBalanceForRedemptions()\\n      ? _overflowDuring(_projectId, _fundingCycle)\\n      : _totalOverflowDuring(_projectId, _fundingCycle);\\n\\n    // If there is no overflow, nothing is claimable.\\n    if (_currentOverflow == 0) return 0;\\n\\n    // Get the total number of tokens in circulation.\\n    uint256 _totalSupply = tokenStore.totalSupplyOf(_projectId);\\n\\n    // Get the number of reserved tokens the project has.\\n    uint256 _reservedTokenAmount = directory.controllerOf(_projectId).reservedTokenBalanceOf(\\n      _projectId,\\n      _fundingCycle.reservedRate()\\n    );\\n\\n    // If there are reserved tokens, add them to the total supply.\\n    if (_reservedTokenAmount > 0) _totalSupply = _totalSupply + _reservedTokenAmount;\\n\\n    // If the amount being redeemed is the total supply, return the rest of the overflow.\\n    if (_tokenCount == _totalSupply) return _currentOverflow;\\n\\n    // Use the ballot redemption rate if the queued cycle is pending approval according to the previous funding cycle's ballot.\\n    uint256 _redemptionRate = fundingCycleStore.currentBallotStateOf(_projectId) ==\\n      JBBallotState.Active\\n      ? _fundingCycle.ballotRedemptionRate()\\n      : _fundingCycle.redemptionRate();\\n\\n    // If the redemption rate is 0, nothing is claimable.\\n    if (_redemptionRate == 0) return 0;\\n\\n    // Get a reference to the linear proportion.\\n    uint256 _base = PRBMath.mulDiv(_currentOverflow, _tokenCount, _totalSupply);\\n\\n    // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.\\n    if (_redemptionRate == JBConstants.MAX_REDEMPTION_RATE) return _base;\\n    return\\n      PRBMath.mulDiv(\\n        _base,\\n        _redemptionRate +\\n          PRBMath.mulDiv(\\n            _tokenCount,\\n            JBConstants.MAX_REDEMPTION_RATE - _redemptionRate,\\n            _totalSupply\\n          ),\\n        JBConstants.MAX_REDEMPTION_RATE\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of ETH changes in relation to the currency being used to measure the distribution limit.\\n\\n    @param _projectId The ID of the project to get overflow for.\\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\\n\\n    @return overflow The overflow of funds.\\n  */\\n  function _overflowDuring(uint256 _projectId, JBFundingCycle memory _fundingCycle)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    // Get the current balance of the project.\\n    uint256 _balanceOf = balanceOf[_projectId];\\n\\n    // If there's no balance, there's no overflow.\\n    if (_balanceOf == 0) return 0;\\n\\n    // Get a reference to the amount still withdrawable during the funding cycle.\\n    uint256 _distributionRemaining = directory.controllerOf(_projectId).distributionLimitOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      terminal\\n    ) - usedDistributionLimitOf[_projectId][_fundingCycle.number];\\n\\n    // Get a reference to the current funding cycle's currency for this terminal.\\n    uint256 _currency = directory.controllerOf(_projectId).distributionLimitCurrencyOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      terminal\\n    );\\n\\n    // Convert the _distributionRemaining to ETH.\\n    uint256 _ethDistributionRemaining = _distributionRemaining == 0\\n      ? 0\\n      : (_currency == JBCurrencies.ETH)\\n      ? _distributionRemaining\\n      : PRBMathUD60x18.div(_distributionRemaining, prices.priceFor(_currency, JBCurrencies.ETH));\\n\\n    // Overflow is the balance of this project minus the amount that can still be distributed.\\n    return _balanceOf <= _ethDistributionRemaining ? 0 : _balanceOf - _ethDistributionRemaining;\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing across all terminals when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of ETH changes in relation to the currency being used to measure the distribution limits.\\n\\n    @param _projectId The ID of the project to get total overflow for.\\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\\n\\n    @return overflow The overflow of funds.\\n  */\\n  function _totalOverflowDuring(uint256 _projectId, JBFundingCycle memory _fundingCycle)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    // Get a reference to the project's terminals.\\n    IJBPaymentTerminal[] memory _terminals = directory.terminalsOf(_projectId);\\n\\n    // Keep a reference to the current eth balance of the project across all terminals, and the current eth distribution limit across all terminals.\\n    uint256 _ethBalanceOf;\\n    uint256 _ethDistributionLimitRemaining;\\n\\n    for (uint256 _i = 0; _i < _terminals.length; _i++) {\\n      _ethBalanceOf = _ethBalanceOf + _terminals[_i].ethBalanceOf(_projectId);\\n\\n      // Get a reference to the amount still withdrawable during the funding cycle.\\n      uint256 _distributionRemaining = _terminals[_i].remainingDistributionLimitOf(\\n        _projectId,\\n        _fundingCycle.configuration,\\n        _fundingCycle.number\\n      );\\n\\n      // Get a reference to the current funding cycle's currency for this terminal.\\n      uint256 _currency = directory.controllerOf(_projectId).distributionLimitCurrencyOf(\\n        _projectId,\\n        _fundingCycle.configuration,\\n        _terminals[_i]\\n      );\\n\\n      // Convert the _distributionRemaining to ETH.\\n      _ethDistributionLimitRemaining =\\n        _ethDistributionLimitRemaining +\\n        (\\n          _distributionRemaining == 0 ? 0 : (_currency == JBCurrencies.ETH)\\n            ? _distributionRemaining\\n            : PRBMathUD60x18.div(\\n              _distributionRemaining,\\n              prices.priceFor(_currency, JBCurrencies.ETH)\\n            )\\n        );\\n    }\\n\\n    // Overflow is the balance of this project minus the amount that can still be distributed.\\n    return\\n      _ethBalanceOf <= _ethDistributionLimitRemaining\\n        ? 0\\n        : _ethBalanceOf - _ethDistributionLimitRemaining;\\n  }\\n}\\n\",\"keccak256\":\"0x50bb0ecbb2b7518f5e3cdcf72543eb3fbcce2013ab54115b928f7c2035f7c226\",\"license\":\"MIT\"},\"contracts/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n// --------------------------- custom errors -------------------------- //\\n//*********************************************************************//\\nerror UNAUTHORIZED();\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) {\\n      revert UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) {\\n      revert UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x54dabe4efc06083ac139b6fb0f2c48157611f2186dd5959867aa2161a413407a\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed\\n}\\n\",\"keccak256\":\"0xda8544e199de385d447fc485037d66ba906a88985328a5e1e0ddcb178b44f382\",\"license\":\"MIT\"},\"contracts/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function overflowAllowanceCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9cde0919d7d96124cf75e36e2bc97c0b5fb8a418a6dd14fe45e574bada5d1ec3\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event AddToSetControllerAllowlist(address indexed _address, address caller);\\n\\n  event RemoveFromSetControllerAllowlist(address indexed _address, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function isAllowedToSetController(address _address) external view returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function addToSetControllerAllowlist(address _address) external;\\n\\n  function removeFromSetControllerAllowlist(address _address) external;\\n}\\n\",\"keccak256\":\"0xcb8d82ed4c1b3a7800e0075d304a389e6810e2ba5df39e65870d7b65f9d900e5\",\"license\":\"MIT\"},\"contracts/interfaces/IJBETHPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitsStore.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBPayDelegate.sol';\\nimport './IJBTokenStore.sol';\\nimport './IJBPrices.sol';\\nimport './IJBRedemptionDelegate.sol';\\nimport './IJBFeeGauge.sol';\\n\\nimport './../structs/JBFee.sol';\\n\\ninterface IJBETHPaymentTerminal {\\n  event AddToBalance(uint256 indexed projectId, uint256 amount, string memo, address caller);\\n  event Migrate(uint256 indexed projectId, IJBPaymentTerminal indexed to, uint256 amount, address caller);\\n  event DistributePayouts(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 amount,\\n    uint256 distributedAmount,\\n    uint256 feeAmount,\\n    uint256 beneficiaryDistributionAmount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event UseAllowance(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 amount,\\n    uint256 feeAmount,\\n    uint256 transferAmount,\\n    address caller\\n  );\\n  event ProcessFees(uint256 indexed projectId, JBFee[] fees, address caller);\\n  event Pay(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 amount,\\n    uint256 weight,\\n    uint256 tokenCount,\\n    string memo,\\n    address caller\\n  );\\n  event RedeemTokens(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address holder,\\n    address beneficiary,\\n    uint256 tokenCount,\\n    uint256 claimedAmount,\\n    string memo,\\n    address caller\\n  );\\n  event DistributeToPayoutSplit(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBSplit split,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event SetFee(uint256 fee, address caller);\\n\\n  event SetFeeGauge(IJBFeeGauge feeGauge, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function splitsStore() external view returns (IJBSplitsStore);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function heldFeesOf(uint256 _projectId) external view returns (JBFee[] memory);\\n\\n  function fee() external view returns (uint256);\\n\\n  function feeGauge() external view returns (IJBFeeGauge);\\n\\n  function distributePayoutsOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei,\\n    string memory _memo\\n  ) external;\\n\\n  function redeemTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _count,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external returns (uint256 claimedAmount);\\n\\n  function useAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary\\n  ) external;\\n\\n  function migrate(uint256 _projectId, IJBPaymentTerminal _to) external;\\n}\\n\",\"keccak256\":\"0xf4fcef9bda54155b31133db041e501df5275d16ec8704024d16c0cd857b0238a\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFeeGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBFeeGauge {\\n  function currentDiscountFor(uint256 _projectId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31d5a745fa68db11c5b9c43f251503d226e5df4c0fc62b146bd41d0e32a62c4b\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x7649782cc0f754b369bace5ac88e863027fa35d5912eef32ab0e8aef123adccb\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n}\\n\",\"keccak256\":\"0xe689c3a2c9e75d368de61b3344df96015bb4421b264d98056d8aa351e8faf739\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xf8212a9e70b63c818f53aec3ed8728a2679d7b984d93b67a7d7e2890b6da8260\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xec7fcab267fc1227d983c9420373beece78a2a4243c44bfab01d12262818ab8e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, AggregatorV3Interface feed);\\n\\n  function TARGET_DECIMALS() external returns (uint256);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external returns (AggregatorV3Interface);\\n\\n  function priceFor(uint256 _currency, uint256 _base) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    AggregatorV3Interface _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2309ad881e3851c6d002dfa283e562f51327ef28243ef9bf09365df3d98eda39\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 id);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x11b7a85bd31d24e7cd08fe864ccd3ec5789e5d264e445d30a3b88de0979dfdab\",\"license\":\"MIT\"},\"contracts/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xbfeeb100e450c3cf5565a53a34a693f4963f09136bfea7e050efc3f8e1dea095\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '../structs/JBSplit.sol';\\n\\ninterface IJBSplitAllocator {\\n  function allocate(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    uint256 _group,\\n    JBSplit calldata _split\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xb203a9130c48dfeed047f4cdca7e250479295fb0c65041869b3c2e4303525669\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBPaymentTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function remainingDistributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _fundingCycleConfiguration,\\n    uint256 _fundingCycleNumber\\n  ) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable;\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0xd8482a6347d06d13106c2f8252e1b6f9646a438af3c946b8075e4a2bb4fca32c\",\"license\":\"MIT\"},\"contracts/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(uint256 _projectId, address _account) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xbe143668f21d389bb89e1a3a4d50a5fd21fac9c13f53b92fe96d672c4aa4d8cd\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 unclaimedTokenBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    address indexed owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external;\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7beba1de2a273359c50194b00ffc083b010e80e3478bfa265a6a2403b766957f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475\",\"license\":\"MIT\"},\"contracts/libraries/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n  @notice\\n  Global constants used across multiple Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  /** \\n    @notice\\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\\n  */\\n  uint256 public constant MAX_RESERVED_RATE = 10000;\\n\\n  /**\\n    @notice\\n    Maximum token redemption rate.  \\n    */\\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\\n\\n  /** \\n    @notice\\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\\n  */\\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum splits percentage.\\n  */\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum discount on fee granted by a gauge.\\n  */\\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\\n}\\n\",\"keccak256\":\"0x9a12e8bb803d650356783fd995db0dbbd09dedd3f93195bf689c902c102f59a9\",\"license\":\"MIT\"},\"contracts/libraries/JBCurrencies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBCurrencies {\\n  uint256 public constant ETH = 1;\\n  uint256 public constant USD = 2;\\n}\\n\",\"keccak256\":\"0x3077e365b09d45e3a82d6710bfda7323a0366c3cafc318ea9dc442a1a93036d7\",\"license\":\"MIT\"},\"contracts/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBConstants.sol';\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 40));\\n  }\\n\\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 56) & 1) == 1;\\n  }\\n\\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 57) & 1) == 1;\\n  }\\n\\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 58) & 1) == 1;\\n  }\\n\\n  function mintPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 59) & 1) == 1;\\n  }\\n\\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 60) & 1) == 1;\\n  }\\n\\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 61) & 1) == 1;\\n  }\\n\\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 62) & 1) == 1;\\n  }\\n\\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 63) & 1) == 1;\\n  }\\n\\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 64) & 1) == 1;\\n  }\\n\\n  function shouldUseLocalBalanceForRedemptions(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 65) & 1) == 1;\\n  }\\n\\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 66) & 1 == 1;\\n  }\\n\\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (_fundingCycle.metadata >> 67) & 1 == 1;\\n  }\\n\\n  function dataSource(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (IJBFundingCycleDataSource)\\n  {\\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 68)));\\n  }\\n\\n  /**\\n    @notice\\n    Pack the funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\\n  */\\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // version 1 in the bits 0-7 (8 bits).\\n    packed = 1;\\n    // reserved rate in bits 8-23 (16 bits).\\n    packed |= _metadata.reservedRate << 8;\\n    // redemption rate in bits 24-39 (16 bits).\\n    // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) << 24;\\n    // ballot redemption rate rate in bits 40-55 (16 bits).\\n    // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.ballotRedemptionRate) << 40;\\n    // pause pay in bit 56.\\n    if (_metadata.pausePay) packed |= 1 << 56;\\n    // pause tap in bit 57.\\n    if (_metadata.pauseDistributions) packed |= 1 << 57;\\n    // pause redeem in bit 58.\\n    if (_metadata.pauseRedeem) packed |= 1 << 58;\\n    // pause mint in bit 59.\\n    if (_metadata.pauseMint) packed |= 1 << 59;\\n    // pause mint in bit 60.\\n    if (_metadata.pauseBurn) packed |= 1 << 60;\\n    // pause change token in bit 61.\\n    if (_metadata.allowChangeToken) packed |= 1 << 61;\\n    // allow terminal migration in bit 62.\\n    if (_metadata.allowTerminalMigration) packed |= 1 << 62;\\n    // allow controller migration in bit 63.\\n    if (_metadata.allowControllerMigration) packed |= 1 << 63;\\n    // hold fees in bit 64.\\n    if (_metadata.holdFees) packed |= 1 << 64;\\n    // useTotalOverflowForRedemptions in bit 65.\\n    if (_metadata.useTotalOverflowForRedemptions) packed |= 1 << 65;\\n    // use pay data source in bit 66.\\n    if (_metadata.useDataSourceForPay) packed |= 1 << 66;\\n    // use redeem data source in bit 67.\\n    if (_metadata.useDataSourceForRedeem) packed |= 1 << 67;\\n    // data source address in bits 68-227.\\n    packed |= uint256(uint160(address(_metadata.dataSource))) << 68;\\n  }\\n}\\n\",\"keccak256\":\"0x454ada2c970e4270ef05ac18d06d751eef8cc6d65432b932683a50c708f26eba\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_HANDLE = 6;\\n  uint256 public constant SET_METADATA = 7;\\n  uint256 public constant ISSUE = 8;\\n  uint256 public constant CHANGE_TOKEN = 9;\\n  uint256 public constant MINT = 10;\\n  uint256 public constant BURN = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant REQUIRE_CLAIM = 13;\\n  uint256 public constant SET_CONTROLLER = 14;\\n  uint256 public constant ADD_TERMINALS = 15;\\n  uint256 public constant REMOVE_TERMINAL = 16;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 17;\\n  uint256 public constant USE_ALLOWANCE = 18;\\n  uint256 public constant SET_SPLITS = 19;\\n}\\n\",\"keccak256\":\"0x1c56caf6c44994cc44a3e16de9781e880079e8543d8ce541a405178b3407838f\",\"license\":\"MIT\"},\"contracts/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/libraries/JBTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBTokens {\\n  /** \\n    @notice \\n    The ETH token address in Juicebox is represented by 0x000000000000000000000000000000000000eeee.\\n\\n    @dev\\n    This address is guaranteed to never conflict with other tokens per the following:\\n    https://github.com/ethereum/EIPs/pull/1352/files#diff-02f3b07abd45fe04d908b93f8b7aa6d7\\n  */\\n  address public constant ETH = address(0xeeee);\\n}\\n\",\"keccak256\":\"0xb400f4353e1c566b16b36f8219d6ec0e22314ebb3023c116c53bef757f51f953\",\"license\":\"MIT\"},\"contracts/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of ETH that was paid.\\n  uint256 amount;\\n  // The weight that was used for minting tokens.\\n  uint256 weight;\\n  // The number of tokens minted.\\n  uint256 tokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0x3fabe50ca2d00e24420061165124d1f43d8489605d84d0ab0a942a7ba8b02101\",\"license\":\"MIT\"},\"contracts/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The amount of ETH being claimed.\\n  uint256 claimAmount;\\n  // The address to which the ETH will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x9415d894e263a90d824a1cde4a6f17d1a325f5183226e02b2e2318afd6103e27\",\"license\":\"MIT\"},\"contracts/structs/JBFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBFee {\\n  // The total amount the fee was taken from.\\n  uint256 amount;\\n  // The percent of the fee.\\n  uint8 fee;\\n  // The address that will receive the tokens that are minted as a result of the fee payment.\\n  address beneficiary;\\n}\\n\",\"keccak256\":\"0x2b3a27477ab3af9976a2fb5f39ca6c7b8816277733a191fdbb9ac0a6de59ba53\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // An unsigned 60.18-decimal fixed-point number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x8ff64289216ea89220cc828df7d0ca1a363286c71a158faddd1b3161958b190e\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0xc68e73a33a605bab8bd4fa260833e7ba3b539f90e96f43b4851a33e53811eb2d\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the distribute functionality should be paused during the funding cycle.\\n  bool pauseDistributions;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the mint functionality should be paused during the funding cycle.\\n  bool pauseMint;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If changing tokens should be allowed during this funding cycle.\\n  bool allowChangeToken;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If redemptions should use the project's local terminal balance instead of the project's balance held in all terminals.\\n  bool useTotalOverflowForRedemptions;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0x63043118e450fc2ef17ca0f772afcf3016104ade23fa84fff788a74821a72186\",\"license\":\"MIT\"},\"contracts/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x25a5007c18c3c057615869124af6b0e9cdfbd64fd8d2d7a17f428d6eea5a4835\",\"license\":\"MIT\"},\"contracts/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBPayParamsData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ETH amount of the payment.\\n  uint256 amount;\\n  // The ID of the project being paid.\\n  uint256 projectId;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The proposed beneficiary of the tokens that will be minted as a result of the tokens.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the payment.\\n  string memo;\\n  // The proposed metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0x89a9ac69ef88eff66233299390b70a6146d787db3b69c7d5eae1bd65fba0464a\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBProjectMetadata {\\n  // Metadata content.\\n  string content;\\n  // The domain within which the metadata applies.\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0xc3b76e617b453c6dc60cc8bd3683ff7726f1a967b28fb8e760b1d16f52c07d17\",\"license\":\"MIT\"},\"contracts/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBRedeemParamsData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The proposed number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The ID of the project whos tokens are being redeemed.\\n  uint256 projectId;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The proposed beneficiary of the ETH being claimed by making the redemption.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // The proposed metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0xe950084e3b31bbd51edf2be5c4a53b69c3b239b4a45863aa819817eb040a8224\",\"license\":\"MIT\"},\"contracts/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and that project has issued its tokens.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered staked or unstaked to the beneficiary.\\n  bool preferClaimed;\\n  // The percent of the whole group that this split occupies. This number is out of 1000000000.\\n  uint256 percent;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the Juicebox treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the unstaked token preference respected.\\n  uint256 projectId;\\n  // The role the  beneficary depends on whether or not projectId is specified, or whether or not allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // Specifies if the split should be unchangeable until the specifies time comes, with the exception of extending the lockedUntil period.\\n  uint256 lockedUntil;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with the projectId, beneficiary, preferClaimed properties.\\n  IJBSplitAllocator allocator;\\n}\\n\",\"keccak256\":\"0xbf9548ed07950457a334c38a74d2bf66fedd248f755634e01ba4b95d8711dcd7\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101406040526deeee00000000000000000000000061012052600a6003553480156200002a57600080fd5b50604051620049aa380380620049aa8339810160408190526200004d916200023a565b606086901b6001600160601b0319166080526200006a3362000115565b600180556001600160601b0319606086811b821660a05285811b821660c05284901b1660e05260405163ddeae03360e01b81523060048201526001600160a01b0383169063ddeae03390602401600060405180830381600087803b158015620000d257600080fd5b505af1158015620000e7573d6000803e3d6000fd5b5050506001600160601b0319606084901b166101005250620001098162000165565b505050505050620002e4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166200022c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001bc565b620002378162000115565b50565b60008060008060008060c087890312156200025457600080fd5b86516200026181620002ce565b60208801519096506200027481620002ce565b60408801519095506200028781620002ce565b60608801519094506200029a81620002ce565b6080880151909350620002ad81620002ce565b60a0880151909250620002c081620002ce565b809150509295509295509295565b6001600160a01b03811681146200023757600080fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6145996200041160003960008181610529015281816109a501528181612da401526134e50152600081816103770152818161045001528181610a4301528181610c3901528181610d48015281816119e901528181611f6a015281816120ce01528181612397015261278b0152600081816101b701526132d301526000818161041f0152818161218c01528181612dcf01526134b8015260008181610318015281816106740152818161108f015281816116f001528181611ab201526124750152600081816103ab015281816107800152818161085c015281816111f2015281816112ce015281816117fc015281816118d801528181611cec0152611dc801526145996000f3fe60806040526004361061018b5760003560e01c8063975057e7116100d6578063c99d3e831161007f578063ddca3f4311610059578063ddca3f43146104e1578063f2fde38b146104f7578063fc0c546a1461051757600080fd5b8063c99d3e8314610474578063d6dacc5314610494578063d930c60c146104c157600080fd5b8063b6cf978e116100b0578063b6cf978e146103ed578063c41c2f241461040d578063c89e43611461044157600080fd5b8063975057e714610365578063ad007d6314610399578063b5a6aed7146103cd57600080fd5b806369fe0e2d116101385780638af56094116101125780638af56094146102d95780638b79543c146103065780638da5cb5b1461033a57600080fd5b806369fe0e2d14610284578063715018a6146102a457806389701db5146102b957600080fd5b8063423734721161016957806342373472146102235780635de6031414610236578063637913ac1461026457600080fd5b806303930453146101905780632bdfe004146101a5578063405b84fa14610203575b600080fd5b6101a361019e366004613c8e565b61054b565b005b3480156101b157600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561020f57600080fd5b506101a361021e366004613d36565b6105ce565b6101a3610231366004613d66565b610bcd565b34801561024257600080fd5b50610256610251366004613c5c565b610d16565b6040519081526020016101fa565b34801561027057600080fd5b506101a361027f36600461392b565b610ddd565b34801561029057600080fd5b506101a361029f366004613c5c565b610edd565b3480156102b057600080fd5b506101a3610fd3565b3480156102c557600080fd5b506101a36102d4366004613c5c565b611060565b3480156102e557600080fd5b506102f96102f4366004613c5c565b6115aa565b6040516101fa91906140eb565b34801561031257600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b34801561034657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101d9565b34801561037157600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a557600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d957600080fd5b506101a36103e8366004613dd9565b61164f565b3480156103f957600080fd5b50610256610408366004613965565b611bf8565b34801561041957600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b34801561044d57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101d9565b34801561048057600080fd5b5061025661048f366004613dad565b612095565b3480156104a057600080fd5b506004546101d99073ffffffffffffffffffffffffffffffffffffffff1681565b3480156104cd57600080fd5b506101a36104dc366004613e26565b6122dc565b3480156104ed57600080fd5b5061025660035481565b34801561050357600080fd5b506101a361051236600461392b565b6125a4565b34801561052357600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b6105c434338a8a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b90819084018382808284376000920191909152506126d492505050565b5050505050505050565b60026001541415610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190613948565b8260043373ffffffffffffffffffffffffffffffffffffffff8416148015906107fc57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190613b32565b155b80156108d857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561089e57600080fd5b505afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d69190613b32565b155b1561090f576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561095557600080fd5b505afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d9190613948565b73ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610a11576040517f581010ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6bb6a5ad000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636bb6a5ad90602401602060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190613c75565b90508015610b6f57604080517f423734720000000000000000000000000000000000000000000000000000000081526004810188905260248101919091526000604482015273ffffffffffffffffffffffffffffffffffffffff86169063423734729083906064016000604051808303818588803b158015610b5557600080fd5b505af1158015610b69573d6000803e3d6000fd5b50505050505b6040805182815233602082015273ffffffffffffffffffffffffffffffffffffffff87169188917fa7519e5f94697b7f53e97c5eb46a0c730a296ab686ab8fd333835c5f735784eb910160405180910390a350506001805550505050565b34610c04576040517f839a437b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fe7c8e3e3000000000000000000000000000000000000000000000000000000008152600481018390523460248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e7c8e3e39060440161012060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190613b4f565b50610cd682346128f8565b817f4ce42b42caaa564737146f357a8fa7fe24940fac843d392a69e23b32a1d766a3348333604051610d0a9392919061421e565b60405180910390a25050565b6040517f9cc7f708000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690639cc7f7089060240160206040518083038186803b158015610d9f57600080fd5b505afa158015610db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd79190613c75565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604080519182523360208301527f0a9a80fe9716605b3e52abb3d792d6a4e7816d6afc02a5a4ef023081feaf9f6091015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b600a811115610f99576040517f45fbd9c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003819055604080518281523360208201527fd7414e590e1cb532989ab2a34c8f4c2c17f7ab6f006efeeaef2e87cd5008c2029101610ed2565b60005473ffffffffffffffffffffffffffffffffffffffff163314611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b61105e6000612be6565b565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156110e657600080fd5b505afa1580156110fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111e9190613948565b81600561114060005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015801561119257503373ffffffffffffffffffffffffffffffffffffffff851614155b801561126e57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561123457600080fd5b505afa158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c9190613b32565b155b801561134a57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190613b32565b155b15611381576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260015414156113ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610637565b600260018190556000868152602091825260408082208054825181860281018601909352808352929391929091849084015b8282101561148557600084815260209081902060408051606081018252600286029092018054835260019081015460ff811684860152610100900473ffffffffffffffffffffffffffffffffffffffff16918301919091529083529092019101611420565b50505050905060005b815181101561154c5761153a6114ef8383815181106114af576114af6144d5565b60200260200101516000015160c88585815181106114cf576114cf6144d5565b60200260200101516020015160c86114e791906143d6565b60ff16612c5b565b838381518110611501576115016144d5565b60200260200101516000015161151791906143fb565b838381518110611529576115296144d5565b602002602001015160400151612d60565b806115448161443e565b91505061148e565b50600086815260026020526040812061156491613750565b857f7a6ebe79493892d575cf9b125f19a323884c853d586d17f79635ae352833465582336040516115969291906140fe565b60405180910390a250506001805550505050565b606060026000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561164457600084815260209081902060408051606081018252600286029092018054835260019081015460ff811684860152610100900473ffffffffffffffffffffffffffffffffffffffff169183019190915290835290920191016115df565b505050509050919050565b600260015414156116bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610637565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561174757600080fd5b505afa15801561175b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177f9190613948565b8560123373ffffffffffffffffffffffffffffffffffffffff84161480159061187857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561183e57600080fd5b505afa158015611852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118769190613b32565b155b801561195457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561191a57600080fd5b505afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190613b32565b155b1561198b576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f1837d6e300000000000000000000000000000000000000000000000000000000815260048101899052602481018890526044810187905260648101869052600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631837d6e39060840161014060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a669190613b6c565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018d9052919350915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c9190613948565b9050600060035460001480611b4157508b6001145b611b5657611b518c858585612f34565b611b59565b60005b9050611b6e88611b6983866143fb565b613131565b835160208501518d91907f4d0b119651438cfed12585fc57e8ec9d9cc98bb1e5da27bdc4b7419d084500c28b8786611ba681836143fb565b6040805173ffffffffffffffffffffffffffffffffffffffff9095168552602085019390935291830152606082015233608082015260a00160405180910390a450506001805550505050505050505050565b600060026001541415611c67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610637565b60026001819055889088903373ffffffffffffffffffffffffffffffffffffffff841614801590611d6857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611d2e57600080fd5b505afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190613b32565b155b8015611e4457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611e0a57600080fd5b505afa158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e429190613b32565b155b15611e7b576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8716611ec8576040517ff74a1b6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f2d60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f9225bf1a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690639225bf1a90611fab908f908f908f908f908f908f908f90600401613ff7565b600060405180830381600087803b158015611fc557600080fd5b505af1158015611fd9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261201f9190810190613b9b565b9850955090508415612035576120358886613131565b8a816000015182602001517fd2b8b011245528ed3c6d92b102e0cd9895bb1910613b04dd42d7c9ac3781612d8f8c8f8b8e3360405161207996959493929190613f9d565b60405180910390a4505060018055509098975050505050505050565b6040517fdcc3041b00000000000000000000000000000000000000000000000000000000815260048101849052602481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063dcc3041b9060440160206040518083038186803b15801561212557600080fd5b505afa158015612139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215d9190613c75565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b1580156121e357600080fd5b505afa1580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190613948565b6040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018790526024810186905230604482015273ffffffffffffffffffffffffffffffffffffffff9190911690635578dfd79060640160206040518083038186803b15801561229057600080fd5b505afa1580156122a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190613c75565b6122d291906143fb565b90505b9392505050565b60026001541415612349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610637565b60026001556040517f4d9cd5ac0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018490526064810183905260009081907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634d9cd5ac9060840161014060405180830381600087803b1580156123f157600080fd5b505af1158015612405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124299190613b6c565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018a9052919350915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b1580156124b757600080fd5b505afa1580156124cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ef9190613948565b90506000600354600014806125045750886001145b6125195761251489858585612f34565b61251c565b60005b905060006125348a8661252f85886143fb565b61328b565b90508015612546576125468382613131565b89856000015186602001517f24352f49df447b14e0e08a323625c663d865ce20c343c4638af12e1dc48aa760868d8988888e3360405161258c9796959493929190613f3e565b60405180910390a45050600180555050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b73ffffffffffffffffffffffffffffffffffffffff81166126c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610637565b6126d181612be6565b50565b73ffffffffffffffffffffffffffffffffffffffff8516612721576040517fa762251300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61278660405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329c705c78b8d8c60018d73ffffffffffffffffffffffffffffffffffffffff16901b8b6127ef5760006127f2565b60015b60ff16178c8b8b6040518863ffffffff1660e01b815260040161281b97969594939291906140a4565b600060405180830381600087803b15801561283557600080fd5b505af1158015612849573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261288f9190810190613bf6565b8098508194508295508396505050505088836000015184602001517f48d03a5fc1af697513321cb1c46d64e8bd022e7ac66677b2cd1ea5ac3dddb1238b8f87878c336040516128e396959493929190614062565b60405180910390a45050505050505050505050565b600082815260026020908152604080832080548251818502810185019093528083529192909190849084015b8282101561298957600084815260209081902060408051606081018252600286029092018054835260019081015460ff811684860152610100900473ffffffffffffffffffffffffffffffffffffffff16918301919091529083529092019101612924565b50505060008581526002602052604081209293506129a8929150613750565b60005b8151811015612be05782612a6657600084815260026020526040902082518390839081106129db576129db6144d5565b60209081029190910181015182546001818101855560009485529383902082516002909202019081559181015191909201805460409093015173ffffffffffffffffffffffffffffffffffffffff16610100027fffffffffffffffffffffff00000000000000000000000000000000000000000090931660ff90921691909117919091179055612bce565b818181518110612a7857612a786144d5565b6020026020010151600001518310612aba57818181518110612a9c57612a9c6144d5565b60200260200101516000015183612ab391906143fb565b9250612bce565b60026000858152602001908152602001600020604051806060016040528085858581518110612aeb57612aeb6144d5565b602002602001015160000151612b0191906143fb565b8152602001848481518110612b1857612b186144d5565b60200260200101516020015160ff168152602001848481518110612b3e57612b3e6144d5565b60209081029190910181015160409081015173ffffffffffffffffffffffffffffffffffffffff9081169093528454600181810187556000968752838720865160029093020191825592850151920180549490910151909216610100027fffffffffffffffffffffff00000000000000000000000000000000000000000090931660ff9091161791909117905592505b80612bd88161443e565b9150506129ab565b50505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415612cb457838281612caa57612caa6144a6565b04925050506122d5565b838110612cf7576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610637565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040517f862026500000000000000000000000000000000000000000000000000000000081526001600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063862026509060440160206040518083038186803b158015612e1357600080fd5b505afa158015612e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4b9190613948565b905073ffffffffffffffffffffffffffffffffffffffff81163014612eff5760408051602081018252600080825291517f0393045300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416926303930453928792612ed2926001928992829190600401614136565b6000604051808303818588803b158015612eeb57600080fd5b505af11580156105c4573d6000803e3d6000fd5b612f2f833060018560008060405180602001604052806000815250604051806020016040528060008152506126d4565b505050565b600454600090819073ffffffffffffffffffffffffffffffffffffffff1615612ffc57600480546040517f7769589600000000000000000000000000000000000000000000000000000000815291820188905273ffffffffffffffffffffffffffffffffffffffff169063776958969060240160206040518083038186803b158015612fbf57600080fd5b505afa158015612fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff79190613c75565b612fff565b60005b9050633b9aca00811115613011575060005b600061302460035483633b9aca00612c5b565b60035461303191906143fb565b90506130488560c861304384826143be565b612c5b565b61305290866143fb565b92508261306457600092505050613129565b61010086015160401c600190811614613086576130818385612d60565b613126565b600087815260026020818152604080842081516060810183528a815260035460ff90811682860190815273ffffffffffffffffffffffffffffffffffffffff808d16958401958652845460018181018755958a52969098209251959096029091019384559351920180549151909416610100027fffffffffffffffffffffff00000000000000000000000000000000000000000090911691909216171790555b50505b949350505050565b8047101561319b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610637565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146131f5576040519150601f19603f3d011682016040523d82523d6000602084013e6131fa565b606091505b5050905080612f2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610637565b60208201516040517f69e11cc50000000000000000000000000000000000000000000000000000000081526004810185905260248101919091526001604482015281906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906369e11cc59060640160006040518083038186803b15801561332a57600080fd5b505afa15801561333e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526133849190810190613a1f565b905060005b81518110156137475760008282815181106133a6576133a66144d5565b6020026020010151905060006133c5868360200151633b9aca00612c5b565b905080156136ec5760a082015173ffffffffffffffffffffffffffffffffffffffff1615613469578160a0015173ffffffffffffffffffffffffffffffffffffffff1663550b043282838b6001876040518663ffffffff1660e01b8152600401613432949392919061425d565b6000604051808303818588803b15801561344b57600080fd5b505af115801561345f573d6000803e3d6000fd5b50505050506136df565b6040820151156136d15760408083015190517f8620265000000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163862026509161352c917f00000000000000000000000000000000000000000000000000000000000000009060040191825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60206040518083038186803b15801561354457600080fd5b505afa158015613558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357c9190613948565b905073ffffffffffffffffffffffffffffffffffffffff81166135cb576040517f6921234300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116301415613629576136248230856040015186606001516000886000015160405180602001604052806000815250604051806020016040528060008152506126d4565b6136cb565b604080840151606085015185518351602081018552600080825294517f0393045300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169563039304539589956136989591949093600401614136565b6000604051808303818588803b1580156136b157600080fd5b505af11580156136c5573d6000803e3d6000fd5b50505050505b506136df565b6136df826060015182613131565b6136e981866143fb565b94505b87876000015188602001517fd5a0ea197eec97b08a67e43169564f3b9b9aaa22f7b3e1652c8e6417b7cf031685853360405161372a93929190614192565b60405180910390a45050808061373f9061443e565b915050613389565b50509392505050565b50805460008255600202906000526020600020908101906126d191905b808211156137ab57600081556001810180547fffffffffffffffffffffff00000000000000000000000000000000000000000016905560020161376d565b5090565b60006137c26137bd84614378565b614329565b90508281528383830111156137d657600080fd5b828260208301376000602084830101529392505050565b60008083601f8401126137ff57600080fd5b50813567ffffffffffffffff81111561381757600080fd5b60208301915083602082850101111561382f57600080fd5b9250929050565b805161384181614533565b919050565b600082601f83011261385757600080fd5b6122d5838335602085016137af565b600082601f83011261387757600080fd5b81516138856137bd82614378565b81815284602083860101111561389a57600080fd5b613129826020830160208701614412565b600061012082840312156138be57600080fd5b6138c66142dc565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015261391460e08301613836565b60e082015261010080830151818301525092915050565b60006020828403121561393d57600080fd5b81356122d581614533565b60006020828403121561395a57600080fd5b81516122d581614533565b600080600080600080600060e0888a03121561398057600080fd5b873561398b81614533565b965060208801359550604088013594506060880135935060808801356139b081614533565b925060a088013567ffffffffffffffff808211156139cd57600080fd5b6139d98b838c01613846565b935060c08a01359150808211156139ef57600080fd5b508801601f81018a13613a0157600080fd5b613a108a8235602084016137af565b91505092959891949750929550565b60006020808385031215613a3257600080fd5b825167ffffffffffffffff80821115613a4a57600080fd5b818501915085601f830112613a5e57600080fd5b815181811115613a7057613a70614504565b613a7e848260051b01614329565b818152848101925083850160c0808402860187018a1015613a9e57600080fd5b60009550855b84811015613b235781838c031215613aba578687fd5b613ac2614306565b8351613acd81614555565b8152838901518982015260408085015190820152606080850151613af081614533565b908201526080848101519082015260a080850151613b0d81614533565b9082015286529487019491810191600101613aa4565b50919998505050505050505050565b600060208284031215613b4457600080fd5b81516122d581614555565b60006101208284031215613b6257600080fd5b6122d583836138ab565b6000806101408385031215613b8057600080fd5b613b8a84846138ab565b915061012083015190509250929050565b60008060006101608486031215613bb157600080fd5b613bbb85856138ab565b9250610120840151915061014084015167ffffffffffffffff811115613be057600080fd5b613bec86828701613866565b9150509250925092565b6000806000806101808587031215613c0d57600080fd5b613c1786866138ab565b93506101208501519250610140850151915061016085015167ffffffffffffffff811115613c4457600080fd5b613c5087828801613866565b91505092959194509250565b600060208284031215613c6e57600080fd5b5035919050565b600060208284031215613c8757600080fd5b5051919050565b60008060008060008060008060c0898b031215613caa57600080fd5b883597506020890135613cbc81614533565b9650604089013595506060890135613cd381614555565b9450608089013567ffffffffffffffff80821115613cf057600080fd5b613cfc8c838d016137ed565b909650945060a08b0135915080821115613d1557600080fd5b50613d228b828c016137ed565b999c989b5096995094979396929594505050565b60008060408385031215613d4957600080fd5b823591506020830135613d5b81614533565b809150509250929050565b60008060408385031215613d7957600080fd5b82359150602083013567ffffffffffffffff811115613d9757600080fd5b613da385828601613846565b9150509250929050565b600080600060608486031215613dc257600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215613df157600080fd5b853594506020860135935060408601359250606086013591506080860135613e1881614533565b809150509295509295909350565b600080600080600060a08688031215613e3e57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115613e7157600080fd5b613e7d88828901613846565b9150509295509295909350565b600081518084526020808501945080840160005b83811015613ee9578151805188528381015160ff168489015260409081015173ffffffffffffffffffffffffffffffffffffffff169088015260609096019590820190600101613e9e565b509495945050505050565b60008151808452613f0c816020860160208601614412565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015285608084015260e060a0840152613f8660e0840186613ef4565b915080841660c08401525098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015286604084015285606084015260c06080840152613fe160c0840186613ef4565b915080841660a084015250979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015280861660808401525060e060a083015261404260e0830185613ef4565b82810360c08401526140548185613ef4565b9a9950505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808916835287602084015286604084015285606084015260c06080840152613fe160c0840186613ef4565b73ffffffffffffffffffffffffffffffffffffffff8816815286602082015285604082015284606082015283608082015260e060a0820152600061404260e0830185613ef4565b6020815260006122d56020830184613e8a565b6040815260006141116040830185613e8a565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b85815273ffffffffffffffffffffffffffffffffffffffff85166020820152836040820152821515606082015260c06080820152600060c082015260e060a0820152600061418760e0830184613ef4565b979650505050505050565b61010081016141f482868051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b8360c083015273ffffffffffffffffffffffffffffffffffffffff831660e0830152949350505050565b8381526060602082015260006142376060830185613ef4565b905073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b848152602081018490526040810183905261012081016142d360608301848051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b95945050505050565b604051610120810167ffffffffffffffff8111828210171561430057614300614504565b60405290565b60405160c0810167ffffffffffffffff8111828210171561430057614300614504565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561437057614370614504565b604052919050565b600067ffffffffffffffff82111561439257614392614504565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082198211156143d1576143d1614477565b500190565b600060ff821660ff84168060ff038211156143f3576143f3614477565b019392505050565b60008282101561440d5761440d614477565b500390565b60005b8381101561442d578181015183820152602001614415565b83811115612be05750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561447057614470614477565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146126d157600080fd5b80151581146126d157600080fdfea26469706673582212207a026197826408f4cb647e116829af46adb74edbf0b07acbb2a4fcf07c53553464736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061018b5760003560e01c8063975057e7116100d6578063c99d3e831161007f578063ddca3f4311610059578063ddca3f43146104e1578063f2fde38b146104f7578063fc0c546a1461051757600080fd5b8063c99d3e8314610474578063d6dacc5314610494578063d930c60c146104c157600080fd5b8063b6cf978e116100b0578063b6cf978e146103ed578063c41c2f241461040d578063c89e43611461044157600080fd5b8063975057e714610365578063ad007d6314610399578063b5a6aed7146103cd57600080fd5b806369fe0e2d116101385780638af56094116101125780638af56094146102d95780638b79543c146103065780638da5cb5b1461033a57600080fd5b806369fe0e2d14610284578063715018a6146102a457806389701db5146102b957600080fd5b8063423734721161016957806342373472146102235780635de6031414610236578063637913ac1461026457600080fd5b806303930453146101905780632bdfe004146101a5578063405b84fa14610203575b600080fd5b6101a361019e366004613c8e565b61054b565b005b3480156101b157600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561020f57600080fd5b506101a361021e366004613d36565b6105ce565b6101a3610231366004613d66565b610bcd565b34801561024257600080fd5b50610256610251366004613c5c565b610d16565b6040519081526020016101fa565b34801561027057600080fd5b506101a361027f36600461392b565b610ddd565b34801561029057600080fd5b506101a361029f366004613c5c565b610edd565b3480156102b057600080fd5b506101a3610fd3565b3480156102c557600080fd5b506101a36102d4366004613c5c565b611060565b3480156102e557600080fd5b506102f96102f4366004613c5c565b6115aa565b6040516101fa91906140eb565b34801561031257600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b34801561034657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101d9565b34801561037157600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a557600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d957600080fd5b506101a36103e8366004613dd9565b61164f565b3480156103f957600080fd5b50610256610408366004613965565b611bf8565b34801561041957600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b34801561044d57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101d9565b34801561048057600080fd5b5061025661048f366004613dad565b612095565b3480156104a057600080fd5b506004546101d99073ffffffffffffffffffffffffffffffffffffffff1681565b3480156104cd57600080fd5b506101a36104dc366004613e26565b6122dc565b3480156104ed57600080fd5b5061025660035481565b34801561050357600080fd5b506101a361051236600461392b565b6125a4565b34801561052357600080fd5b506101d97f000000000000000000000000000000000000000000000000000000000000000081565b6105c434338a8a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b90819084018382808284376000920191909152506126d492505050565b5050505050505050565b60026001541415610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190613948565b8260043373ffffffffffffffffffffffffffffffffffffffff8416148015906107fc57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190613b32565b155b80156108d857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561089e57600080fd5b505afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d69190613b32565b155b1561090f576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561095557600080fd5b505afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d9190613948565b73ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610a11576040517f581010ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6bb6a5ad000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636bb6a5ad90602401602060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190613c75565b90508015610b6f57604080517f423734720000000000000000000000000000000000000000000000000000000081526004810188905260248101919091526000604482015273ffffffffffffffffffffffffffffffffffffffff86169063423734729083906064016000604051808303818588803b158015610b5557600080fd5b505af1158015610b69573d6000803e3d6000fd5b50505050505b6040805182815233602082015273ffffffffffffffffffffffffffffffffffffffff87169188917fa7519e5f94697b7f53e97c5eb46a0c730a296ab686ab8fd333835c5f735784eb910160405180910390a350506001805550505050565b34610c04576040517f839a437b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fe7c8e3e3000000000000000000000000000000000000000000000000000000008152600481018390523460248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e7c8e3e39060440161012060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190613b4f565b50610cd682346128f8565b817f4ce42b42caaa564737146f357a8fa7fe24940fac843d392a69e23b32a1d766a3348333604051610d0a9392919061421e565b60405180910390a25050565b6040517f9cc7f708000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690639cc7f7089060240160206040518083038186803b158015610d9f57600080fd5b505afa158015610db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd79190613c75565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604080519182523360208301527f0a9a80fe9716605b3e52abb3d792d6a4e7816d6afc02a5a4ef023081feaf9f6091015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b600a811115610f99576040517f45fbd9c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003819055604080518281523360208201527fd7414e590e1cb532989ab2a34c8f4c2c17f7ab6f006efeeaef2e87cd5008c2029101610ed2565b60005473ffffffffffffffffffffffffffffffffffffffff163314611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b61105e6000612be6565b565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156110e657600080fd5b505afa1580156110fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111e9190613948565b81600561114060005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015801561119257503373ffffffffffffffffffffffffffffffffffffffff851614155b801561126e57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561123457600080fd5b505afa158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c9190613b32565b155b801561134a57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190613b32565b155b15611381576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260015414156113ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610637565b600260018190556000868152602091825260408082208054825181860281018601909352808352929391929091849084015b8282101561148557600084815260209081902060408051606081018252600286029092018054835260019081015460ff811684860152610100900473ffffffffffffffffffffffffffffffffffffffff16918301919091529083529092019101611420565b50505050905060005b815181101561154c5761153a6114ef8383815181106114af576114af6144d5565b60200260200101516000015160c88585815181106114cf576114cf6144d5565b60200260200101516020015160c86114e791906143d6565b60ff16612c5b565b838381518110611501576115016144d5565b60200260200101516000015161151791906143fb565b838381518110611529576115296144d5565b602002602001015160400151612d60565b806115448161443e565b91505061148e565b50600086815260026020526040812061156491613750565b857f7a6ebe79493892d575cf9b125f19a323884c853d586d17f79635ae352833465582336040516115969291906140fe565b60405180910390a250506001805550505050565b606060026000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561164457600084815260209081902060408051606081018252600286029092018054835260019081015460ff811684860152610100900473ffffffffffffffffffffffffffffffffffffffff169183019190915290835290920191016115df565b505050509050919050565b600260015414156116bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610637565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561174757600080fd5b505afa15801561175b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177f9190613948565b8560123373ffffffffffffffffffffffffffffffffffffffff84161480159061187857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561183e57600080fd5b505afa158015611852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118769190613b32565b155b801561195457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561191a57600080fd5b505afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190613b32565b155b1561198b576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f1837d6e300000000000000000000000000000000000000000000000000000000815260048101899052602481018890526044810187905260648101869052600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631837d6e39060840161014060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a669190613b6c565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018d9052919350915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c9190613948565b9050600060035460001480611b4157508b6001145b611b5657611b518c858585612f34565b611b59565b60005b9050611b6e88611b6983866143fb565b613131565b835160208501518d91907f4d0b119651438cfed12585fc57e8ec9d9cc98bb1e5da27bdc4b7419d084500c28b8786611ba681836143fb565b6040805173ffffffffffffffffffffffffffffffffffffffff9095168552602085019390935291830152606082015233608082015260a00160405180910390a450506001805550505050505050505050565b600060026001541415611c67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610637565b60026001819055889088903373ffffffffffffffffffffffffffffffffffffffff841614801590611d6857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611d2e57600080fd5b505afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190613b32565b155b8015611e4457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611e0a57600080fd5b505afa158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e429190613b32565b155b15611e7b576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8716611ec8576040517ff74a1b6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f2d60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f9225bf1a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690639225bf1a90611fab908f908f908f908f908f908f908f90600401613ff7565b600060405180830381600087803b158015611fc557600080fd5b505af1158015611fd9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261201f9190810190613b9b565b9850955090508415612035576120358886613131565b8a816000015182602001517fd2b8b011245528ed3c6d92b102e0cd9895bb1910613b04dd42d7c9ac3781612d8f8c8f8b8e3360405161207996959493929190613f9d565b60405180910390a4505060018055509098975050505050505050565b6040517fdcc3041b00000000000000000000000000000000000000000000000000000000815260048101849052602481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063dcc3041b9060440160206040518083038186803b15801561212557600080fd5b505afa158015612139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215d9190613c75565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018690527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b1580156121e357600080fd5b505afa1580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190613948565b6040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018790526024810186905230604482015273ffffffffffffffffffffffffffffffffffffffff9190911690635578dfd79060640160206040518083038186803b15801561229057600080fd5b505afa1580156122a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190613c75565b6122d291906143fb565b90505b9392505050565b60026001541415612349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610637565b60026001556040517f4d9cd5ac0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018490526064810183905260009081907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634d9cd5ac9060840161014060405180830381600087803b1580156123f157600080fd5b505af1158015612405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124299190613b6c565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018a9052919350915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b1580156124b757600080fd5b505afa1580156124cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ef9190613948565b90506000600354600014806125045750886001145b6125195761251489858585612f34565b61251c565b60005b905060006125348a8661252f85886143fb565b61328b565b90508015612546576125468382613131565b89856000015186602001517f24352f49df447b14e0e08a323625c663d865ce20c343c4638af12e1dc48aa760868d8988888e3360405161258c9796959493929190613f3e565b60405180910390a45050600180555050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b73ffffffffffffffffffffffffffffffffffffffff81166126c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610637565b6126d181612be6565b50565b73ffffffffffffffffffffffffffffffffffffffff8516612721576040517fa762251300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61278660405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329c705c78b8d8c60018d73ffffffffffffffffffffffffffffffffffffffff16901b8b6127ef5760006127f2565b60015b60ff16178c8b8b6040518863ffffffff1660e01b815260040161281b97969594939291906140a4565b600060405180830381600087803b15801561283557600080fd5b505af1158015612849573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261288f9190810190613bf6565b8098508194508295508396505050505088836000015184602001517f48d03a5fc1af697513321cb1c46d64e8bd022e7ac66677b2cd1ea5ac3dddb1238b8f87878c336040516128e396959493929190614062565b60405180910390a45050505050505050505050565b600082815260026020908152604080832080548251818502810185019093528083529192909190849084015b8282101561298957600084815260209081902060408051606081018252600286029092018054835260019081015460ff811684860152610100900473ffffffffffffffffffffffffffffffffffffffff16918301919091529083529092019101612924565b50505060008581526002602052604081209293506129a8929150613750565b60005b8151811015612be05782612a6657600084815260026020526040902082518390839081106129db576129db6144d5565b60209081029190910181015182546001818101855560009485529383902082516002909202019081559181015191909201805460409093015173ffffffffffffffffffffffffffffffffffffffff16610100027fffffffffffffffffffffff00000000000000000000000000000000000000000090931660ff90921691909117919091179055612bce565b818181518110612a7857612a786144d5565b6020026020010151600001518310612aba57818181518110612a9c57612a9c6144d5565b60200260200101516000015183612ab391906143fb565b9250612bce565b60026000858152602001908152602001600020604051806060016040528085858581518110612aeb57612aeb6144d5565b602002602001015160000151612b0191906143fb565b8152602001848481518110612b1857612b186144d5565b60200260200101516020015160ff168152602001848481518110612b3e57612b3e6144d5565b60209081029190910181015160409081015173ffffffffffffffffffffffffffffffffffffffff9081169093528454600181810187556000968752838720865160029093020191825592850151920180549490910151909216610100027fffffffffffffffffffffff00000000000000000000000000000000000000000090931660ff9091161791909117905592505b80612bd88161443e565b9150506129ab565b50505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415612cb457838281612caa57612caa6144a6565b04925050506122d5565b838110612cf7576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610637565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040517f862026500000000000000000000000000000000000000000000000000000000081526001600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063862026509060440160206040518083038186803b158015612e1357600080fd5b505afa158015612e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4b9190613948565b905073ffffffffffffffffffffffffffffffffffffffff81163014612eff5760408051602081018252600080825291517f0393045300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416926303930453928792612ed2926001928992829190600401614136565b6000604051808303818588803b158015612eeb57600080fd5b505af11580156105c4573d6000803e3d6000fd5b612f2f833060018560008060405180602001604052806000815250604051806020016040528060008152506126d4565b505050565b600454600090819073ffffffffffffffffffffffffffffffffffffffff1615612ffc57600480546040517f7769589600000000000000000000000000000000000000000000000000000000815291820188905273ffffffffffffffffffffffffffffffffffffffff169063776958969060240160206040518083038186803b158015612fbf57600080fd5b505afa158015612fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff79190613c75565b612fff565b60005b9050633b9aca00811115613011575060005b600061302460035483633b9aca00612c5b565b60035461303191906143fb565b90506130488560c861304384826143be565b612c5b565b61305290866143fb565b92508261306457600092505050613129565b61010086015160401c600190811614613086576130818385612d60565b613126565b600087815260026020818152604080842081516060810183528a815260035460ff90811682860190815273ffffffffffffffffffffffffffffffffffffffff808d16958401958652845460018181018755958a52969098209251959096029091019384559351920180549151909416610100027fffffffffffffffffffffff00000000000000000000000000000000000000000090911691909216171790555b50505b949350505050565b8047101561319b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610637565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146131f5576040519150601f19603f3d011682016040523d82523d6000602084013e6131fa565b606091505b5050905080612f2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610637565b60208201516040517f69e11cc50000000000000000000000000000000000000000000000000000000081526004810185905260248101919091526001604482015281906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906369e11cc59060640160006040518083038186803b15801561332a57600080fd5b505afa15801561333e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526133849190810190613a1f565b905060005b81518110156137475760008282815181106133a6576133a66144d5565b6020026020010151905060006133c5868360200151633b9aca00612c5b565b905080156136ec5760a082015173ffffffffffffffffffffffffffffffffffffffff1615613469578160a0015173ffffffffffffffffffffffffffffffffffffffff1663550b043282838b6001876040518663ffffffff1660e01b8152600401613432949392919061425d565b6000604051808303818588803b15801561344b57600080fd5b505af115801561345f573d6000803e3d6000fd5b50505050506136df565b6040820151156136d15760408083015190517f8620265000000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163862026509161352c917f00000000000000000000000000000000000000000000000000000000000000009060040191825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60206040518083038186803b15801561354457600080fd5b505afa158015613558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357c9190613948565b905073ffffffffffffffffffffffffffffffffffffffff81166135cb576040517f6921234300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116301415613629576136248230856040015186606001516000886000015160405180602001604052806000815250604051806020016040528060008152506126d4565b6136cb565b604080840151606085015185518351602081018552600080825294517f0393045300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169563039304539589956136989591949093600401614136565b6000604051808303818588803b1580156136b157600080fd5b505af11580156136c5573d6000803e3d6000fd5b50505050505b506136df565b6136df826060015182613131565b6136e981866143fb565b94505b87876000015188602001517fd5a0ea197eec97b08a67e43169564f3b9b9aaa22f7b3e1652c8e6417b7cf031685853360405161372a93929190614192565b60405180910390a45050808061373f9061443e565b915050613389565b50509392505050565b50805460008255600202906000526020600020908101906126d191905b808211156137ab57600081556001810180547fffffffffffffffffffffff00000000000000000000000000000000000000000016905560020161376d565b5090565b60006137c26137bd84614378565b614329565b90508281528383830111156137d657600080fd5b828260208301376000602084830101529392505050565b60008083601f8401126137ff57600080fd5b50813567ffffffffffffffff81111561381757600080fd5b60208301915083602082850101111561382f57600080fd5b9250929050565b805161384181614533565b919050565b600082601f83011261385757600080fd5b6122d5838335602085016137af565b600082601f83011261387757600080fd5b81516138856137bd82614378565b81815284602083860101111561389a57600080fd5b613129826020830160208701614412565b600061012082840312156138be57600080fd5b6138c66142dc565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015261391460e08301613836565b60e082015261010080830151818301525092915050565b60006020828403121561393d57600080fd5b81356122d581614533565b60006020828403121561395a57600080fd5b81516122d581614533565b600080600080600080600060e0888a03121561398057600080fd5b873561398b81614533565b965060208801359550604088013594506060880135935060808801356139b081614533565b925060a088013567ffffffffffffffff808211156139cd57600080fd5b6139d98b838c01613846565b935060c08a01359150808211156139ef57600080fd5b508801601f81018a13613a0157600080fd5b613a108a8235602084016137af565b91505092959891949750929550565b60006020808385031215613a3257600080fd5b825167ffffffffffffffff80821115613a4a57600080fd5b818501915085601f830112613a5e57600080fd5b815181811115613a7057613a70614504565b613a7e848260051b01614329565b818152848101925083850160c0808402860187018a1015613a9e57600080fd5b60009550855b84811015613b235781838c031215613aba578687fd5b613ac2614306565b8351613acd81614555565b8152838901518982015260408085015190820152606080850151613af081614533565b908201526080848101519082015260a080850151613b0d81614533565b9082015286529487019491810191600101613aa4565b50919998505050505050505050565b600060208284031215613b4457600080fd5b81516122d581614555565b60006101208284031215613b6257600080fd5b6122d583836138ab565b6000806101408385031215613b8057600080fd5b613b8a84846138ab565b915061012083015190509250929050565b60008060006101608486031215613bb157600080fd5b613bbb85856138ab565b9250610120840151915061014084015167ffffffffffffffff811115613be057600080fd5b613bec86828701613866565b9150509250925092565b6000806000806101808587031215613c0d57600080fd5b613c1786866138ab565b93506101208501519250610140850151915061016085015167ffffffffffffffff811115613c4457600080fd5b613c5087828801613866565b91505092959194509250565b600060208284031215613c6e57600080fd5b5035919050565b600060208284031215613c8757600080fd5b5051919050565b60008060008060008060008060c0898b031215613caa57600080fd5b883597506020890135613cbc81614533565b9650604089013595506060890135613cd381614555565b9450608089013567ffffffffffffffff80821115613cf057600080fd5b613cfc8c838d016137ed565b909650945060a08b0135915080821115613d1557600080fd5b50613d228b828c016137ed565b999c989b5096995094979396929594505050565b60008060408385031215613d4957600080fd5b823591506020830135613d5b81614533565b809150509250929050565b60008060408385031215613d7957600080fd5b82359150602083013567ffffffffffffffff811115613d9757600080fd5b613da385828601613846565b9150509250929050565b600080600060608486031215613dc257600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215613df157600080fd5b853594506020860135935060408601359250606086013591506080860135613e1881614533565b809150509295509295909350565b600080600080600060a08688031215613e3e57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115613e7157600080fd5b613e7d88828901613846565b9150509295509295909350565b600081518084526020808501945080840160005b83811015613ee9578151805188528381015160ff168489015260409081015173ffffffffffffffffffffffffffffffffffffffff169088015260609096019590820190600101613e9e565b509495945050505050565b60008151808452613f0c816020860160208601614412565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015285608084015260e060a0840152613f8660e0840186613ef4565b915080841660c08401525098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015286604084015285606084015260c06080840152613fe160c0840186613ef4565b915080841660a084015250979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015280861660808401525060e060a083015261404260e0830185613ef4565b82810360c08401526140548185613ef4565b9a9950505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808916835287602084015286604084015285606084015260c06080840152613fe160c0840186613ef4565b73ffffffffffffffffffffffffffffffffffffffff8816815286602082015285604082015284606082015283608082015260e060a0820152600061404260e0830185613ef4565b6020815260006122d56020830184613e8a565b6040815260006141116040830185613e8a565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b85815273ffffffffffffffffffffffffffffffffffffffff85166020820152836040820152821515606082015260c06080820152600060c082015260e060a0820152600061418760e0830184613ef4565b979650505050505050565b61010081016141f482868051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b8360c083015273ffffffffffffffffffffffffffffffffffffffff831660e0830152949350505050565b8381526060602082015260006142376060830185613ef4565b905073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b848152602081018490526040810183905261012081016142d360608301848051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b95945050505050565b604051610120810167ffffffffffffffff8111828210171561430057614300614504565b60405290565b60405160c0810167ffffffffffffffff8111828210171561430057614300614504565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561437057614370614504565b604052919050565b600067ffffffffffffffff82111561439257614392614504565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082198211156143d1576143d1614477565b500190565b600060ff821660ff84168060ff038211156143f3576143f3614477565b019392505050565b60008282101561440d5761440d614477565b500390565b60005b8381101561442d578181015183820152602001614415565b83811115612be05750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561447057614470614477565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146126d157600080fd5b80151581146126d157600080fdfea26469706673582212207a026197826408f4cb647e116829af46adb74edbf0b07acbb2a4fcf07c53553464736f6c63430008060033",
  "devdoc": {
    "details": "A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time. Inherits from: IJBPayoutRedemptionPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.",
    "kind": "dev",
    "methods": {
      "addToBalanceOf(uint256,string)": {
        "params": {
          "_memo": "A memo to pass along to the emitted event.",
          "_projectId": "The ID of the project to which the funds received belong."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_operatorStore": "A contract storing operator assignments.",
          "_owner": "The address that will own this contract.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers.",
          "_splitsStore": "A contract that stores splits for each project.",
          "_store": "A contract that stores the terminal's data."
        }
      },
      "delegate()": {
        "returns": {
          "_0": "The delegate address."
        }
      },
      "distributePayoutsOf(uint256,uint256,uint256,uint256,string)": {
        "details": "Payouts are sent to the preprogrammed splits.Anyone can distribute payouts on a project's behalf.",
        "params": {
          "_amount": "The amount being distributed.",
          "_currency": "The expected currency of the amount being distributed. Must match the project's current funding cycle's currency.",
          "_minReturnedWei": "The minimum number of wei that the amount should be valued at.",
          "_projectId": "The ID of the project having its payouts distributed."
        }
      },
      "ethBalanceOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to which the balance belongs."
        },
        "returns": {
          "_0": "The ETH balance."
        }
      },
      "heldFeesOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project for which fees are being held."
        },
        "returns": {
          "_0": "An array of fees that are being held."
        }
      },
      "migrate(uint256,address)": {
        "details": "Only a project's owner or a designated operator can migrate it.",
        "params": {
          "_projectId": "The ID of the project being migrated.",
          "_to": "The terminal contract that will gain the project's funds."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pay(uint256,address,uint256,bool,string,bytes)": {
        "details": "The msg.value is the amount of the contribution in wei.",
        "params": {
          "_beneficiary": "The address to mint tokens for and pass along to the funding cycle's data source and delegate.",
          "_delegateMetadata": "Bytes to send along to the delegate, if one is provided.",
          "_memo": "A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.",
          "_minReturnedTokens": "The minimum number of tokens expected in return.",
          "_preferClaimedTokens": "A flag indicating whether the request prefers to issue tokens unstaked rather than staked.",
          "_projectId": "The ID of the project being paid."
        }
      },
      "processFees(uint256)": {
        "details": "Only a project owner, an operator, or the contract's owner can process held fees.",
        "params": {
          "_projectId": "The ID of the project whos held fees should be processed."
        }
      },
      "redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)": {
        "details": "Only a token's holder or a designated operator can redeem it.",
        "params": {
          "_beneficiary": "The address to send the ETH to. Send the address this contract to burn the count.",
          "_delegateMetadata": "Bytes to send along to the delegate, if one is provided.",
          "_holder": "The account to redeem tokens for.",
          "_memo": "A memo to pass along to the emitted event.",
          "_minReturnedWei": "The minimum amount of Wei expected in return.",
          "_projectId": "The ID of the project to which the tokens being redeemed belong.",
          "_tokenCount": "The number of tokens to redeem."
        },
        "returns": {
          "claimAmount": "The amount of ETH that the tokens were redeemed for, in wei."
        }
      },
      "remainingDistributionLimitOf(uint256,uint256,uint256)": {
        "params": {
          "_fundingCycleConfiguration": "The funding cycle configuration during which the limit remaining is being calculated.",
          "_fundingCycleNumber": "The number of the funding cycle during which the limit remaining is being calculated.",
          "_projectId": "The ID of the project to which the remaining limit belongs."
        },
        "returns": {
          "_0": "The remaining distribution limit for this terminal."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "details": "Only the owner of this contract can change the fee.",
        "params": {
          "_fee": "The new fee."
        }
      },
      "setFeeGauge(address)": {
        "details": "Only the owner of this contract can change the fee gauge.",
        "params": {
          "_feeGauge": "The new fee gauge."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "useAllowanceOf(uint256,uint256,uint256,uint256,address)": {
        "details": "Only a project's owner or a designated operator can migrate it.",
        "params": {
          "_amount": "The amount of the allowance to use.",
          "_beneficiary": "The address to send the funds to.",
          "_projectId": "The ID of the project to use the allowance of."
        }
      }
    },
    "stateVariables": {
      "fee": {
        "details": "Out of 200."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "addToBalanceOf(uint256,string)": {
        "notice": "Receives funds belonging to the specified project."
      },
      "delegate()": {
        "notice": "An address that serves as this terminal's delegate when making requests to ecosystem contracts."
      },
      "directory()": {
        "notice": "The directory of terminals and controllers for projects."
      },
      "distributePayoutsOf(uint256,uint256,uint256,uint256,string)": {
        "notice": "Distributes payouts for a project according to the constraints of its current funding cycle."
      },
      "ethBalanceOf(uint256)": {
        "notice": "The ETH balance that this terminal holds for each project."
      },
      "fee()": {
        "notice": "The platform fee percent."
      },
      "feeGauge()": {
        "notice": "The data source that returns a discount to apply to a project's fee."
      },
      "heldFeesOf(uint256)": {
        "notice": "The fees that are currently being held to be processed later for each project."
      },
      "migrate(uint256,address)": {
        "notice": "Allows a project owner to migrate its funds and operations to a new terminal."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "pay(uint256,address,uint256,bool,string,bytes)": {
        "notice": "Contribute ETH to a project."
      },
      "processFees(uint256)": {
        "notice": "Process any fees that are being held for the project."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)": {
        "notice": "Addresses can redeem their tokens to claim the project's overflowed ETH, or to trigger rules determined by the project's current funding cycle's data source."
      },
      "remainingDistributionLimitOf(uint256,uint256,uint256)": {
        "notice": "The amount of funds that can still be distributed within the preconfigured limit."
      },
      "setFee(uint256)": {
        "notice": "Allows the fee to be updated for subsequent funding cycle configurations."
      },
      "setFeeGauge(address)": {
        "notice": "Allows the fee gauge to be updated."
      },
      "splitsStore()": {
        "notice": "The contract that stores splits for each project."
      },
      "store()": {
        "notice": "The contract that stores and manages the terminal's data."
      },
      "token()": {
        "notice": "The token that this terminal accepts."
      },
      "useAllowanceOf(uint256,uint256,uint256,uint256,address)": {
        "notice": "Allows a project to send funds from its overflow up to the preconfigured allowance."
      }
    },
    "notice": "This contract manages all inflows and outflows of funds into the Juicebox ecosystem.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 693,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7496,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_heldFeesOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_struct(JBFee)16040_storage)dyn_storage)"
      },
      {
        "astId": 7526,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7531,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "feeGauge",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IJBFeeGauge)14613"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(JBFee)16040_storage)dyn_storage": {
        "base": "t_struct(JBFee)16040_storage",
        "encoding": "dynamic_array",
        "label": "struct JBFee[]",
        "numberOfBytes": "32"
      },
      "t_contract(IJBFeeGauge)14613": {
        "encoding": "inplace",
        "label": "contract IJBFeeGauge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(JBFee)16040_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct JBFee[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(JBFee)16040_storage)dyn_storage"
      },
      "t_struct(JBFee)16040_storage": {
        "encoding": "inplace",
        "label": "struct JBFee",
        "members": [
          {
            "astId": 16035,
            "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16037,
            "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 16039,
            "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "beneficiary",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
