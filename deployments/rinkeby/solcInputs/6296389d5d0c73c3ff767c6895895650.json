{
  "language": "Solidity",
  "sources": {
    "contracts/abstract/JBControllerUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBControllerUtility.sol';\n\n// --------------------------- custom errors -------------------------- //\n//*********************************************************************//\nerror CONTROLLER_UNAUTHORIZED();\n\n/** \n  @notice\n  Provides tools for contracts that has functionality that can only be accessed by a project's controller.\n*/\nabstract contract JBControllerUtility is IJBControllerUtility {\n  modifier onlyController(uint256 _projectId) {\n    if (address(directory.controllerOf(_projectId)) != msg.sender) revert CONTROLLER_UNAUTHORIZED();\n    _;\n  }\n\n  /** \n    @notice \n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  /** \n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  constructor(IJBDirectory _directory) {\n    directory = _directory;\n  }\n}\n"
    },
    "contracts/interfaces/IJBControllerUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBDirectory.sol';\n\ninterface IJBControllerUtility {\n  function directory() external view returns (IJBDirectory);\n}\n"
    },
    "contracts/interfaces/IJBDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBPaymentTerminal.sol';\nimport './IJBProjects.sol';\nimport './IJBController.sol';\n\ninterface IJBDirectory {\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\n\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\n\n  event RemoveTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\n\n  event SetPrimaryTerminal(\n    uint256 indexed projectId,\n    address indexed token,\n    IJBPaymentTerminal indexed terminal,\n    address caller\n  );\n\n  event AddToSetControllerAllowlist(address indexed _address, address caller);\n\n  event RemoveFromSetControllerAllowlist(address indexed _address, address caller);\n\n  function projects() external view returns (IJBProjects);\n\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\n\n  function isAllowedToSetController(address _address) external view returns (bool);\n\n  function primaryTerminalOf(uint256 _projectId, address _token)\n    external\n    view\n    returns (IJBPaymentTerminal);\n\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\n\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external view returns (bool);\n\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\n\n  function addTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\n\n  function removeTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\n\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\n\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\n\n  function addToSetControllerAllowlist(address _address) external;\n\n  function removeFromSetControllerAllowlist(address _address) external;\n}\n"
    },
    "contracts/interfaces/IJBPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBDirectory.sol';\n\ninterface IJBPaymentTerminal {\n  function token() external view returns (address);\n\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\n\n  function remainingDistributionLimitOf(\n    uint256 _projectId,\n    uint256 _fundingCycleConfiguration,\n    uint256 _fundingCycleNumber\n  ) external view returns (uint256);\n\n  function delegate() external view returns (address);\n\n  function pay(\n    uint256 _projectId,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string calldata _memo,\n    bytes calldata _delegateMetadata\n  ) external payable;\n\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\n}\n"
    },
    "contracts/interfaces/IJBProjects.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\nimport './IJBPaymentTerminal.sol';\n\nimport './../structs/JBProjectMetadata.sol';\n\ninterface IJBProjects is IERC721 {\n  event Create(\n    uint256 indexed projectId,\n    address indexed owner,\n    bytes32 indexed handle,\n    JBProjectMetadata metadata,\n    address caller\n  );\n\n  event SetHandle(uint256 indexed projectId, bytes32 indexed handle, address caller);\n\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\n\n  event TransferHandle(\n    uint256 indexed projectId,\n    address indexed transferAddress,\n    bytes32 indexed handle,\n    bytes32 newHandle,\n    address caller\n  );\n\n  event ClaimHandle(\n    uint256 indexed projectId,\n    address indexed transferAddress,\n    bytes32 indexed handle,\n    address caller\n  );\n\n  event ChallengeHandle(\n    bytes32 indexed handle,\n    uint256 indexed projectId,\n    uint256 challengeExpiry,\n    address caller\n  );\n\n  event RenewHandle(bytes32 indexed handle, uint256 indexed projectId, address caller);\n\n  function count() external view returns (uint256);\n\n  function metadataCidOf(uint256 _projectId, uint256 _domain) external view returns (string memory);\n\n  function handleOf(uint256 _projectId) external returns (bytes32 handle);\n\n  function idFor(bytes32 _handle) external returns (uint256 projectId);\n\n  function transferAddressFor(bytes32 _handle) external returns (address receiver);\n\n  function challengeExpiryOf(bytes32 _handle) external returns (uint256);\n\n  function createFor(\n    address _owner,\n    bytes32 _handle,\n    JBProjectMetadata calldata _metadata\n  ) external returns (uint256 id);\n\n  function setHandleOf(uint256 _projectId, bytes32 _handle) external;\n\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\n\n  function transferHandleOf(\n    uint256 _projectId,\n    address _transferAddress,\n    bytes32 _newHandle\n  ) external returns (bytes32 _handle);\n\n  function claimHandle(\n    bytes32 _handle,\n    address _for,\n    uint256 _projectId\n  ) external;\n\n  function challengeHandle(bytes32 _handle) external;\n\n  function renewHandleOf(uint256 _projectId) external;\n}\n"
    },
    "contracts/interfaces/IJBController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBDirectory.sol';\nimport './IJBPaymentTerminal.sol';\nimport './IJBFundingCycleStore.sol';\n\ninterface IJBController {\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\n    external\n    view\n    returns (uint256);\n\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\n\n  function mintTokensOf(\n    uint256 _projectId,\n    uint256 _tokenCount,\n    address _beneficiary,\n    string calldata _memo,\n    bool _preferClaimedTokens,\n    uint256 _reserveRate\n  ) external returns (uint256 beneficiaryTokenCount);\n\n  function burnTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    string calldata _memo,\n    bool _preferClaimedTokens\n  ) external;\n\n  function overflowAllowanceOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal\n  ) external view returns (uint256);\n\n  function distributionLimitOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal\n  ) external view returns (uint256);\n\n  function currencyOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    IJBPaymentTerminal _terminal\n  ) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/structs/JBProjectMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nstruct JBProjectMetadata {\n  // An IPFS content ID where the metadata is found.\n  string cid;\n  // The domain within which the metadata applies.\n  uint256 domain;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IJBFundingCycleStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBFundingCycleBallot.sol';\nimport './../structs/JBFundingCycle.sol';\nimport './../structs/JBFundingCycleData.sol';\n\ninterface IJBFundingCycleStore {\n  event Configure(\n    uint256 indexed configuration,\n    uint256 indexed projectId,\n    JBFundingCycleData data,\n    uint256 metadata,\n    uint256 mustStartAtOrAfter,\n    address caller\n  );\n\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\n\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\n\n  function get(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    returns (JBFundingCycle memory);\n\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\n\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\n\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\n\n  function configureFor(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    uint256 _metadata,\n    uint256 _mustStartAtOrAfter\n  ) external returns (JBFundingCycle memory fundingCycle);\n}\n"
    },
    "contracts/interfaces/IJBFundingCycleBallot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../enums/JBBallotState.sol';\n\ninterface IJBFundingCycleBallot {\n  function duration() external view returns (uint256);\n\n  function stateOf(uint256 _configured) external view returns (JBBallotState);\n}\n"
    },
    "contracts/structs/JBFundingCycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBFundingCycleBallot.sol';\n\nstruct JBFundingCycle {\n  // The funding cycle number for each project.\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\n  // Each project's first funding cycle has a number of 1.\n  uint256 number;\n  // The timestamp when the parameters for this funding cycle were configured.\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\n  uint256 configuration;\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\n  uint256 basedOn;\n  // The timestamp marking the moment from which the funding cycle is considered active.\n  // It is a unix timestamp measured in seconds.\n  uint256 start;\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active – any proposed changes will apply to the subsequent cycle.\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\n  uint256 duration;\n  // An unsigned 60.18-decimal fixed-point number that contracts can use to base arbitrary calculations on.\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\n  uint256 weight;\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\n  // If it's 0, each funding cycle will have equal weight.\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\n  uint256 discountRate;\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\n  IJBFundingCycleBallot ballot;\n  // Extra data that can be associated with a funding cycle.\n  uint256 metadata;\n}\n"
    },
    "contracts/structs/JBFundingCycleData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBFundingCycleBallot.sol';\n\nstruct JBFundingCycleData {\n  // The duration of the funding cycle in days.\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\n  uint256 duration;\n  // The weight of the funding cycle.\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\n  uint256 weight;\n  // If it's 0, each funding cycle will have equal weight.\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\n  uint256 discountRate;\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\n  IJBFundingCycleBallot ballot;\n}\n"
    },
    "contracts/enums/JBBallotState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nenum JBBallotState {\n  Approved,\n  Active,\n  Failed\n}\n"
    },
    "contracts/JBTokenStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './abstract/JBOperatable.sol';\nimport './abstract/JBControllerUtility.sol';\nimport './interfaces/IJBTokenStore.sol';\nimport 'hardhat/console.sol';\n\nimport './libraries/JBOperations.sol';\nimport './JBToken.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror EMPTY_NAME();\nerror EMPTY_SYMBOL();\nerror INSUFFICIENT_FUNDS();\nerror INVALID_RECIPIENT();\nerror INSUFFICIENT_UNCLAIMED_TOKENS();\nerror RECIPIENT_ZERO_ADDRESS();\nerror TOKEN_AMOUNT_ZERO();\nerror TOKEN_NOT_FOUND();\nerror TOKEN_ALREADY_ISSUED();\n\n/**\n  @notice\n  Manage Token minting, burning, and account balances.\n\n  @dev\n  Tokens can be either represented internally or claimed as ERC-20s.\n  This contract manages these two representations and allows claiming.\n\n  @dev\n  The total supply of a project's tokens and the balance of each account are calculated in this contract.\n\n  @dev\n  Each project can bring their own token if they prefer, and swap between tokens at any time.\n*/\ncontract JBTokenStore is JBControllerUtility, JBOperatable, IJBTokenStore {\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable override projects;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Each project's ERC20 Token tokens.\n\n    _projectId The ID of the project to which the token belongs.\n  */\n  mapping(uint256 => IJBToken) public override tokenOf;\n\n  /**\n    @notice\n    Each holder's balance of unclaimed Tokens for each project.\n\n    _holder The holder of balance.\n    _projectId The ID of the project to which the token belongs.\n  */\n  mapping(address => mapping(uint256 => uint256)) public override unclaimedBalanceOf;\n\n  /**\n    @notice\n    The total supply of unclaimed tokens for each project.\n\n    _projectId The ID of the project to which the token belongs.\n  */\n  mapping(uint256 => uint256) public override unclaimedTotalSupplyOf;\n\n  /**\n    @notice\n    A flag indicating if tokens are required to be issued as claimed for a particular project.\n\n    _projectId The ID of the project to which the requirement applies.\n  */\n  mapping(uint256 => bool) public override requireClaimFor;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The total supply of tokens for each project, including claimed and unclaimed tokens.\n\n    @param _projectId The ID of the project to get the total token supply of.\n\n    @return supply The total supply.\n  */\n  function totalSupplyOf(uint256 _projectId) external view override returns (uint256 supply) {\n    // Get a reference to the unclaimed total supply of the project.\n    supply = unclaimedTotalSupplyOf[_projectId];\n\n    // Get a reference to the project's token.\n    IJBToken _token = tokenOf[_projectId];\n\n    // If the project has issued a token, add it's total supply to the total.\n    if (_token != IJBToken(address(0))) supply = supply + _token.totalSupply(_projectId);\n  }\n\n  /**\n    @notice\n    The total balance of token a holder has for a specified project, including claimed and unclaimed tokens.\n\n    @param _holder The token holder to get a balance for.\n    @param _projectId The project to get the `_hodler`s balance of.\n\n    @return balance The balance.\n  */\n  function balanceOf(address _holder, uint256 _projectId)\n    external\n    view\n    override\n    returns (uint256 balance)\n  {\n    // Get a reference to the holder's unclaimed balance for the project.\n    balance = unclaimedBalanceOf[_holder][_projectId];\n\n    // Get a reference to the project's token.\n    IJBToken _token = tokenOf[_projectId];\n\n    // If the project has issued a token, add the holder's balance to the total.\n    if (_token != IJBToken(address(0))) balance = balance + _token.balanceOf(_projectId, _holder);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  constructor(\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory\n  ) JBOperatable(_operatorStore) JBControllerUtility(_directory) {\n    projects = _projects;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Issues an owner's ERC-20 Tokens that'll be used when claiming tokens.\n\n    @dev\n    Deploys a project's ERC-20 token contract.\n\n    @dev\n    Only a project's current controller can issue its token.\n\n    @param _projectId The ID of the project being issued tokens.\n    @param _name The ERC-20's name.\n    @param _symbol The ERC-20's symbol.\n  */\n  function issueFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  ) external override onlyController(_projectId) returns (IJBToken token) {\n    // There must be a name.\n    if (bytes(_name).length == 0) {\n      revert EMPTY_NAME();\n    }\n\n    // There must be a symbol.\n    if (bytes(_symbol).length == 0) {\n      revert EMPTY_SYMBOL();\n    }\n\n    // Only one ERC20 token can be issued.\n    if (tokenOf[_projectId] != IJBToken(address(0))) {\n      revert TOKEN_ALREADY_ISSUED();\n    }\n\n    // Deploy the token contract.\n    token = new JBToken(_name, _symbol);\n\n    // Store the token contract.\n    tokenOf[_projectId] = token;\n\n    emit Issue(_projectId, token, _name, _symbol, msg.sender);\n  }\n\n  /**\n    @notice\n    Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\n\n    @dev\n    Only a project's current controller can change its token.\n\n    @dev\n    This JBTokenStore contract must have access to all IJBToken interface functions.\n\n    @param _projectId The ID of the project to which the changed token belongs.\n    @param _token The new token.\n    @param _newOwner An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\n  */\n  function changeFor(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  ) external override onlyController(_projectId) {\n    // Get a reference to the current owner of the token.\n    IJBToken _currentToken = tokenOf[_projectId];\n\n    // Store the new token.\n    tokenOf[_projectId] = _token;\n\n    // If there's a current token and a new owner was provided, transfer ownership of the old token to the new owner.\n    if (_newOwner != address(0) && _currentToken != IJBToken(address(0)))\n      _currentToken.transferOwnership(_newOwner);\n\n    emit Change(_projectId, _token, _newOwner, msg.sender);\n  }\n\n  /**\n    @notice\n    Mint new tokens.\n\n    @dev\n    Only a project's current controller can mint its tokens.\n\n    @param _holder The address receiving the new tokens.\n    @param _projectId The ID of the project to which the tokens belong.\n    @param _amount The amount of tokens to mint.\n    @param _preferClaimedTokens A flag indicating whether there's a preference for ERC20's to be claimed automatically if they have been issued.\n  */\n  function mintFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external override onlyController(_projectId) {\n    // An amount must be specified.\n    if (_amount == 0) {\n      revert TOKEN_AMOUNT_ZERO();\n    }\n\n    // Get a reference to the project's ERC20 tokens.\n    IJBToken _token = tokenOf[_projectId];\n\n    // If there exists ERC-20 tokens and the caller prefers these claimed tokens or the project requires it.\n    bool _shouldClaimTokens = (requireClaimFor[_projectId] || _preferClaimedTokens) &&\n      _token != IJBToken(address(0));\n\n    if (_shouldClaimTokens) {\n      // Mint the equivalent amount of ERC20s.\n      _token.mint(_projectId, _holder, _amount);\n    } else {\n      // Add to the unclaimed balance and total supply.\n      unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] + _amount;\n      unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] + _amount;\n    }\n\n    emit Mint(_holder, _projectId, _amount, _shouldClaimTokens, _preferClaimedTokens, msg.sender);\n  }\n\n  /**\n    @notice\n    Burns tokens.\n\n    @dev\n    Only a project's current controller can burn its tokens.\n\n    @param _holder The address that owns the tokens being burned.\n    @param _projectId The ID of the project to which the burned tokens belong\n    @param _amount The amount of tokens to burned.\n    @param _preferClaimedTokens A flag indicating if there's a preference to burn tokens that have been converted to ERC-20s.\n  */\n  function burnFrom(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external override onlyController(_projectId) {\n    // An amount must be specified.\n    if (_amount == 0) {\n      revert TOKEN_AMOUNT_ZERO();\n    }\n    // Get a reference to the project's ERC20 tokens.\n    IJBToken _token = tokenOf[_projectId];\n\n    // Get a reference to the amount of unclaimed tokens.\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\n\n    // Get a reference to the number of tokens there are.\n    uint256 _claimedBalance = _token == IJBToken(address(0))\n      ? 0\n      : _token.balanceOf(_projectId, _holder);\n\n    if (\n      (_amount >= _claimedBalance || _amount >= _unclaimedBalance) &&\n      (_amount < _claimedBalance || _unclaimedBalance < _amount - _claimedBalance) &&\n      (_amount < _unclaimedBalance || _claimedBalance < _amount - _unclaimedBalance)\n    ) {\n      revert INSUFFICIENT_FUNDS();\n    }\n    // The amount of tokens to burn.\n    uint256 _claimedTokensToBurn;\n\n    // If there's no balance, redeem no tokens.\n    if (_claimedBalance == 0) {\n      _claimedTokensToBurn = 0;\n      // If prefer converted, redeem tokens before redeeming unclaimed tokens.\n    } else if (_preferClaimedTokens) {\n      _claimedTokensToBurn = _claimedBalance >= _amount ? _amount : _claimedBalance;\n      // Otherwise, redeem unclaimed tokens before claimed tokens.\n    } else {\n      _claimedTokensToBurn = _unclaimedBalance >= _amount ? 0 : _amount - _unclaimedBalance;\n    }\n\n    // The amount of unclaimed tokens to redeem.\n    uint256 _unclaimedTokensToBurn = _amount - _claimedTokensToBurn;\n\n    // burn the tokens.\n    if (_claimedTokensToBurn > 0) _token.burn(_projectId, _holder, _claimedTokensToBurn);\n    if (_unclaimedTokensToBurn > 0) {\n      // Reduce the holders balance and the total supply.\n      unclaimedBalanceOf[_holder][_projectId] =\n        unclaimedBalanceOf[_holder][_projectId] -\n        _unclaimedTokensToBurn;\n      unclaimedTotalSupplyOf[_projectId] =\n        unclaimedTotalSupplyOf[_projectId] -\n        _unclaimedTokensToBurn;\n    }\n\n    emit Burn(_holder, _projectId, _amount, _unclaimedBalance, _preferClaimedTokens, msg.sender);\n  }\n\n  /**\n    @notice\n    Claims internal tokens by minting and distributing ERC20 tokens.\n\n    @dev\n    Anyone can claim tokens on behalf of a token owner.\n\n    @param _holder The owner of the tokens to claim.\n    @param _projectId The ID of the project whose tokens are being claimed.\n    @param _amount The amount of tokens to claim.\n  */\n  function claimFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount\n  ) external override {\n    // Get a reference to the project's ERC20 tokens.\n    IJBToken _token = tokenOf[_projectId];\n\n    // Tokens must have been issued.\n    if (_token == IJBToken(address(0))) {\n      revert TOKEN_NOT_FOUND();\n    }\n\n    // Get a reference to the amount of unclaimed tokens.\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\n\n    // There must be enough unlocked unclaimed tokens to claim.\n    if (_unclaimedBalance < _amount) {\n      revert INSUFFICIENT_UNCLAIMED_TOKENS();\n    }\n\n    // Subtract the claim amount from the holder's balance.\n    unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount;\n\n    // Subtract the claim amount from the project's total supply.\n    unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] - _amount;\n\n    // Mint the equivalent amount of ERC20s.\n    _token.mint(_projectId, _holder, _amount);\n\n    emit Claim(_holder, _projectId, _amount, msg.sender);\n  }\n\n  /**\n    @notice\n    Allows an unclaimed token holder to transfer them to another account, without claiming to ERC-20s.\n\n    @dev\n    Only a token holder or an operator can transfer its unclaimed tokens.\n\n    @param _recipient The recipient of the tokens.\n    @param _holder The address to transfer tokens from.\n    @param _projectId The ID of the project whose tokens are being transferred.\n    @param _amount The amount of tokens to transfer.\n  */\n  function transferTo(\n    address _recipient,\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount\n  ) external override requirePermission(_holder, _projectId, JBOperations.TRANSFER) {\n    // Can't transfer to the zero address.\n    if (_recipient == address(0)) {\n      revert RECIPIENT_ZERO_ADDRESS();\n    }\n\n    // An address can't transfer to itself.\n    if (_holder == _recipient) {\n      revert INVALID_RECIPIENT();\n    }\n\n    // There must be an amount to transfer.\n    if (_amount == 0) {\n      revert TOKEN_AMOUNT_ZERO();\n    }\n    // Get a reference to the amount of unclaimed tokens.\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\n\n    // There must be enough unclaimed tokens to transfer.\n    if (_amount > _unclaimedBalance) {\n      revert INSUFFICIENT_UNCLAIMED_TOKENS();\n    }\n\n    // Subtract from the holder.\n    unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] - _amount;\n\n    // Add the tokens to the recipient.\n    unclaimedBalanceOf[_recipient][_projectId] =\n      unclaimedBalanceOf[_recipient][_projectId] +\n      _amount;\n\n    emit Transfer(_holder, _projectId, _recipient, _amount, msg.sender);\n  }\n\n  /**\n    @notice\n    Allows a project to force all future mints to be claimed into the holder's wallet, or revoke the flag if it's already set.\n\n    @dev\n    Only a token holder or an operator can transfer its unclaimed tokens.\n\n    @param _projectId The ID of the project being affected.\n    @param _flag A flag indicating whether or not claiming should be required.\n  */\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag)\n    external\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.REQUIRE_CLAIM)\n  {\n    // Get a reference to the project's ERC20 tokens.\n    IJBToken _token = tokenOf[_projectId];\n\n    // Tokens must have been issued.\n    if (_token == IJBToken(address(0))) {\n      revert TOKEN_NOT_FOUND();\n    }\n\n    // Store the flag.\n    requireClaimFor[_projectId] = _flag;\n\n    emit ShouldRequireClaim(_projectId, _flag, msg.sender);\n  }\n}\n"
    },
    "contracts/abstract/JBOperatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBOperatable.sol';\n\n// --------------------------- custom errors -------------------------- //\n//*********************************************************************//\nerror UNAUTHORIZED();\n\n/** \n  @notice\n  Modifiers to allow access to functions based on the message sender's operator status.\n*/\nabstract contract JBOperatable is IJBOperatable {\n  modifier requirePermission(\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) {\n    if (\n      msg.sender != _account &&\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\n    ) {\n      revert UNAUTHORIZED();\n    }\n    _;\n  }\n\n  modifier requirePermissionAllowingOverride(\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex,\n    bool _override\n  ) {\n    if (\n      !_override &&\n      msg.sender != _account &&\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\n    ) {\n      revert UNAUTHORIZED();\n    }\n    _;\n  }\n\n  /** \n    @notice \n    A contract storing operator assignments.\n  */\n  IJBOperatorStore public immutable override operatorStore;\n\n  /** \n    @param _operatorStore A contract storing operator assignments.\n  */\n  constructor(IJBOperatorStore _operatorStore) {\n    operatorStore = _operatorStore;\n  }\n}\n"
    },
    "contracts/interfaces/IJBTokenStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBProjects.sol';\nimport './IJBToken.sol';\n\ninterface IJBTokenStore {\n  event Issue(\n    uint256 indexed projectId,\n    IJBToken indexed token,\n    string name,\n    string symbol,\n    address caller\n  );\n\n  event Mint(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 amount,\n    bool tokensWereClaimed,\n    bool preferClaimedTokens,\n    address caller\n  );\n\n  event Burn(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 amount,\n    uint256 unclaimedTokenBalance,\n    bool preferClaimedTokens,\n    address caller\n  );\n\n  event Claim(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\n\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\n\n  event Change(\n    uint256 indexed projectId,\n    IJBToken indexed token,\n    address indexed owner,\n    address caller\n  );\n\n  event Transfer(\n    address indexed holder,\n    uint256 indexed projectId,\n    address indexed recipient,\n    uint256 amount,\n    address caller\n  );\n\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\n\n  function projects() external view returns (IJBProjects);\n\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\n\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\n\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\n\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\n\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\n\n  function issueFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  ) external returns (IJBToken token);\n\n  function changeFor(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  ) external;\n\n  function burnFrom(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external;\n\n  function mintFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount,\n    bool _preferClaimedTokens\n  ) external;\n\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\n\n  function claimFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount\n  ) external;\n\n  function transferTo(\n    address _recipient,\n    address _holder,\n    uint256 _projectId,\n    uint256 _amount\n  ) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/libraries/JBOperations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBOperations {\n  uint256 public constant RECONFIGURE = 1;\n  uint256 public constant REDEEM = 2;\n  uint256 public constant MIGRATE_CONTROLLER = 3;\n  uint256 public constant MIGRATE_TERMINAL = 4;\n  uint256 public constant PROCESS_FEES = 5;\n  uint256 public constant SET_HANDLE = 6;\n  uint256 public constant SET_METADATA = 7;\n  uint256 public constant CLAIM_HANDLE = 8;\n  uint256 public constant RENEW_HANDLE = 9;\n  uint256 public constant ISSUE = 10;\n  uint256 public constant CHANGE_TOKEN = 11;\n  uint256 public constant MINT = 12;\n  uint256 public constant BURN = 13;\n  uint256 public constant TRANSFER = 14;\n  uint256 public constant REQUIRE_CLAIM = 15;\n  uint256 public constant SET_CONTROLLER = 16;\n  uint256 public constant ADD_TERMINALS = 17;\n  uint256 public constant REMOVE_TERMINAL = 18;\n  uint256 public constant SET_PRIMARY_TERMINAL = 19;\n  uint256 public constant USE_ALLOWANCE = 20;\n  uint256 public constant SET_SPLITS = 21;\n}\n"
    },
    "contracts/JBToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport './interfaces/IJBToken.sol';\n\n/** \n  @notice\n  An ERC-20 token that can be minted and burned by its owner.\n*/\ncontract JBToken is IJBToken, ERC20Votes, Ownable {\n  function totalSupply(uint256) external view override returns (uint256) {\n    return super.totalSupply();\n  }\n\n  function balanceOf(uint256, address _account) external view override returns (uint256) {\n    return super.balanceOf(_account);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _name The name of the token.\n    @param _symbol The symbol that the token should be represented by.\n  */\n  constructor(string memory _name, string memory _symbol)\n    ERC20(_name, _symbol)\n    ERC20Permit(_name)\n  {}\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Mints more of the token.\n\n    @dev\n    Only the owner of this contract cant mint more of it.\n\n    @param _account The account to mint the tokens for.\n    @param _amount The amount of tokens to mint.\n  */\n  function mint(\n    uint256,\n    address _account,\n    uint256 _amount\n  ) external override onlyOwner {\n    return _mint(_account, _amount);\n  }\n\n  /** \n    @notice\n    Burn some outstanding tokens.\n\n    @dev\n    Only the owner of this contract cant burn some of its supply.\n\n    @param _account The account to burn tokens from.\n    @param _amount The amount of tokens to burn.\n  */\n  function burn(\n    uint256,\n    address _account,\n    uint256 _amount\n  ) external override onlyOwner {\n    return _burn(_account, _amount);\n  }\n\n  /** \n    @notice\n    Transfer ownership of this contract to another address.\n\n    @dev\n    Only the owner of this contract can transfer it.\n\n    @dev\n    This is necessary to override to adhere to the IJBToken interface.\n\n    @param _newOwner The new owner.\n  */\n  function transferOwnership(address _newOwner)\n    public\n    virtual\n    override(Ownable, IJBToken)\n    onlyOwner\n  {\n    return super.transferOwnership(_newOwner);\n  }\n}\n"
    },
    "contracts/interfaces/IJBOperatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBOperatorStore.sol';\n\ninterface IJBOperatable {\n  function operatorStore() external view returns (IJBOperatorStore);\n}\n"
    },
    "contracts/interfaces/IJBOperatorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../structs/JBOperatorData.sol';\n\ninterface IJBOperatorStore {\n  event SetOperator(\n    address indexed operator,\n    address indexed account,\n    uint256 indexed domain,\n    uint256[] permissionIndexes,\n    uint256 packed\n  );\n\n  function permissionsOf(\n    address _operator,\n    address _account,\n    uint256 _domain\n  ) external view returns (uint256);\n\n  function hasPermission(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) external view returns (bool);\n\n  function hasPermissions(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256[] calldata _permissionIndexes\n  ) external view returns (bool);\n\n  function setOperator(JBOperatorData calldata _operatorData) external;\n\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\n}\n"
    },
    "contracts/structs/JBOperatorData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nstruct JBOperatorData {\n  // The address of the operator.\n  address operator;\n  // The domain within which the operator is being given permissions.\n  uint256 domain;\n  // The indexes of the permissions the operator is being given.\n  uint256[] permissionIndexes;\n}\n"
    },
    "contracts/interfaces/IJBToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBToken {\n  function totalSupply(uint256 _projectId) external view returns (uint256);\n\n  function balanceOf(uint256 _projectId, address _account) external view returns (uint256);\n\n  function mint(\n    uint256 _projectId,\n    address _account,\n    uint256 _amount\n  ) external;\n\n  function burn(\n    uint256 _projectId,\n    address _account,\n    uint256 _amount\n  ) external;\n\n  function transferOwnership(address newOwner) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-ERC20Permit.sol\";\nimport \"../../../utils/math/Math.sol\";\nimport \"../../../utils/math/SafeCast.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\n * will significantly increase the base gas cost of transfers.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Votes is ERC20Permit {\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is but NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 high = ckpts.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (ckpts[mid].fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return high == 0 ? 0 : ckpts[high - 1].votes;\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        return _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        return _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(\n        address src,\n        address dst,\n        uint256 amount\n    ) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\n        newWeight = op(oldWeight, delta);\n\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\n        } else {\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/JBETHPaymentTerminalStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\nimport '@paulrberg/contracts/math/PRBMath.sol';\n\nimport './interfaces/IJBPrices.sol';\nimport './interfaces/IJBTokenStore.sol';\nimport './interfaces/IJBPaymentTerminal.sol';\n\nimport './libraries/JBConstants.sol';\nimport './libraries/JBCurrencies.sol';\nimport './libraries/JBOperations.sol';\nimport './libraries/JBSplitsGroups.sol';\nimport './libraries/JBFundingCycleMetadataResolver.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror CURRENCY_MISMATCH();\nerror DISTRIBUTION_AMOUNT_LIMIT_REACHED();\nerror FUNDING_CYCLE_PAYMENT_PAUSED();\nerror FUNDING_CYCLE_DISTRIBUTION_PAUSED();\nerror FUNDING_CYCLE_REDEEM_PAUSED();\nerror INADEQUATE_RECLAIM_AMOUNT();\nerror INADEQUATE_CONTROLLER_ALLOWANCE();\nerror INSUFFICIENT_FUND_FOR_DISTRIBUTION();\nerror INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\nerror INADEQUATE_TOKEN_COUNT();\nerror INADEQUATE_DISTRIBUTION_AMOUNT();\nerror INSUFFICIENT_TOKENS();\nerror INVALID_FUNDING_CYCLE();\nerror NO_CLAIMABLE_TOKENS();\nerror PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\nerror PAYMENT_TERMINAL_UNAUTHORIZED();\nerror STORE_ALREADY_CLAIMED();\nerror TOKEN_AMOUNT_ZERO();\n\n/**\n  @notice\n  This contract manages all bookkeeping for inflows and outflows of funds for a terminal.\n\n  @dev\n  Aside from the public view methods, the external methods should be called by the associated terminal.\n*/\ncontract JBETHPaymentTerminalStore {\n  // A library that parses the packed funding cycle metadata into a friendlier format.\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\n\n  // A modifier only allowing the associated payment terminal to access the function.\n  modifier onlyAssociatedPaymentTerminal() {\n    if (msg.sender != address(terminal)) {\n      revert PAYMENT_TERMINAL_UNAUTHORIZED();\n    }\n    _;\n  }\n\n  event DelegateDidPay(IJBPayDelegate indexed delegate, JBDidPayData data);\n\n  event DelegateDidRedeem(IJBRedemptionDelegate indexed delegate, JBDidRedeemData data);\n\n  /**\n    @notice\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable projects;\n\n  /**\n    @notice\n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable directory;\n\n  /**\n    @notice\n    The contract storing all funding cycle configurations.\n  */\n  IJBFundingCycleStore public immutable fundingCycleStore;\n\n  /**\n    @notice\n    The contract that manages token minting and burning.\n  */\n  IJBTokenStore public immutable tokenStore;\n\n  /**\n    @notice\n    The contract that exposes price feeds.\n  */\n  IJBPrices public immutable prices;\n\n  /**\n    @notice\n    The associated payment terminal for which this contract stores data.\n  */\n  IJBPaymentTerminal public terminal;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The amount of ETH that each project has.\n\n    _projectId The ID of the project to get the balance of.\n  */\n  mapping(uint256 => uint256) public balanceOf;\n\n  /**\n    @notice\n    The amount of overflow (in the terminal's currency) that a project has used from its allowance during the current funding cycle configuration.\n\n    @dev\n    Increases as projects use their allowance.\n\n    _projectId The ID of the project to get the used overflow allowance of.\n    _configuration The configuration of the during which the allowance applies.\n  */\n  mapping(uint256 => mapping(uint256 => uint256)) public usedOverflowAllowanceOf;\n\n  /**\n    @notice\n    The amount (in the terminal's currency) that a project has distributed from its limit during the current funding cycle.\n\n    @dev\n    Increases as projects use their distribution limit.\n\n    _projectId The ID of the project to get the used distribution limit of.\n    _number The number representing the funding cycle.\n  */\n  mapping(uint256 => mapping(uint256 => uint256)) public usedDistributionLimitOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Gets the current overflowed amount (in the terminal's currency) in this terminal for a specified project.\n\n    @param _projectId The ID of the project to get overflow for.\n\n    @return The current amount of overflow that project has in this terminal.\n  */\n  function currentOverflowOf(uint256 _projectId) external view returns (uint256) {\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    return _overflowDuring(_projectId, _fundingCycle);\n  }\n\n  /**\n    @notice\n    Gets the current overflowed amount (in the terminal's currency) for a specified project across all terminals.\n\n    @param _projectId The ID of the project to get total overflow for.\n\n    @return The current total amount of overflow that project has across all terminals.\n  */\n  function currentTotalOverflowOf(uint256 _projectId) external view returns (uint256) {\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    return _totalOverflowDuring(_projectId, _fundingCycle);\n  }\n\n  /**\n    @notice\n    The amount of overflowed ETH that can be claimed by the specified number of tokens.\n\n    @dev If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\n\n    @param _projectId The ID of the project to get a claimable amount for.\n    @param _tokenCount The number of tokens to make the calculation with.\n\n    @return The amount of overflowed ETH that can be claimed.\n  */\n  function claimableOverflowOf(uint256 _projectId, uint256 _tokenCount)\n    external\n    view\n    returns (uint256)\n  {\n    return _claimableOverflowOf(_projectId, fundingCycleStore.currentOf(_projectId), _tokenCount);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _prices A contract that exposes price feeds.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\n    @param _tokenStore A contract that manages token minting and burning.\n  */\n  constructor(\n    IJBPrices _prices,\n    IJBProjects _projects,\n    IJBDirectory _directory,\n    IJBFundingCycleStore _fundingCycleStore,\n    IJBTokenStore _tokenStore\n  ) {\n    prices = _prices;\n    projects = _projects;\n    directory = _directory;\n    fundingCycleStore = _fundingCycleStore;\n    tokenStore = _tokenStore;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Records newly contributed ETH to a project.\n\n    @dev\n    Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.\n\n    @dev\n    Only the associated payment terminal can record a payment.\n\n    @param _payer The original address that sent the payment to the terminal.\n    @param _amount The amount that is being paid in wei.\n    @param _projectId The ID of the project being paid.\n    @param _preferClaimedTokensAndBeneficiary Two properties are included in this packed uint256:\n      The first bit contains the flag indicating whether the request prefers to issue tokens claimed as ERC-20s.\n      The remaining bits contains the address that should receive benefits from the payment.\n\n      This design is necessary two prevent a \"Stack too deep\" compiler error that comes up if the variables are declared seperately.\n    @param _minReturnedTokens The minimum number of tokens expected to be minted in return.\n    @param _memo A memo that will be included in the published event.\n    @param _delegateMetadata Bytes to send along to the delegate, if one is used.\n\n    @return fundingCycle The project's funding cycle during which payment was made.\n    @return weight The weight according to which new token supply was minted.\n    @return tokenCount The number of tokens that were minted.\n    @return memo A memo that should be passed along to the emitted event.\n  */\n  function recordPaymentFrom(\n    address _payer,\n    uint256 _amount,\n    uint256 _projectId,\n    uint256 _preferClaimedTokensAndBeneficiary,\n    uint256 _minReturnedTokens,\n    string memory _memo,\n    bytes memory _delegateMetadata\n  )\n    external\n    onlyAssociatedPaymentTerminal\n    returns (\n      JBFundingCycle memory fundingCycle,\n      uint256 weight,\n      uint256 tokenCount,\n      string memory memo\n    )\n  {\n    // Get a reference to the current funding cycle for the project.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // The project must have a funding cycle configured.\n    if (fundingCycle.number == 0) {\n      revert INVALID_FUNDING_CYCLE();\n    }\n\n    // Must not be paused.\n    if (fundingCycle.payPaused()) {\n      revert FUNDING_CYCLE_PAYMENT_PAUSED();\n    }\n\n    // Save a reference to the delegate to use.\n    IJBPayDelegate _delegate;\n\n    // If the funding cycle has configured a data source, use it to derive a weight and memo.\n    if (fundingCycle.useDataSourceForPay()) {\n      (weight, memo, _delegate, _delegateMetadata) = fundingCycle.dataSource().payParams(\n        JBPayParamsData(\n          _payer,\n          _amount,\n          _projectId,\n          fundingCycle.weight,\n          fundingCycle.reservedRate(),\n          address(uint160(_preferClaimedTokensAndBeneficiary >> 1)),\n          _memo,\n          _delegateMetadata\n        )\n      );\n      // Otherwise use the funding cycle's weight\n    } else {\n      weight = fundingCycle.weight;\n      memo = _memo;\n    }\n\n    // Multiply the amount by the weight to determine the amount of tokens to mint.\n    uint256 _weightedAmount = PRBMathUD60x18.mul(_amount, weight);\n\n    // Add the amount to the ETH balance of the project if needed.\n    if (_amount > 0) balanceOf[_projectId] = balanceOf[_projectId] + _amount;\n\n    if (_weightedAmount > 0)\n      tokenCount = directory.controllerOf(_projectId).mintTokensOf(\n        _projectId,\n        _weightedAmount,\n        address(uint160(_preferClaimedTokensAndBeneficiary >> 1)),\n        'ETH received',\n        (_preferClaimedTokensAndBeneficiary & 1) == 1,\n        fundingCycle.reservedRate()\n      );\n\n    // The token count for the beneficiary must be greater than or equal to the minimum expected.\n    if (tokenCount < _minReturnedTokens) {\n      revert INADEQUATE_TOKEN_COUNT();\n    }\n\n    // If a delegate was returned by the data source, issue a callback to it.\n    if (_delegate != IJBPayDelegate(address(0))) {\n      JBDidPayData memory _data = JBDidPayData(\n        _payer,\n        _projectId,\n        _amount,\n        weight,\n        tokenCount,\n        payable(address(uint160(_preferClaimedTokensAndBeneficiary >> 1))),\n        memo,\n        _delegateMetadata\n      );\n      _delegate.didPay(_data);\n      emit DelegateDidPay(_delegate, _data);\n    }\n  }\n\n  /**\n    @notice\n    Records newly distributed funds for a project.\n\n    @dev\n    Only the associated payment terminal can record a distribution.\n\n    @param _projectId The ID of the project that is having funds distributed.\n    @param _amount The amount being distributed as a fixed point number.\n    @param _currency The expected currency of the `_amount` being tapped. This must match the project's current funding cycle's currency.\n    @param _minReturnedWei The minimum number of wei that should be distributed.\n\n    @return fundingCycle The funding cycle during which the withdrawal was made.\n    @return distributedAmount The amount distribution in wei.\n  */\n  function recordDistributionFor(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    uint256 _minReturnedWei\n  )\n    external\n    onlyAssociatedPaymentTerminal\n    returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount)\n  {\n    // Get a reference to the project's current funding cycle.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // The funding cycle must not be configured to have distributions paused.\n    if (fundingCycle.distributionsPaused()) {\n      revert FUNDING_CYCLE_DISTRIBUTION_PAUSED();\n    }\n\n    // Make sure the currencies match.\n    if (\n      _currency !=\n      directory.controllerOf(_projectId).currencyOf(\n        _projectId,\n        fundingCycle.configuration,\n        terminal\n      )\n    ) {\n      revert CURRENCY_MISMATCH();\n    }\n\n    // The new total amount that has been distributed during this funding cycle.\n    uint256 _newUsedDistributionLimitOf = usedDistributionLimitOf[_projectId][fundingCycle.number] +\n      _amount;\n\n    // Amount must be within what is still distributable.\n    if (\n      _newUsedDistributionLimitOf >\n      directory.controllerOf(_projectId).distributionLimitOf(\n        _projectId,\n        fundingCycle.configuration,\n        terminal\n      )\n    ) {\n      revert DISTRIBUTION_AMOUNT_LIMIT_REACHED();\n    }\n\n    // Convert the amount to wei.\n    distributedAmount = (_currency == JBCurrencies.ETH)\n      ? _amount\n      : PRBMathUD60x18.div(_amount, prices.priceFor(_currency, JBCurrencies.ETH));\n\n    // The amount being distributed must be available.\n    if (distributedAmount > balanceOf[_projectId]) {\n      revert INSUFFICIENT_FUND_FOR_DISTRIBUTION();\n    }\n\n    // The amount being distributed must be at least as much as was expected.\n    if (_minReturnedWei > distributedAmount) {\n      revert INSUFFICIENT_FUND_FOR_DISTRIBUTION();\n    }\n\n    // Store the new amount.\n    usedDistributionLimitOf[_projectId][fundingCycle.number] = _newUsedDistributionLimitOf;\n\n    // Removed the distributed funds from the project's ETH balance.\n    balanceOf[_projectId] = balanceOf[_projectId] - distributedAmount;\n  }\n\n  /**\n    @notice\n    Records newly used allowance funds of a project.\n\n    @param _projectId The ID of the project to use the allowance of.\n    @param _amount The amount of the allowance to use as a fixed point number.\n    @param _currency The currency of the `_amount` value. Must match the funding cycle's currency.\n    @param _minReturnedWei The amount of wei that is expected to be withdrawn.\n\n    @return fundingCycle The funding cycle during which the withdrawal is being made.\n    @return withdrawnAmount The amount withdrawn in wei.\n  */\n  function recordUsedAllowanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    uint256 _minReturnedWei\n  )\n    external\n    onlyAssociatedPaymentTerminal\n    returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount)\n  {\n    // Get a reference to the project's current funding cycle.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Make sure the currencies match.\n    if (\n      _currency !=\n      directory.controllerOf(_projectId).currencyOf(\n        _projectId,\n        fundingCycle.configuration,\n        terminal\n      )\n    ) {\n      revert CURRENCY_MISMATCH();\n    }\n\n    uint256 _newUsedOverflowAllowanceOf = usedOverflowAllowanceOf[_projectId][\n      fundingCycle.configuration\n    ] + _amount;\n\n    // There must be sufficient allowance available.\n    if (\n      _newUsedOverflowAllowanceOf >\n      directory.controllerOf(_projectId).overflowAllowanceOf(\n        _projectId,\n        fundingCycle.configuration,\n        terminal\n      )\n    ) {\n      revert INADEQUATE_CONTROLLER_ALLOWANCE();\n    }\n\n    // Convert the amount to wei.\n    withdrawnAmount = (_currency == JBCurrencies.ETH)\n      ? _amount\n      : PRBMathUD60x18.div(_amount, prices.priceFor(_currency, JBCurrencies.ETH));\n\n    // The amount being withdrawn must be available.\n    if (withdrawnAmount > balanceOf[_projectId]) {\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\n    }\n\n    // The amount being withdrawn must be at least as much as was expected.\n    if (_minReturnedWei > withdrawnAmount) {\n      revert INADEQUATE_DISTRIBUTION_AMOUNT();\n    }\n\n    // Store the incremented value.\n    usedOverflowAllowanceOf[_projectId][fundingCycle.configuration] = _newUsedOverflowAllowanceOf;\n\n    // Update the project's ETH balance.\n    balanceOf[_projectId] = balanceOf[_projectId] - withdrawnAmount;\n  }\n\n  /**\n    @notice\n    Records newly redeemed tokens of a project.\n\n    @dev\n    Only the associated payment terminal can record a redemption.\n\n    @param _holder The account that is having its tokens redeemed.\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\n    @param _tokenCount The number of tokens to redeemed.\n    @param _minReturnedWei The minimum amount of wei expected in return.\n    @param _beneficiary The address that will benefit from the claimed amount.\n    @param _memo A memo to pass along to the emitted event.\n    @param _delegateMetadata Bytes to send along to the delegate, if one is used.\n\n    @return fundingCycle The funding cycle during which the redemption was made.\n    @return claimAmount The amount of wei claimed.\n    @return memo A memo that should be passed along to the emitted event.\n  */\n  function recordRedemptionFor(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    uint256 _minReturnedWei,\n    address payable _beneficiary,\n    string memory _memo,\n    bytes memory _delegateMetadata\n  )\n    external\n    onlyAssociatedPaymentTerminal\n    returns (\n      JBFundingCycle memory fundingCycle,\n      uint256 claimAmount,\n      string memory memo\n    )\n  {\n    // There must be some amount of tokens to record redemption for.\n    if (_tokenCount == 0) {\n      revert TOKEN_AMOUNT_ZERO();\n    }\n\n    // The holder must have the specified number of the project's tokens.\n    if (tokenStore.balanceOf(_holder, _projectId) < _tokenCount) {\n      revert INSUFFICIENT_TOKENS();\n    }\n\n    // Get a reference to the project's current funding cycle.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // The current funding cycle must not be paused.\n    if (fundingCycle.redeemPaused()) {\n      revert FUNDING_CYCLE_REDEEM_PAUSED();\n    }\n\n    // Save a reference to the delegate to use.\n    IJBRedemptionDelegate _delegate;\n\n    // If the funding cycle has configured a data source, use it to derive a claim amount and memo.\n    if (fundingCycle.useDataSourceForRedeem()) {\n      (claimAmount, memo, _delegate, _delegateMetadata) = fundingCycle.dataSource().redeemParams(\n        JBRedeemParamsData(\n          _holder,\n          _tokenCount,\n          _projectId,\n          fundingCycle.redemptionRate(),\n          fundingCycle.ballotRedemptionRate(),\n          _beneficiary,\n          _memo,\n          _delegateMetadata\n        )\n      );\n    } else {\n      claimAmount = _claimableOverflowOf(_projectId, fundingCycle, _tokenCount);\n      memo = _memo;\n    }\n\n    // There must be something to claim.\n    if (claimAmount == 0) {\n      revert NO_CLAIMABLE_TOKENS();\n    }\n\n    // The amount being claimed must be within the project's balance.\n    if (claimAmount > balanceOf[_projectId]) {\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\n    }\n    // The amount being claimed must be at least as much as was expected.\n    if (claimAmount < _minReturnedWei) {\n      revert INADEQUATE_RECLAIM_AMOUNT();\n    }\n\n    // Redeem the tokens, which burns them.\n    directory.controllerOf(_projectId).burnTokensOf(\n      _holder,\n      _projectId,\n      _tokenCount,\n      'Redeem for ETH',\n      true\n    );\n\n    // Remove the redeemed funds from the project's balance.\n    balanceOf[_projectId] = balanceOf[_projectId] - claimAmount;\n\n    // If a delegate was returned by the data source, issue a callback to it.\n    if (_delegate != IJBRedemptionDelegate(address(0))) {\n      JBDidRedeemData memory _data = JBDidRedeemData(\n        _holder,\n        _projectId,\n        _tokenCount,\n        claimAmount,\n        _beneficiary,\n        memo,\n        _delegateMetadata\n      );\n      _delegate.didRedeem(_data);\n      emit DelegateDidRedeem(_delegate, _data);\n    }\n  }\n\n  /**\n    @notice\n    Records newly added funds for the project.\n\n    @dev\n    Only the associated payment terminal can record an added balance.\n\n    @param _projectId The ID of the project to which the funds being added belong.\n    @param _amount The amount added, in wei.\n\n    @return fundingCycle The current funding cycle for the project.\n  */\n  function recordAddedBalanceFor(uint256 _projectId, uint256 _amount)\n    external\n    onlyAssociatedPaymentTerminal\n    returns (JBFundingCycle memory fundingCycle)\n  {\n    // Get a reference to the project's current funding cycle.\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Increment the balance.\n    balanceOf[_projectId] = balanceOf[_projectId] + _amount;\n  }\n\n  /**\n    @notice\n    Records the migration of this terminal to another.\n\n    @param _projectId The ID of the project being migrated.\n\n    @return balance The project's current balance.\n  */\n  function recordMigration(uint256 _projectId)\n    external\n    onlyAssociatedPaymentTerminal\n    returns (uint256 balance)\n  {\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Migration must be allowed\n    if (!_fundingCycle.terminalMigrationAllowed()) {\n      revert PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\n    }\n\n    // Return the current balance.\n    balance = balanceOf[_projectId];\n\n    // Set the balance to 0.\n    balanceOf[_projectId] = 0;\n  }\n\n  /**\n    @notice\n    Allows this store to be claimed by an address so that it recognized the address as its terminal.\n  */\n  function claimFor(IJBPaymentTerminal _terminal) external {\n    // This store can only be claimed once.\n    if (terminal != IJBPaymentTerminal(address(0))) {\n      revert STORE_ALREADY_CLAIMED();\n    }\n    // Set the terminal.\n    terminal = _terminal;\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    See docs for `claimableOverflowOf`\n  */\n  function _claimableOverflowOf(\n    uint256 _projectId,\n    JBFundingCycle memory _fundingCycle,\n    uint256 _tokenCount\n  ) private view returns (uint256) {\n    // Get the amount of current overflow.\n    // Use the local overflow if the funding cycle specifies that it should be used. Otherwise use the project's total overflow across all of its terminals.\n    uint256 _currentOverflow = _fundingCycle.shouldUseLocalBalanceForRedemptions()\n      ? _overflowDuring(_projectId, _fundingCycle)\n      : _totalOverflowDuring(_projectId, _fundingCycle);\n\n    // If there is no overflow, nothing is claimable.\n    if (_currentOverflow == 0) return 0;\n\n    // Get the total number of tokens in circulation.\n    uint256 _totalSupply = tokenStore.totalSupplyOf(_projectId);\n\n    // Get the number of reserved tokens the project has.\n    uint256 _reservedTokenAmount = directory.controllerOf(_projectId).reservedTokenBalanceOf(\n      _projectId,\n      _fundingCycle.reservedRate()\n    );\n\n    // If there are reserved tokens, add them to the total supply.\n    if (_reservedTokenAmount > 0) _totalSupply = _totalSupply + _reservedTokenAmount;\n\n    // If the amount being redeemed is the total supply, return the rest of the overflow.\n    if (_tokenCount == _totalSupply) return _currentOverflow;\n\n    // Use the ballot redemption rate if the queued cycle is pending approval according to the previous funding cycle's ballot.\n    uint256 _redemptionRate = fundingCycleStore.currentBallotStateOf(_projectId) ==\n      JBBallotState.Active\n      ? _fundingCycle.ballotRedemptionRate()\n      : _fundingCycle.redemptionRate();\n\n    // If the redemption rate is 0, nothing is claimable.\n    if (_redemptionRate == 0) return 0;\n\n    // Get a reference to the linear proportion.\n    uint256 _base = PRBMath.mulDiv(_currentOverflow, _tokenCount, _totalSupply);\n\n    // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.\n    if (_redemptionRate == JBConstants.MAX_REDEMPTION_RATE) return _base;\n    return\n      PRBMath.mulDiv(\n        _base,\n        _redemptionRate +\n          PRBMath.mulDiv(\n            _tokenCount,\n            JBConstants.MAX_REDEMPTION_RATE - _redemptionRate,\n            _totalSupply\n          ),\n        JBConstants.MAX_REDEMPTION_RATE\n      );\n  }\n\n  /**\n    @notice\n    Gets the amount that is overflowing when measured from the specified funding cycle.\n\n    @dev\n    This amount changes as the price of ETH changes in relation to the currency being used to measure the distribution limit.\n\n    @param _projectId The ID of the project to get overflow for.\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\n\n    @return overflow The overflow of funds.\n  */\n  function _overflowDuring(uint256 _projectId, JBFundingCycle memory _fundingCycle)\n    private\n    view\n    returns (uint256)\n  {\n    // Get the current balance of the project.\n    uint256 _balanceOf = balanceOf[_projectId];\n\n    // If there's no balance, there's no overflow.\n    if (_balanceOf == 0) return 0;\n\n    // Get a reference to the amount still withdrawable during the funding cycle.\n    uint256 _distributionRemaining = directory.controllerOf(_projectId).distributionLimitOf(\n      _projectId,\n      _fundingCycle.configuration,\n      terminal\n    ) - usedDistributionLimitOf[_projectId][_fundingCycle.number];\n\n    // Get a reference to the current funding cycle's currency for this terminal.\n    uint256 _currency = directory.controllerOf(_projectId).currencyOf(\n      _projectId,\n      _fundingCycle.configuration,\n      terminal\n    );\n\n    // Convert the _distributionRemaining to ETH.\n    uint256 _ethDistributionRemaining = _distributionRemaining == 0\n      ? 0\n      : (_currency == JBCurrencies.ETH)\n      ? _distributionRemaining\n      : PRBMathUD60x18.div(_distributionRemaining, prices.priceFor(_currency, JBCurrencies.ETH));\n\n    // Overflow is the balance of this project minus the amount that can still be distributed.\n    return _balanceOf <= _ethDistributionRemaining ? 0 : _balanceOf - _ethDistributionRemaining;\n  }\n\n  /**\n    @notice\n    Gets the amount that is overflowing across all terminals when measured from the specified funding cycle.\n\n    @dev\n    This amount changes as the price of ETH changes in relation to the currency being used to measure the distribution limits.\n\n    @param _projectId The ID of the project to get total overflow for.\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\n\n    @return overflow The overflow of funds.\n  */\n  function _totalOverflowDuring(uint256 _projectId, JBFundingCycle memory _fundingCycle)\n    private\n    view\n    returns (uint256)\n  {\n    // Get a reference to the project's terminals.\n    IJBPaymentTerminal[] memory _terminals = directory.terminalsOf(_projectId);\n\n    // Keep a reference to the current eth balance of the project across all terminals, and the current eth distribution limit across all terminals.\n    uint256 _ethBalanceOf;\n    uint256 _ethDistributionLimitRemaining;\n\n    for (uint256 _i = 0; _i < _terminals.length; _i++) {\n      _ethBalanceOf = _ethBalanceOf + _terminals[_i].ethBalanceOf(_projectId);\n\n      // Get a reference to the amount still withdrawable during the funding cycle.\n      uint256 _distributionRemaining = _terminals[_i].remainingDistributionLimitOf(\n        _projectId,\n        _fundingCycle.configuration,\n        _fundingCycle.number\n      );\n\n      // Get a reference to the current funding cycle's currency for this terminal.\n      uint256 _currency = directory.controllerOf(_projectId).currencyOf(\n        _projectId,\n        _fundingCycle.configuration,\n        _terminals[_i]\n      );\n\n      // Convert the _distributionRemaining to ETH.\n      _ethDistributionLimitRemaining =\n        _ethDistributionLimitRemaining +\n        (\n          _distributionRemaining == 0 ? 0 : (_currency == JBCurrencies.ETH)\n            ? _distributionRemaining\n            : PRBMathUD60x18.div(\n              _distributionRemaining,\n              prices.priceFor(_currency, JBCurrencies.ETH)\n            )\n        );\n    }\n\n    // Overflow is the balance of this project minus the amount that can still be distributed.\n    return\n      _ethBalanceOf <= _ethDistributionLimitRemaining\n        ? 0\n        : _ethBalanceOf - _ethDistributionLimitRemaining;\n  }\n}\n"
    },
    "@paulrberg/contracts/math/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.4;\n\nimport \"prb-math/contracts/PRBMathUD60x18.sol\";\n"
    },
    "@paulrberg/contracts/math/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.4;\n\nimport \"prb-math/contracts/PRBMath.sol\";\n"
    },
    "contracts/interfaces/IJBPrices.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\n\ninterface IJBPrices {\n  event AddFeed(uint256 indexed currency, uint256 indexed base, AggregatorV3Interface feed);\n\n  function TARGET_DECIMALS() external returns (uint256);\n\n  function feedFor(uint256 _currency, uint256 _base) external returns (AggregatorV3Interface);\n\n  function priceFor(uint256 _currency, uint256 _base) external view returns (uint256);\n\n  function addFeedFor(\n    uint256 _currency,\n    uint256 _base,\n    AggregatorV3Interface _priceFeed\n  ) external;\n}\n"
    },
    "contracts/libraries/JBConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n/**\n  @notice\n  Global constants used across multiple Juicebox contracts.\n*/\nlibrary JBConstants {\n  /** \n    @notice\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\n  */\n  uint256 public constant MAX_RESERVED_RATE = 10000;\n\n  /**\n    @notice\n    Maximum token redemption rate to apply when there is an active ballot.\n   */\n  uint256 public constant MAX_BALLOT_REDEMPTION_RATE = 10000;\n\n  /**\n    @notice\n    Maximum token redemption rate.  \n    */\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\n\n  /** \n    @notice\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\n  */\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\n\n  /** \n    @notice\n    Maximum splits percentage.\n  */\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\n}\n"
    },
    "contracts/libraries/JBCurrencies.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBCurrencies {\n  uint256 public constant ETH = 1;\n  uint256 public constant USD = 2;\n}\n"
    },
    "contracts/libraries/JBSplitsGroups.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBSplitsGroups {\n  uint256 public constant ETH_PAYOUT = 1;\n  uint256 public constant RESERVED_TOKENS = 2;\n}\n"
    },
    "contracts/libraries/JBFundingCycleMetadataResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './JBConstants.sol';\nimport './../interfaces/IJBFundingCycleStore.sol';\nimport './../interfaces/IJBFundingCycleDataSource.sol';\nimport './../structs/JBFundingCycleMetadata.sol';\n\nlibrary JBFundingCycleMetadataResolver {\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\n    return uint256(uint16(_fundingCycle.metadata >> 8));\n  }\n\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 24));\n  }\n\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (uint256)\n  {\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\n    return JBConstants.MAX_BALLOT_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 40));\n  }\n\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 56) & 1) == 1;\n  }\n\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 57) & 1) == 1;\n  }\n\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 58) & 1) == 1;\n  }\n\n  function mintPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 59) & 1) == 1;\n  }\n\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 60) & 1) == 1;\n  }\n\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 61) & 1) == 1;\n  }\n\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (bool)\n  {\n    return ((_fundingCycle.metadata >> 62) & 1) == 1;\n  }\n\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (bool)\n  {\n    return ((_fundingCycle.metadata >> 63) & 1) == 1;\n  }\n\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return ((_fundingCycle.metadata >> 64) & 1) == 1;\n  }\n\n  function shouldUseLocalBalanceForRedemptions(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (bool)\n  {\n    return ((_fundingCycle.metadata >> 65) & 1) == 1;\n  }\n\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\n    return (_fundingCycle.metadata >> 66) & 1 == 1;\n  }\n\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (bool)\n  {\n    return (_fundingCycle.metadata >> 67) & 1 == 1;\n  }\n\n  function dataSource(JBFundingCycle memory _fundingCycle)\n    internal\n    pure\n    returns (IJBFundingCycleDataSource)\n  {\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 68)));\n  }\n\n  /**\n    @notice\n    Pack the funding cycle metadata.\n\n    @param _metadata The metadata to validate and pack.\n\n    @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\n  */\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\n    internal\n    pure\n    returns (uint256 packed)\n  {\n    // version 1 in the bits 0-7 (8 bits).\n    packed = 1;\n    // reserved rate in bits 8-23 (16 bits).\n    packed |= _metadata.reservedRate << 8;\n    // redemption rate in bits 24-39 (16 bits).\n    // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) << 24;\n    // ballot redemption rate rate in bits 40-55 (16 bits).\n    // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\n    packed |= (JBConstants.MAX_BALLOT_REDEMPTION_RATE - _metadata.ballotRedemptionRate) << 40;\n    // pause pay in bit 56.\n    if (_metadata.pausePay) packed |= 1 << 56;\n    // pause tap in bit 57.\n    if (_metadata.pauseDistributions) packed |= 1 << 57;\n    // pause redeem in bit 58.\n    if (_metadata.pauseRedeem) packed |= 1 << 58;\n    // pause mint in bit 59.\n    if (_metadata.pauseMint) packed |= 1 << 59;\n    // pause mint in bit 60.\n    if (_metadata.pauseBurn) packed |= 1 << 60;\n    // pause change token in bit 61.\n    if (_metadata.allowChangeToken) packed |= 1 << 61;\n    // allow terminal migration in bit 62.\n    if (_metadata.allowTerminalMigration) packed |= 1 << 62;\n    // allow controller migration in bit 63.\n    if (_metadata.allowControllerMigration) packed |= 1 << 63;\n    // hold fees in bit 64.\n    if (_metadata.holdFees) packed |= 1 << 64;\n    // useLocalBalanceForRedemptions in bit 65.\n    if (_metadata.useLocalBalanceForRedemptions) packed |= 1 << 65;\n    // use pay data source in bit 66.\n    if (_metadata.useDataSourceForPay) packed |= 1 << 66;\n    // use redeem data source in bit 67.\n    if (_metadata.useDataSourceForRedeem) packed |= 1 << 67;\n    // data source address in bits 68-227.\n    packed |= uint256(uint160(address(_metadata.dataSource))) << 68;\n  }\n}\n"
    },
    "prb-math/contracts/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary PRBMathUD60x18 {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding towards zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "prb-math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculting the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculting the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the closest power of two that is higher than x.\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/interfaces/IJBFundingCycleDataSource.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBFundingCycleStore.sol';\n\nimport './IJBPayDelegate.sol';\nimport './IJBRedemptionDelegate.sol';\n\nimport './../structs/JBPayParamsData.sol';\nimport './../structs/JBRedeemParamsData.sol';\n\ninterface IJBFundingCycleDataSource {\n  function payParams(JBPayParamsData calldata _param)\n    external\n    view\n    returns (\n      uint256 weight,\n      string memory memo,\n      IJBPayDelegate delegate,\n      bytes memory delegateMetadata\n    );\n\n  function redeemParams(JBRedeemParamsData calldata _param)\n    external\n    view\n    returns (\n      uint256 amount,\n      string memory memo,\n      IJBRedemptionDelegate delegate,\n      bytes memory delegateMetadata\n    );\n}\n"
    },
    "contracts/structs/JBFundingCycleMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBFundingCycleDataSource.sol';\n\nstruct JBFundingCycleMetadata {\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of 10000.\n  uint256 reservedRate;\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of 10000.\n  uint256 redemptionRate;\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of 10000.\n  uint256 ballotRedemptionRate;\n  // If the pay functionality should be paused during the funding cycle.\n  bool pausePay;\n  // If the distribute functionality should be paused during the funding cycle.\n  bool pauseDistributions;\n  // If the redeem functionality should be paused during the funding cycle.\n  bool pauseRedeem;\n  // If the mint functionality should be paused during the funding cycle.\n  bool pauseMint;\n  // If the burn functionality should be paused during the funding cycle.\n  bool pauseBurn;\n  // If changing tokens should be allowed during this funding cycle.\n  bool allowChangeToken;\n  // If migrating terminals should be allowed during this funding cycle.\n  bool allowTerminalMigration;\n  // If migrating controllers should be allowed during this funding cycle.\n  bool allowControllerMigration;\n  // If fees should be held during this funding cycle.\n  bool holdFees;\n  // If redemptions should use the project's local terminal balance instead of the project's balance held in all terminals.\n  bool useLocalBalanceForRedemptions;\n  // If the data source should be used for pay transactions during this funding cycle.\n  bool useDataSourceForPay;\n  // If the data source should be used for redeem transactions during this funding cycle.\n  bool useDataSourceForRedeem;\n  // The data source to use during this funding cycle.\n  IJBFundingCycleDataSource dataSource;\n}\n"
    },
    "contracts/interfaces/IJBPayDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../structs/JBDidPayData.sol';\n\ninterface IJBPayDelegate {\n  function didPay(JBDidPayData calldata _param) external;\n}\n"
    },
    "contracts/interfaces/IJBRedemptionDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBFundingCycleStore.sol';\n\nimport './../structs/JBDidRedeemData.sol';\n\ninterface IJBRedemptionDelegate {\n  function didRedeem(JBDidRedeemData calldata _param) external;\n}\n"
    },
    "contracts/structs/JBPayParamsData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nstruct JBPayParamsData {\n  // The address from which the payment originated.\n  address payer;\n  // The ETH amount of the payment.\n  uint256 amount;\n  // The ID of the project being paid.\n  uint256 projectId;\n  // The weight of the funding cycle during which the payment is being made.\n  uint256 weight;\n  // The reserved rate of the funding cycle during which the payment is being made.\n  uint256 reservedRate;\n  // The proposed beneficiary of the tokens that will be minted as a result of the tokens.\n  address beneficiary;\n  // The proposed memo that is being emitted alongside the payment.\n  string memo;\n  // The proposed metadata to send to the delegate.\n  bytes delegateMetadata;\n}\n"
    },
    "contracts/structs/JBRedeemParamsData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nstruct JBRedeemParamsData {\n  // The holder of the tokens being redeemed.\n  address holder;\n  // The proposed number of tokens being redeemed.\n  uint256 tokenCount;\n  // The ID of the project whos tokens are being redeemed.\n  uint256 projectId;\n  // The redemption rate of the funding cycle during which the redemption is being made.\n  uint256 redemptionRate;\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\n  uint256 ballotRedemptionRate;\n  // The proposed beneficiary of the ETH being claimed by making the redemption.\n  address beneficiary;\n  // The proposed memo that is being emitted alongside the redemption.\n  string memo;\n  // The proposed metadata to send to the delegate.\n  bytes delegateMetadata;\n}\n"
    },
    "contracts/structs/JBDidPayData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nstruct JBDidPayData {\n  // The address from which the payment originated.\n  address payer;\n  // The ID of the project for which the payment was made.\n  uint256 projectId;\n  // The amount of ETH that was paid.\n  uint256 amount;\n  // The weight that was used for minting tokens.\n  uint256 weight;\n  // The number of tokens minted.\n  uint256 tokenCount;\n  // The address to which the tokens were minted.\n  address beneficiary;\n  // The memo that is being emitted alongside the payment.\n  string memo;\n  // Metadata to send to the delegate.\n  bytes delegateMetadata;\n}\n"
    },
    "contracts/structs/JBDidRedeemData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nstruct JBDidRedeemData {\n  // The holder of the tokens being redeemed.\n  address holder;\n  // The project to which the redeemed tokens are associated.\n  uint256 projectId;\n  // The number of tokens being redeemed.\n  uint256 tokenCount;\n  // The amount of ETH being claimed.\n  uint256 claimAmount;\n  // The address to which the ETH will be sent.\n  address payable beneficiary;\n  // The memo that is being emitted alongside the redemption.\n  string memo;\n  // Metadata to send to the delegate.\n  bytes metadata;\n}\n"
    },
    "contracts/test/JBFakeFundingCycleMetadataResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '../libraries/JBFundingCycleMetadataResolver.sol';\n\n/**\n  @dev\n  Fake contract used for testing internal JBFundingCycleMetadataResolver lib methods\n*/\ncontract JBFakeFundingCycleMetadataResolver {\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\n    external\n    pure\n    returns (uint256)\n  {\n    return JBFundingCycleMetadataResolver.packFundingCycleMetadata(_metadata);\n  }\n\n  function reservedRate(JBFundingCycle memory _fundingCycle) external pure returns (uint256) {\n    return JBFundingCycleMetadataResolver.reservedRate(_fundingCycle);\n  }\n\n  function redemptionRate(JBFundingCycle memory _fundingCycle) external pure returns (uint256) {\n    return JBFundingCycleMetadataResolver.redemptionRate(_fundingCycle);\n  }\n\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\n    external\n    pure\n    returns (uint256)\n  {\n    return JBFundingCycleMetadataResolver.ballotRedemptionRate(_fundingCycle);\n  }\n\n  function payPaused(JBFundingCycle memory _fundingCycle) external pure returns (bool) {\n    return JBFundingCycleMetadataResolver.payPaused(_fundingCycle);\n  }\n\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) external pure returns (bool) {\n    return JBFundingCycleMetadataResolver.distributionsPaused(_fundingCycle);\n  }\n\n  function redeemPaused(JBFundingCycle memory _fundingCycle) external pure returns (bool) {\n    return JBFundingCycleMetadataResolver.redeemPaused(_fundingCycle);\n  }\n\n  function mintPaused(JBFundingCycle memory _fundingCycle) external pure returns (bool) {\n    return JBFundingCycleMetadataResolver.mintPaused(_fundingCycle);\n  }\n\n  function burnPaused(JBFundingCycle memory _fundingCycle) external pure returns (bool) {\n    return JBFundingCycleMetadataResolver.burnPaused(_fundingCycle);\n  }\n\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) external pure returns (bool) {\n    return JBFundingCycleMetadataResolver.changeTokenAllowed(_fundingCycle);\n  }\n\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\n    external\n    pure\n    returns (bool)\n  {\n    return JBFundingCycleMetadataResolver.terminalMigrationAllowed(_fundingCycle);\n  }\n\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\n    external\n    pure\n    returns (bool)\n  {\n    return JBFundingCycleMetadataResolver.controllerMigrationAllowed(_fundingCycle);\n  }\n\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) external pure returns (bool) {\n    return JBFundingCycleMetadataResolver.shouldHoldFees(_fundingCycle);\n  }\n\n  function shouldUseLocalBalanceForRedemptions(JBFundingCycle memory _fundingCycle)\n    external\n    pure\n    returns (bool)\n  {\n    return JBFundingCycleMetadataResolver.shouldUseLocalBalanceForRedemptions(_fundingCycle);\n  }\n\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) external pure returns (bool) {\n    return JBFundingCycleMetadataResolver.useDataSourceForPay(_fundingCycle);\n  }\n\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\n    external\n    pure\n    returns (bool)\n  {\n    return JBFundingCycleMetadataResolver.useDataSourceForRedeem(_fundingCycle);\n  }\n\n  function dataSource(JBFundingCycle memory _fundingCycle)\n    external\n    pure\n    returns (IJBFundingCycleDataSource)\n  {\n    return JBFundingCycleMetadataResolver.dataSource(_fundingCycle);\n  }\n}\n"
    },
    "contracts/JBController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@paulrberg/contracts/math/PRBMath.sol';\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\n\nimport './libraries/JBConstants.sol';\nimport './libraries/JBOperations.sol';\nimport './libraries/JBSplitsGroups.sol';\nimport './libraries/JBFundingCycleMetadataResolver.sol';\n\nimport './interfaces/IJBTokenStore.sol';\nimport './interfaces/IJBProjects.sol';\nimport './interfaces/IJBSplitsStore.sol';\nimport './interfaces/IJBPaymentTerminal.sol';\nimport './interfaces/IJBOperatorStore.sol';\nimport './interfaces/IJBFundingCycleDataSource.sol';\nimport './interfaces/IJBPrices.sol';\nimport './interfaces/IJBController.sol';\n\nimport './structs/JBFundingCycleData.sol';\nimport './structs/JBFundingCycleMetadata.sol';\nimport './structs/JBFundAccessConstraints.sol';\nimport './structs/JBGroupedSplits.sol';\nimport './structs/JBProjectMetadata.sol';\n\n// Inheritance\nimport './interfaces/IJBController.sol';\nimport './abstract/JBOperatable.sol';\nimport './abstract/JBTerminalUtility.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\nerror NOT_CURRENT_CONTROLLER();\nerror CANT_MIGRATE_TO_CURRENT_CONTROLLER();\nerror CHANGE_TOKEN_NOT_ALLOWED();\nerror INVALID_BALLOT_REDEMPTION_RATE();\nerror INVALID_RESERVED_RATE();\nerror INVALID_RESERVED_RATE_AND_BENEFICIARY_ZERO_ADDRESS();\nerror INVALID_REDEMPTION_RATE();\nerror MIGRATION_NOT_ALLOWED();\nerror MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE();\nerror NO_BURNABLE_TOKENS();\nerror ZERO_TOKENS_TO_MINT();\n\n/**\n  @notice\n  Stitches together funding cycles and community tokens, making sure all activity is accounted for and correct.\n\n  @dev \n  A project can transfer control from this contract to another allowed controller contract at any time.\n\n  Inherits from:\n\n  IJBController - general interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the protocol's rules.\n  JBTerminalUtility - provides tools for contracts that has functionality that can only be accessed\n  by a project's terminals. \n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\n*/\ncontract JBController is IJBController, JBTerminalUtility, JBOperatable, ReentrancyGuard {\n  // A library that parses the packed funding cycle metadata into a more friendly format.\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\n\n  event SetFundAccessConstraints(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    JBFundAccessConstraints constraints,\n    address caller\n  );\n  event DistributeReservedTokens(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address beneficiary,\n    uint256 count,\n    uint256 beneficiaryTokenCount,\n    string memo,\n    address caller\n  );\n\n  event DistributeToReservedTokenSplit(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    JBSplit split,\n    uint256 count,\n    address caller\n  );\n\n  event MintTokens(\n    address indexed beneficiary,\n    uint256 indexed projectId,\n    uint256 indexed count,\n    string memo,\n    uint256 reservedRate,\n    address caller\n  );\n\n  event BurnTokens(\n    address indexed holder,\n    uint256 indexed projectId,\n    uint256 count,\n    string memo,\n    address caller\n  );\n\n  event Migrate(uint256 indexed projectId, IJBController to, address caller);\n\n  //*********************************************************************//\n  // --------------------- private stored properties ------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    The difference between the processed token tracker of a project and the project's token's total supply is the amount of tokens that\n    still need to have reserves minted against them.\n\n    _projectId The ID of the project to get the tracker of.\n  */\n  mapping(uint256 => int256) private _processedTokenTrackerOf;\n\n  //*********************************************************************//\n  // --------------- public immutable stored properties ---------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The Projects contract which mints ERC-721's that represent project ownership.\n  */\n  IJBProjects public immutable projects;\n\n  /** \n    @notice \n    The contract storing all funding cycle configurations.\n  */\n  IJBFundingCycleStore public immutable fundingCycleStore;\n\n  /** \n    @notice \n    The contract that manages token minting and burning.\n  */\n  IJBTokenStore public immutable tokenStore;\n\n  /** \n    @notice \n    The contract that stores splits for each project.\n  */\n  IJBSplitsStore public immutable splitsStore;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    The amount of overflow that a project is allowed to tap into on-demand throughout configuration.\n\n    _projectId The ID of the project to get the current overflow allowance of.\n    _configuration The configuration of the during which the allowance applies.\n    _terminal The terminal managing the overflow.\n  */\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => uint256)))\n    public\n    override overflowAllowanceOf;\n\n  /**\n    @notice \n    The amount of that a project can withdraw per funding cycle.\n\n    _projectId The ID of the project to get the current distribution limit of.\n    _configuration The configuration during which the distribution limit applies.\n    _terminal The terminal from which distributions are being limited. \n  */\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => uint256)))\n    public\n    override distributionLimitOf;\n\n  /**\n    @notice \n    The currency that overflow allowances and distribution limits are measured in for a particular funding cycle configuration, applied only to the specified terminal.\n\n    _projectId The ID of the project to get the currency of.\n    _configuration The configuration during which the currency applies.\n    _terminal The terminal for which the currency should be used. \n  */\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => uint256)))\n    public\n    override currencyOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Gets the amount of reserved tokens that a project has available to distribute.\n\n    @param _projectId The ID of the project to get a reserved token balance of.\n    @param _reservedRate The reserved rate to use when making the calculation.\n\n    @return The current amount of reserved tokens.\n  */\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return\n      _reservedTokenAmountFrom(\n        _processedTokenTrackerOf[_projectId],\n        _reservedRate,\n        tokenStore.totalSupplyOf(_projectId)\n      );\n  }\n\n  //*********************************************************************//\n  // ---------------------------- constructor -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\n    @param _tokenStore A contract that manages token minting and burning.\n    @param _splitsStore A contract that stores splits for each project.\n  */\n  constructor(\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory,\n    IJBFundingCycleStore _fundingCycleStore,\n    IJBTokenStore _tokenStore,\n    IJBSplitsStore _splitsStore\n  ) JBTerminalUtility(_directory) JBOperatable(_operatorStore) {\n    projects = _projects;\n    fundingCycleStore = _fundingCycleStore;\n    tokenStore = _tokenStore;\n    splitsStore = _splitsStore;\n  }\n\n  //*********************************************************************//\n  // --------------------- external transactions ----------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits.\n\n    @dev\n    Each operation within this transaction can be done in sequence separately.\n\n    @dev\n    Anyone can deploy a project on an owner's behalf.\n\n    @param _owner The address to set as the owner of the project. The project ERC-721 will be owned by this address.\n    @param _handle The project's unique handle. This can be updated any time by the owner of the project.\n    @param _projectMetadata A link to associate with the project within a particular domain. This can be updated any time by the owner of the project.\n    @param _data A JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\n      @dev _data.target The amount that the project wants to payout during a funding cycle. Sent as a wad (18 decimals).\n      @dev _data.currency The currency of the `target`. Send 0 for ETH or 1 for USD.\n      @dev _data.duration The duration of the funding cycle for which the `target` amount is needed. Measured in days. Send 0 for cycles that are reconfigurable at any time.\n      @dev _data.weight The weight of the funding cycle.\n        This number is interpreted as a wad, meaning it has 18 decimal places.\n        The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\n        A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\n        A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\n        A value of 1 X 10^18 means that one token should be minted per ETH received.\n      @dev _data.discountRate A number from 0-1000000000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\n        If it's 0, each funding cycle will have equal weight.\n        If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\n      @dev _data.ballot The ballot contract that will be used to approve subsequent reconfigurations. Must adhere to the IFundingCycleBallot interface.\n    @param _metadata A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\n      @dev _metadata.reservedRate A number from 0-10000 (0-100%) indicating the percentage of each contribution's newly minted tokens that will be reserved for the token splits.\n      @dev _metadata.redemptionRate The rate from 0-10000 (0-100%) that tunes the bonding curve according to which a project's tokens can be redeemed for overflow.\n        The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk\n        where x is _count, o is _currentOverflow, s is _totalSupply, and r is _redemptionRate.\n      @dev _metadata.ballotRedemptionRate The redemption rate to apply when there is an active ballot.\n      @dev _metadata.pausePay Whether or not the pay functionality should be paused during this cycle.\n      @dev _metadata.pauseWithdrawals Whether or not the withdraw functionality should be paused during this cycle.\n      @dev _metadata.pauseRedeem Whether or not the redeem functionality should be paused during this cycle.\n      @dev _metadata.pauseMint Whether or not the mint functionality should be paused during this cycle.\n      @dev _metadata.pauseBurn Whether or not the burn functionality should be paused during this cycle.\n      @dev _metadata.allowTerminalMigration Whether or not the terminal migration functionality should be paused during this cycle.\n      @dev _metadata.allowControllerMigration Whether or not the controller migration functionality should be paused during this cycle.\n      @dev _metadata.holdFees Whether or not fees should be held to be processed at a later time during this cycle.\n      @dev _metadata.useDataSourceForPay Whether or not the data source should be used when processing a payment.\n      @dev _metadata.useDataSourceForRedeem Whether or not the data source should be used when processing a redemption.\n      @dev _metadata.dataSource A contract that exposes data that can be used within pay and redeem transactions. Must adhere to IJBFundingCycleDataSource.\n    @param _mustStartAtOrAfter The time before which the configured funding cycle can't start.\n    @param _groupedSplits An array of splits to set for any number of group.\n    @param _fundAccessConstraints An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.\n    @param _terminals Payment terminals to add for the project.\n\n    @return projectId The ID of the project.\n  */\n  function launchProjectFor(\n    address _owner,\n    bytes32 _handle,\n    JBProjectMetadata calldata _projectMetadata,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\n    IJBPaymentTerminal[] memory _terminals\n  ) external returns (uint256 projectId) {\n    if (_metadata.reservedRate > JBConstants.MAX_RESERVED_RATE) {\n      revert INVALID_RESERVED_RATE();\n    }\n\n    if (_metadata.redemptionRate > JBConstants.MAX_REDEMPTION_RATE) {\n      revert INVALID_REDEMPTION_RATE();\n    }\n\n    if (_metadata.ballotRedemptionRate > JBConstants.MAX_BALLOT_REDEMPTION_RATE) {\n      revert INVALID_BALLOT_REDEMPTION_RATE();\n    }\n\n    // Create the project for into the wallet of the message sender.\n    projectId = projects.createFor(_owner, _handle, _projectMetadata);\n\n    // Set the this contract as the project's controller in the directory.\n    directory.setControllerOf(projectId, this);\n\n    _configure(\n      projectId,\n      _data,\n      _metadata,\n      _mustStartAtOrAfter,\n      _groupedSplits,\n      _fundAccessConstraints\n    );\n\n    // Add the provided terminals to the list of terminals.\n    if (_terminals.length > 0) directory.addTerminalsOf(projectId, _terminals);\n  }\n\n  /**\n    @notice\n    Configures the properties of the current funding cycle if the project hasn't distributed tokens yet, or\n    sets the properties of the proposed funding cycle that will take effect once the current one expires\n    if it is approved by the current funding cycle's ballot.\n\n    @dev\n    Only a project's owner or a designated operator can configure its funding cycles.\n\n    @param _projectId The ID of the project whose funding cycles are being reconfigured.\n    @param _data A JBFundingCycleData data structure that defines the project's funding cycle that will be queued. These properties will remain fixed for the duration of the funding cycle.\n      @dev _data.target The amount that the project wants to payout during a funding cycle. Sent as a wad (18 decimals).\n      @dev _data.currency The currency of the `target`. Send 0 for ETH or 1 for USD.\n      @dev _data.duration The duration of the funding cycle for which the `target` amount is needed. Measured in days. Send 0 for cycles that are reconfigurable at any time.\n      @dev _data.weight The weight of the funding cycle.\n        This number is interpreted as a wad, meaning it has 18 decimal places.\n        The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\n        A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\n        A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\n        A value of 1 X 10^18 means that one token should be minted per ETH received.\n      @dev _data.discountRate A number from 0-1000000000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\n        If it's 0, each funding cycle will have equal weight.\n        If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\n      @dev _data.ballot The ballot contract that will be used to approve subsequent reconfigurations. Must adhere to the IFundingCycleBallot interface.\n    @param _metadata A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\n      @dev _metadata.reservedRate A number from 0-10000 (0-100%) indicating the percentage of each contribution's newly minted tokens that will be reserved for the token splits.\n      @dev _metadata.redemptionRate The rate from 0-10000 (0-100%) that tunes the bonding curve according to which a project's tokens can be redeemed for overflow.\n        The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk\n        where x is _count, o is _currentOverflow, s is _totalSupply, and r is _redemptionRate.\n      @dev _metadata.ballotRedemptionRate The redemption rate to apply when there is an active ballot.\n      @dev _metadata.pausePay Whether or not the pay functionality should be paused during this cycle.\n      @dev _metadata.pauseWithdrawals Whether or not the withdraw functionality should be paused during this cycle.\n      @dev _metadata.pauseRedeem Whether or not the redeem functionality should be paused during this cycle.\n      @dev _metadata.pauseMint Whether or not the mint functionality should be paused during this cycle.\n      @dev _metadata.pauseBurn Whether or not the burn functionality should be paused during this cycle.\n      @dev _metadata.allowTerminalMigration Whether or not the terminal migration functionality should be paused during this cycle.\n      @dev _metadata.allowControllerMigration Whether or not the controller migration functionality should be paused during this cycle.\n      @dev _metadata.holdFees Whether or not fees should be held to be processed at a later time during this cycle.\n      @dev _metadata.useDataSourceForPay Whether or not the data source should be used when processing a payment.\n      @dev _metadata.useDataSourceForRedeem Whether or not the data source should be used when processing a redemption.\n      @dev _metadata.dataSource A contract that exposes data that can be used within pay and redeem transactions. Must adhere to IJBFundingCycleDataSource.\n    @param _mustStartAtOrAfter The time before which the configured funding cycle can't start.\n    @param _groupedSplits An array of splits to set for any number of group.\n    @param _fundAccessConstraints An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.\n\n    @return The configuration of the funding cycle that was successfully reconfigured.\n  */\n  function reconfigureFundingCyclesOf(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints\n  )\n    external\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\n    returns (uint256)\n  {\n    if (_metadata.reservedRate > JBConstants.MAX_RESERVED_RATE) {\n      revert INVALID_RESERVED_RATE();\n    }\n\n    if (_metadata.redemptionRate > JBConstants.MAX_REDEMPTION_RATE) {\n      revert INVALID_REDEMPTION_RATE();\n    }\n\n    if (_metadata.ballotRedemptionRate > JBConstants.MAX_BALLOT_REDEMPTION_RATE) {\n      revert INVALID_BALLOT_REDEMPTION_RATE();\n    }\n\n    return\n      _configure(\n        _projectId,\n        _data,\n        _metadata,\n        _mustStartAtOrAfter,\n        _groupedSplits,\n        _fundAccessConstraints\n      );\n  }\n\n  /**\n    @notice \n    Issues an owner's ERC-20 Tokens that'll be used when claiming tokens.\n\n    @dev \n    Deploys a project's ERC-20 token contract.\n\n    @dev\n    Only a project owner or operator can issue its token.\n\n    @param _projectId The ID of the project being issued tokens.\n    @param _name The ERC-20's name.\n    @param _symbol The ERC-20's symbol.\n  */\n  function issueTokenFor(\n    uint256 _projectId,\n    string calldata _name,\n    string calldata _symbol\n  )\n    external\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.ISSUE)\n    returns (IJBToken token)\n  {\n    // Issue the token in the store.\n    return tokenStore.issueFor(_projectId, _name, _symbol);\n  }\n\n  /**\n    @notice \n    Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\n\n    @dev\n    Only a project owner or operator can change its token.\n\n    @param _projectId The ID of the project to which the changed token belongs.\n    @param _token The new token.\n    @param _newOwner An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\n  */\n  function changeTokenOf(\n    uint256 _projectId,\n    IJBToken _token,\n    address _newOwner\n  )\n    external\n    nonReentrant\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.CHANGE_TOKEN)\n  {\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // The current funding cycle must not be paused.\n    if (!_fundingCycle.changeTokenAllowed()) {\n      revert CHANGE_TOKEN_NOT_ALLOWED();\n    }\n\n    // Change the token in the store.\n    tokenStore.changeFor(_projectId, _token, _newOwner);\n  }\n\n  /**\n    @notice\n    Mint new token supply into an account.\n\n    @dev\n    Only a project's owner, a designated operator, or one of its terminal's delegate can mint its tokens.\n\n    @param _projectId The ID of the project to which the tokens being minted belong.\n    @param _tokenCount The amount of tokens to mint.\n    @param _beneficiary The account that the tokens are being minted for.\n    @param _memo A memo to pass along to the emitted event.\n    @param _preferClaimedTokens A flag indicating whether ERC20's should be minted if they have been issued.\n    @param _reservedRate The reserved rate to use when minting tokens. A positive amount will reduce the token count minted to the beneficiary, instead being reserved for preprogrammed splits. This number is out of 10000.\n\n    @return beneficiaryTokenCount The amount of tokens minted for the beneficiary.\n  */\n  function mintTokensOf(\n    uint256 _projectId,\n    uint256 _tokenCount,\n    address _beneficiary,\n    string calldata _memo,\n    bool _preferClaimedTokens,\n    uint256 _reservedRate\n  )\n    external\n    override\n    nonReentrant\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.MINT,\n      directory.isTerminalDelegateOf(_projectId, msg.sender)\n    )\n    returns (uint256 beneficiaryTokenCount)\n  {\n    if (_reservedRate > JBConstants.MAX_RESERVED_RATE) {\n      revert INVALID_RESERVED_RATE();\n    }\n\n    // Can't send to the zero address.\n    if (_reservedRate != JBConstants.MAX_RESERVED_RATE && _beneficiary == address(0)) {\n      revert INVALID_RESERVED_RATE_AND_BENEFICIARY_ZERO_ADDRESS();\n    }\n\n    // There should be tokens to mint.\n    if (_tokenCount == 0) {\n      revert ZERO_TOKENS_TO_MINT();\n    }\n\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // If the message sender is not a terminal delegate, the current funding cycle must not be paused.\n    if (_fundingCycle.mintPaused() && !directory.isTerminalDelegateOf(_projectId, msg.sender)) {\n      revert MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE();\n    }\n\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE) {\n      // Subtract the total weighted amount from the tracker so the full reserved token amount can be printed later.\n      _processedTokenTrackerOf[_projectId] =\n        _processedTokenTrackerOf[_projectId] -\n        int256(_tokenCount);\n    } else {\n      // The unreserved token count that will be minted for the beneficiary.\n      beneficiaryTokenCount = PRBMath.mulDiv(\n        _tokenCount,\n        JBConstants.MAX_RESERVED_RATE - _reservedRate,\n        JBConstants.MAX_RESERVED_RATE\n      );\n\n      // Mint the tokens.\n      tokenStore.mintFor(_beneficiary, _projectId, beneficiaryTokenCount, _preferClaimedTokens);\n\n      if (_reservedRate == 0)\n        // If there's no reserved rate, increment the tracker with the newly minted tokens.\n        _processedTokenTrackerOf[_projectId] =\n          _processedTokenTrackerOf[_projectId] +\n          int256(beneficiaryTokenCount);\n    }\n\n    emit MintTokens(_beneficiary, _projectId, _tokenCount, _memo, _reservedRate, msg.sender);\n  }\n\n  /**\n    @notice\n    Burns a token holder's supply.\n\n    @dev\n    Only a token's holder, a designated operator, or a project's terminal's delegate can burn it.\n\n    @param _holder The account that is having its tokens burned.\n    @param _projectId The ID of the project to which the tokens being burned belong.\n    @param _tokenCount The number of tokens to burn.\n    @param _memo A memo to pass along to the emitted event.\n    @param _preferClaimedTokens A flag indicating whether ERC20's should be burned first if they have been issued.\n  */\n  function burnTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    string calldata _memo,\n    bool _preferClaimedTokens\n  )\n    external\n    override\n    nonReentrant\n    requirePermissionAllowingOverride(\n      _holder,\n      _projectId,\n      JBOperations.BURN,\n      directory.isTerminalDelegateOf(_projectId, msg.sender)\n    )\n  {\n    // There should be tokens to burn\n    if (_tokenCount == 0) {\n      revert NO_BURNABLE_TOKENS();\n    }\n\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // If the message sender is not a terminal delegate, the current funding cycle must not be paused.\n    if (_fundingCycle.burnPaused() && !directory.isTerminalDelegateOf(_projectId, msg.sender)) {\n      revert BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\n    }\n\n    // Update the token tracker so that reserved tokens will still be correctly mintable.\n    _processedTokenTrackerOf[_projectId] =\n      _processedTokenTrackerOf[_projectId] -\n      int256(_tokenCount);\n\n    // Burn the tokens.\n    tokenStore.burnFrom(_holder, _projectId, _tokenCount, _preferClaimedTokens);\n\n    emit BurnTokens(_holder, _projectId, _tokenCount, _memo, msg.sender);\n  }\n\n  /**\n    @notice\n    Distributes all outstanding reserved tokens for a project.\n\n    @param _projectId The ID of the project to which the reserved tokens belong.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return The amount of minted reserved tokens.\n  */\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\n    external\n    nonReentrant\n    returns (uint256)\n  {\n    return _distributeReservedTokensOf(_projectId, _memo);\n  }\n\n  /** \n    @notice\n    Allows other controllers to signal to this one that a migration is expected for the specified project.\n\n    @param _projectId The ID of the project that will be migrated to this controller.\n  */\n  function prepForMigrationOf(uint256 _projectId, IJBController) external override {\n    // This controller must not be the project's current controller.\n    if (directory.controllerOf(_projectId) == this) {\n      revert CANT_MIGRATE_TO_CURRENT_CONTROLLER();\n    }\n\n    // Set the tracker as the total supply.\n    _processedTokenTrackerOf[_projectId] = int256(tokenStore.totalSupplyOf(_projectId));\n  }\n\n  /** \n    @notice\n    Allows a project to migrate from this controller to another.\n\n    @dev\n    Only a project's owner or a designated operator can migrate it.\n\n    @param _projectId The ID of the project that will be migrated from this controller.\n    @param _to The controller to which the project is migrating.\n  */\n  function migrate(uint256 _projectId, IJBController _to)\n    external\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_CONTROLLER)\n    nonReentrant\n  {\n    // This controller must be the project's current controller.\n    if (directory.controllerOf(_projectId) != this) {\n      revert NOT_CURRENT_CONTROLLER();\n    }\n\n    // Get a reference to the project's current funding cycle.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Migration must be allowed\n    if (!_fundingCycle.controllerMigrationAllowed()) {\n      revert MIGRATION_NOT_ALLOWED();\n    }\n\n    // All reserved tokens must be minted before migrating.\n    if (uint256(_processedTokenTrackerOf[_projectId]) != tokenStore.totalSupplyOf(_projectId))\n      _distributeReservedTokensOf(_projectId, '');\n\n    // Make sure the new controller is prepped for the migration.\n    _to.prepForMigrationOf(_projectId, this);\n\n    // Set the new controller.\n    directory.setControllerOf(_projectId, _to);\n\n    emit Migrate(_projectId, _to, msg.sender);\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    See docs for `distributeReservedTokens`\n  */\n  function _distributeReservedTokensOf(uint256 _projectId, string memory _memo)\n    private\n    returns (uint256 count)\n  {\n    // Get the current funding cycle to read the reserved rate from.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\n\n    // Get a reference to new total supply of tokens before minting reserved tokens.\n    uint256 _totalTokens = tokenStore.totalSupplyOf(_projectId);\n\n    // Get a reference to the number of tokens that need to be minted.\n    count = _reservedTokenAmountFrom(\n      _processedTokenTrackerOf[_projectId],\n      _fundingCycle.reservedRate(),\n      _totalTokens\n    );\n\n    // Set the tracker to be the new total supply.\n    _processedTokenTrackerOf[_projectId] = int256(_totalTokens + count);\n\n    // Get a reference to the project owner.\n    address _owner = projects.ownerOf(_projectId);\n\n    // Distribute tokens to splits and get a reference to the leftover amount to mint after all splits have gotten their share.\n    uint256 _leftoverTokenCount = count == 0\n      ? 0\n      : _distributeToReservedTokenSplitsOf(_projectId, _fundingCycle, count);\n\n    // Mint any leftover tokens to the project owner.\n    if (_leftoverTokenCount > 0) tokenStore.mintFor(_owner, _projectId, _leftoverTokenCount, false);\n\n    emit DistributeReservedTokens(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _owner,\n      count,\n      _leftoverTokenCount,\n      _memo,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Distributed tokens to the splits according to the specified funding cycle configuration.\n\n    @param _projectId The ID of the project for which reserved token splits are being distributed.\n    @param _fundingCycle The funding cycle to base the token distribution on.\n    @param _amount The total amount of tokens to mint.\n\n    @return leftoverAmount If the splits percents dont add up to 100%, the leftover amount is returned.\n  */\n  function _distributeToReservedTokenSplitsOf(\n    uint256 _projectId,\n    JBFundingCycle memory _fundingCycle,\n    uint256 _amount\n  ) private returns (uint256 leftoverAmount) {\n    // Set the leftover amount to the initial amount.\n    leftoverAmount = _amount;\n\n    // Get a reference to the project's reserved token splits.\n    JBSplit[] memory _splits = splitsStore.splitsOf(\n      _projectId,\n      _fundingCycle.configuration,\n      JBSplitsGroups.RESERVED_TOKENS\n    );\n\n    //Transfer between all splits.\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\n      // Get a reference to the split being iterated on.\n      JBSplit memory _split = _splits[_i];\n\n      // The amount to send towards the split.\n      uint256 _tokenCount = PRBMath.mulDiv(_amount, _split.percent, JBConstants.SPLITS_TOTAL_PERCENT);\n\n      // Mints tokens for the split if needed.\n      if (_tokenCount > 0) {\n        tokenStore.mintFor(\n          // If an allocator is set in the splits, set it as the beneficiary. Otherwise if a projectId is set in the split, set the project's owner as the beneficiary. Otherwise use the split's beneficiary.\n          _split.allocator != IJBSplitAllocator(address(0))\n            ? address(_split.allocator)\n            : _split.projectId != 0\n            ? projects.ownerOf(_split.projectId)\n            : _split.beneficiary,\n          _projectId,\n          _tokenCount,\n          _split.preferClaimed\n        );\n\n        // If there's an allocator set, trigger its `allocate` function.\n        if (_split.allocator != IJBSplitAllocator(address(0)))\n          _split.allocator.allocate(\n            _tokenCount,\n            JBSplitsGroups.RESERVED_TOKENS,\n            _projectId,\n            _split.projectId,\n            _split.beneficiary,\n            _split.preferClaimed\n          );\n\n        // Subtract from the amount to be sent to the beneficiary.\n        leftoverAmount = leftoverAmount - _tokenCount;\n      }\n\n      emit DistributeToReservedTokenSplit(\n        _fundingCycle.configuration,\n        _fundingCycle.number,\n        _projectId,\n        _split,\n        _tokenCount,\n        msg.sender\n      );\n    }\n  }\n\n  /**\n    @notice\n    Gets the amount of reserved tokens currently tracked for a project given a reserved rate.\n\n    @param _processedTokenTracker The tracker to make the calculation with.\n    @param _reservedRate The reserved rate to use to make the calculation.\n    @param _totalEligibleTokens The total amount to make the calculation with.\n\n    @return amount reserved token amount.\n  */\n  function _reservedTokenAmountFrom(\n    int256 _processedTokenTracker,\n    uint256 _reservedRate,\n    uint256 _totalEligibleTokens\n  ) private pure returns (uint256) {\n    // Get a reference to the amount of tokens that are unprocessed.\n    uint256 _unprocessedTokenBalanceOf = _processedTokenTracker >= 0\n      ? _totalEligibleTokens - uint256(_processedTokenTracker)\n      : _totalEligibleTokens + uint256(-_processedTokenTracker);\n\n    // If there are no unprocessed tokens, return.\n    if (_unprocessedTokenBalanceOf == 0) return 0;\n\n    // If all tokens are reserved, return the full unprocessed amount.\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE) return _unprocessedTokenBalanceOf;\n\n    return\n      PRBMath.mulDiv(\n        _unprocessedTokenBalanceOf,\n        JBConstants.MAX_RESERVED_RATE,\n        JBConstants.MAX_RESERVED_RATE - _reservedRate\n      ) - _unprocessedTokenBalanceOf;\n  }\n\n  /** \n    @notice \n    Configures a funding cycle and stores information pertinent to the configuration.\n\n    @dev\n    See the docs for `launchProjectFor` and `reconfigureFundingCyclesOf`.\n  */\n  function _configure(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    JBFundingCycleMetadata calldata _metadata,\n    uint256 _mustStartAtOrAfter,\n    JBGroupedSplits[] memory _groupedSplits,\n    JBFundAccessConstraints[] memory _fundAccessConstraints\n  ) private returns (uint256) {\n    // Configure the funding cycle's properties.\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.configureFor(\n      _projectId,\n      _data,\n      JBFundingCycleMetadataResolver.packFundingCycleMetadata(_metadata),\n      _mustStartAtOrAfter\n    );\n\n    for (uint256 _i; _i < _groupedSplits.length; _i++)\n      // Set splits for the current group being iterated on if there are any.\n      if (_groupedSplits[_i].splits.length > 0)\n        splitsStore.set(\n          _projectId,\n          _fundingCycle.configuration,\n          _groupedSplits[_i].group,\n          _groupedSplits[_i].splits\n        );\n\n    // Set overflow allowances if there are any.\n    for (uint256 _i; _i < _fundAccessConstraints.length; _i++) {\n      JBFundAccessConstraints memory _constraints = _fundAccessConstraints[_i];\n\n      // Set the distribution limit if there is one.\n      if (_constraints.distributionLimit > 0)\n        distributionLimitOf[_projectId][_fundingCycle.configuration][\n          _constraints.terminal\n        ] = _constraints.distributionLimit;\n\n      // Set the overflow allowance if there is one.\n      if (_constraints.overflowAllowance > 0)\n        overflowAllowanceOf[_projectId][_fundingCycle.configuration][\n          _constraints.terminal\n        ] = _constraints.overflowAllowance;\n\n      if (_constraints.currency > 0)\n        currencyOf[_projectId][_fundingCycle.configuration][_constraints.terminal] = _constraints\n          .currency;\n\n      emit SetFundAccessConstraints(\n        _fundingCycle.configuration,\n        _fundingCycle.number,\n        _projectId,\n        _constraints,\n        msg.sender\n      );\n    }\n\n    return _fundingCycle.configuration;\n  }\n}\n"
    },
    "contracts/interfaces/IJBSplitsStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBOperatorStore.sol';\nimport './IJBProjects.sol';\nimport './IJBDirectory.sol';\nimport './IJBSplitAllocator.sol';\n\nimport './../structs/JBSplit.sol';\n\ninterface IJBSplitsStore {\n  event SetSplit(\n    uint256 indexed projectId,\n    uint256 indexed domain,\n    uint256 indexed group,\n    JBSplit split,\n    address caller\n  );\n\n  function projects() external view returns (IJBProjects);\n\n  function directory() external view returns (IJBDirectory);\n\n  function splitsOf(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group\n  ) external view returns (JBSplit[] memory);\n\n  function set(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group,\n    JBSplit[] memory _splits\n  ) external;\n}\n"
    },
    "contracts/structs/JBFundAccessConstraints.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBPaymentTerminal.sol';\n\nstruct JBFundAccessConstraints {\n  // The terminal within which the distribution limit and the overflow allowance applies.\n  IJBPaymentTerminal terminal;\n  // The amount of the distribution limit.\n  uint256 distributionLimit;\n  // The amount of the allowance.\n  uint256 overflowAllowance;\n  // The currency that the contraints are denoted in. Enumerated in JBCurrencies.sol\n  uint256 currency;\n}\n"
    },
    "contracts/structs/JBGroupedSplits.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './JBSplit.sol';\nimport '../libraries/JBSplitsGroups.sol';\n\nstruct JBGroupedSplits {\n  uint256 group;\n  JBSplit[] splits;\n}\n"
    },
    "contracts/abstract/JBTerminalUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBPaymentTerminalUtility.sol';\n\n// --------------------------- custom errors -------------------------- //\n//*********************************************************************//\nerror TERMINAL_UNAUTHORIZED();\n\n/** \n  @notice\n  Provides tools for contracts that has functionality that can only be accessed by a project's terminals.\n*/\nabstract contract JBTerminalUtility is IJBPaymentTerminalUtility {\n  modifier onlyTerminal(uint256 _projectId) {\n    if (!directory.isTerminalDelegateOf(_projectId, msg.sender)) {\n      revert TERMINAL_UNAUTHORIZED();\n    }\n    _;\n  }\n\n  /** \n    @notice \n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  /** \n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  constructor(IJBDirectory _directory) {\n    directory = _directory;\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IJBSplitAllocator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IJBSplitAllocator {\n  event Allocate(\n    uint256 indexed projectId,\n    uint256 indexed forProjectId,\n    address indexed beneficiary,\n    uint256 amount,\n    address caller\n  );\n\n  function allocate(\n    uint256 _amount,\n    uint256 _group,\n    uint256 _projectId,\n    uint256 _forProjectId,\n    address _beneficiary,\n    bool _preferClaimed\n  ) external payable;\n}\n"
    },
    "contracts/structs/JBSplit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../interfaces/IJBSplitAllocator.sol';\n\nstruct JBSplit {\n  // A flag that only has effect if a projectId is also specified, and that project has issued its tokens.\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered staked or unstaked to the beneficiary.\n  bool preferClaimed;\n  // The percent of the whole group that this split occupies. This number is out of 1000000000.\n  uint32 percent;\n  // If an allocator is not set but a projectId is set, funds will be sent to the Juicebox treasury belonging to the project who's ID is specified.\n  // Resulting tokens will be routed to the beneficiary with the unstaked token prerence respected.\n  uint56 projectId;\n  // The role the  beneficary depends on whether or not projectId is specified, or whether or not allocator is specified.\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\n  address payable beneficiary;\n  // If an allocator is specified, funds will be sent to the allocator contract along with the projectId, beneficiary, preferClaimed properties.\n  IJBSplitAllocator allocator;\n  // Specifies if the split should be unchangeable until the specifies time comes, with the exception of extending the lockedUntil period.\n  uint48 lockedUntil;\n}\n"
    },
    "contracts/interfaces/IJBPaymentTerminalUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './IJBDirectory.sol';\n\ninterface IJBPaymentTerminalUtility {\n  function directory() external view returns (IJBDirectory);\n}\n"
    },
    "contracts/JBETHPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\nimport '@paulrberg/contracts/math/PRBMath.sol';\n\nimport './libraries/JBConstants.sol';\nimport './libraries/JBCurrencies.sol';\nimport './libraries/JBOperations.sol';\nimport './libraries/JBSplitsGroups.sol';\nimport './libraries/JBTokens.sol';\n\nimport './JBETHPaymentTerminalStore.sol';\n\n// Inheritance\nimport './interfaces/IJBETHPaymentTerminal.sol';\nimport './interfaces/IJBPaymentTerminal.sol';\nimport './abstract/JBOperatable.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror FEE_TOO_HIGH();\nerror PAY_TO_ZERO_ADDRESS();\nerror REDEEM_TO_ZERO_ADDRESS();\nerror TERMINAL_IN_SPLIT_ZERO_ADDRESS();\nerror TERMINAL_TOKENS_INCOMPATIBLE();\nerror ZERO_VALUE_SENT();\n\n/**\n  @notice\n  This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\n\n  @dev\n  A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal contract at any time.\n\n  Inherits from:\n\n  IJBPayoutRedemptionPaymentTerminal - general interface for the methods in this contract that send and receive funds according to the protocol's rules.\n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\n*/\ncontract JBETHPaymentTerminal is\n  IJBETHPaymentTerminal,\n  IJBPaymentTerminal,\n  JBOperatable,\n  Ownable,\n  ReentrancyGuard\n{\n  // A library that parses the packed funding cycle metadata into a more friendly format.\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\n\n  //*********************************************************************//\n  // --------------------- private stored constants -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Maximum fee that can be set for a funding cycle configuration.\n  */\n  uint256 private constant _MAX_FEE = 10;\n\n  /**\n    @notice\n    Fees that are being held to be processed later.\n\n    _projectId The ID of the project for which fees are being held.\n  */\n  mapping(uint256 => JBFee[]) private _heldFeesOf;\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable override projects;\n\n  /**\n    @notice\n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  /**\n    @notice\n    The contract that stores splits for each project.\n  */\n  IJBSplitsStore public immutable override splitsStore;\n\n  /**\n    @notice\n    The contract that stores and manages the terminal's data.\n  */\n  JBETHPaymentTerminalStore public immutable store;\n\n  /**\n    @notice\n    The token that this terminal accepts.\n  */\n  address public immutable override token = JBTokens.ETH;\n\n  /**\n    @notice\n    The platform fee percent.\n\n    @dev\n    Out of 200.\n  */\n  uint256 public override fee = 10;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    The ETH balance that this terminal holds for each project.\n\n    @param _projectId The ID of the project to which the balance belongs.\n\n    @return The ETH balance.\n  */\n  function ethBalanceOf(uint256 _projectId) external view override returns (uint256) {\n    // The store's balance is already in ETH.\n    return store.balanceOf(_projectId);\n  }\n\n  /**\n    @notice\n    The amount of funds that can still be distributed within the preconfigured limit.\n\n    @param _projectId The ID of the project to which the remaining limit belongs.\n    @param _fundingCycleConfiguration The funding cycle configuration during which the limit remaining is being calculated.\n    @param _fundingCycleNumber The number of the funding cycle during which the limit remaining is being calculated.\n\n    @return The remaining distribution limit for this terminal.\n  */\n  function remainingDistributionLimitOf(\n    uint256 _projectId,\n    uint256 _fundingCycleConfiguration,\n    uint256 _fundingCycleNumber\n  ) external view override returns (uint256) {\n    // Subtract the used distribution limit during the specified funding cycle from the preconfigured distribution limit.\n    return\n      directory.controllerOf(_projectId).distributionLimitOf(\n        _projectId,\n        _fundingCycleConfiguration,\n        this\n      ) - store.usedDistributionLimitOf(_projectId, _fundingCycleNumber);\n  }\n\n  /**\n    @notice\n    The fees that are currently being held to be processed later for each project.\n\n    @param _projectId The ID of the project for which fees are being held.\n\n    @return An array of fees that are being held.\n  */\n  function heldFeesOf(uint256 _projectId) external view override returns (JBFee[] memory) {\n    return _heldFeesOf[_projectId];\n  }\n\n  /**\n    @notice\n    An address that serves as this terminal's delegate when making requests to juicebox ecosystem contracts.\n\n    @return The delegate address.\n  */\n  function delegate() external view override returns (address) {\n    // The store is the delegate.\n    return address(store);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /**\n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n    @param _splitsStore A contract that stores splits for each project.\n    @param _store A contract that stores the terminal's data.\n    @param _owner The address that will own this contract.\n  */\n  constructor(\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory,\n    IJBSplitsStore _splitsStore,\n    JBETHPaymentTerminalStore _store,\n    address _owner\n  ) JBOperatable(_operatorStore) {\n    projects = _projects;\n    directory = _directory;\n    splitsStore = _splitsStore;\n\n    // Claim the store so that it recognizes this terminal as the one that can access it.\n    _store.claimFor(this);\n\n    store = _store;\n\n    transferOwnership(_owner);\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Contribute ETH to a project.\n\n    @dev\n    The msg.value is the amount of the contribution in wei.\n\n    @param _projectId The ID of the project being paid.\n    @param _beneficiary The address to mint tokens for and pass along to the funding cycle's data source and delegate.\n    @param _minReturnedTokens The minimum number of tokens expected in return.\n    @param _preferClaimedTokens A flag indicating whether the request prefers to issue tokens unstaked rather than staked.\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\n    @param _delegateMetadata Bytes to send along to the delegate, if one is provided.\n  */\n  function pay(\n    uint256 _projectId,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string calldata _memo,\n    bytes calldata _delegateMetadata\n  ) external payable override {\n    return\n      _pay(\n        msg.value,\n        _projectId,\n        _beneficiary,\n        _minReturnedTokens,\n        _preferClaimedTokens,\n        _memo,\n        _delegateMetadata\n      );\n  }\n\n  /**\n    @notice\n    Distributes payouts for a project according to the constraints of its current funding cycle.\n\n    @dev\n    Payouts are sent to the preprogrammed splits.\n\n    @dev\n    Anyone can distribute payouts on a project's behalf.\n\n    @param _projectId The ID of the project having its payouts distributed.\n    @param _amount The amount being distributed.\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's currency.\n    @param _minReturnedWei The minimum number of wei that the amount should be valued at.\n  */\n  function distributePayoutsOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    uint256 _minReturnedWei,\n    string memory _memo\n  ) external override nonReentrant {\n    // Record the distribution.\n    (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordDistributionFor(\n      _projectId,\n      _amount,\n      _currency,\n      _minReturnedWei\n    );\n\n    // Get a reference to the project owner, which will receive tokens from paying the platform fee\n    // and receive any extra distributable funds not allocated to payout splits.\n    address payable _projectOwner = payable(projects.ownerOf(_projectId));\n\n    // Get a reference to the handle of the project paying the fee and sending payouts.\n    bytes32 _handle = projects.handleOf(_projectId);\n\n    // Take a fee from the _distributedAmount, if needed.\n    // The project's owner will be the beneficiary of the resulting minted tokens from platform project.\n    // The platform project's ID is 1.\n    uint256 _feeAmount = fee == 0 || _projectId == 1\n      ? 0\n      : _takeFeeFrom(\n        _projectId,\n        _fundingCycle,\n        _distributedAmount,\n        _projectOwner,\n        string(bytes.concat('Fee from @', _handle))\n      );\n\n    // Payout to splits and get a reference to the leftover transfer amount after all mods have been paid.\n    // The net transfer amount is the withdrawn amount minus the fee.\n    uint256 _leftoverDistributionAmount = _distributeToPayoutSplitsOf(\n      _projectId,\n      _fundingCycle,\n      _distributedAmount - _feeAmount,\n      string(bytes.concat('Payout from @', _handle))\n    );\n\n    // Transfer any remaining balance to the project owner.\n    if (_leftoverDistributionAmount > 0)\n      Address.sendValue(_projectOwner, _leftoverDistributionAmount);\n\n    emit DistributePayouts(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _projectOwner,\n      _amount,\n      _distributedAmount,\n      _feeAmount,\n      _leftoverDistributionAmount,\n      _memo,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Allows a project to send funds from its overflow up to the preconfigured allowance.\n\n    @dev\n    Only a project's owner or a designated operator can migrate it.\n\n    @param _projectId The ID of the project to use the allowance of.\n    @param _amount The amount of the allowance to use.\n    @param _beneficiary The address to send the funds to.\n  */\n  function useAllowanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    uint256 _minReturnedWei,\n    address payable _beneficiary\n  )\n    external\n    override\n    nonReentrant\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.USE_ALLOWANCE)\n  {\n    // Record the use of the allowance.\n    (JBFundingCycle memory _fundingCycle, uint256 _withdrawnAmount) = store.recordUsedAllowanceOf(\n      _projectId,\n      _amount,\n      _currency,\n      _minReturnedWei\n    );\n\n    // Get a reference to the project owner, which will receive tokens from paying the platform fee\n    // and receive any extra distributable funds not allocated to payout splits.\n    address payable _projectOwner = payable(projects.ownerOf(_projectId));\n\n    // Get a reference to the handle of the project paying the fee and sending payouts.\n    bytes32 _handle = projects.handleOf(_projectId);\n\n    // Take a fee from the _withdrawnAmount, if needed.\n    // The project's owner will be the beneficiary.\n    uint256 _feeAmount = fee == 0 || _projectId == 1 // The platform project's ID is 1.\n      ? 0\n      : _takeFeeFrom(\n        _projectId,\n        _fundingCycle,\n        _withdrawnAmount,\n        _projectOwner,\n        string(bytes.concat('Fee from @', _handle))\n      );\n\n    // Transfer any remaining balance to the project owner.\n    Address.sendValue(_beneficiary, _withdrawnAmount - _feeAmount);\n\n    emit UseAllowance(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _beneficiary,\n      _withdrawnAmount,\n      _feeAmount,\n      _withdrawnAmount - _feeAmount,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Addresses can redeem their tokens to claim the project's overflowed ETH, or to trigger rules determined by the project's current funding cycle's data source.\n\n    @dev\n    Only a token's holder or a designated operator can redeem it.\n\n    @param _holder The account to redeem tokens for.\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\n    @param _tokenCount The number of tokens to redeem.\n    @param _minReturnedWei The minimum amount of Wei expected in return.\n    @param _beneficiary The address to send the ETH to. Send the address this contract to burn the count.\n    @param _memo A memo to pass along to the emitted event.\n    @param _delegateMetadata Bytes to send along to the delegate, if one is provided.\n\n    @return claimAmount The amount of ETH that the tokens were redeemed for, in wei.\n  */\n  function redeemTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _tokenCount,\n    uint256 _minReturnedWei,\n    address payable _beneficiary,\n    string memory _memo,\n    bytes memory _delegateMetadata\n  )\n    external\n    override\n    nonReentrant\n    requirePermission(_holder, _projectId, JBOperations.REDEEM)\n    returns (uint256 claimAmount)\n  {\n    // Can't send claimed funds to the zero address.\n    if (_beneficiary == address(0)) {\n      revert REDEEM_TO_ZERO_ADDRESS();\n    }\n\n    // Keep a reference to the funding cycles during which the redemption is being made.\n    JBFundingCycle memory _fundingCycle;\n\n    // Record the redemption.\n    (_fundingCycle, claimAmount, _memo) = store.recordRedemptionFor(\n      _holder,\n      _projectId,\n      _tokenCount,\n      _minReturnedWei,\n      _beneficiary,\n      _memo,\n      _delegateMetadata\n    );\n\n    // Send the claimed funds to the beneficiary.\n    if (claimAmount > 0) Address.sendValue(_beneficiary, claimAmount);\n\n    emit RedeemTokens(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _holder,\n      _beneficiary,\n      _tokenCount,\n      claimAmount,\n      _memo,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Allows a project owner to migrate its funds and operations to a new terminal.\n\n    @dev\n    Only a project's owner or a designated operator can migrate it.\n\n    @param _projectId The ID of the project being migrated.\n    @param _to The terminal contract that will gain the project's funds.\n  */\n  function migrate(uint256 _projectId, IJBPaymentTerminal _to)\n    external\n    override\n    nonReentrant\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_TERMINAL)\n  {\n    // The terminal being migrated to must accept the same token as this terminal.\n    if (token != _to.token()) {\n      revert TERMINAL_TOKENS_INCOMPATIBLE();\n    }\n\n    // Record the migration in the store.\n    uint256 _balance = store.recordMigration(_projectId);\n\n    if (_balance > 0)\n      // Withdraw the balance to transfer to the new terminal;\n      _to.addToBalanceOf{value: _balance}(_projectId, '');\n\n    emit Migrate(_projectId, _to, _balance, msg.sender);\n  }\n\n  /**\n    @notice\n    Receives funds belonging to the specified project.\n\n    @param _projectId The ID of the project to which the funds received belong.\n    @param _memo A memo to pass along to the emitted event.\n  */\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable override {\n    // Amount must be greater than 0.\n    if (msg.value == 0) {\n      revert ZERO_VALUE_SENT();\n    }\n\n    // Record the added funds.\n    store.recordAddedBalanceFor(_projectId, msg.value);\n\n    // Refund any held fees to make sure the project doesn't pay double for funds going in and out of the protocol.\n    _refundHeldFees(_projectId, msg.value);\n\n    emit AddToBalance(_projectId, msg.value, _memo, msg.sender);\n  }\n\n  /**\n    @notice\n    Process any fees that are being held for the project.\n\n    @dev\n    Only a project owner, an operator, or the contract's owner can process held fees.\n\n    @param _projectId The ID of the project whos held fees should be processed.\n  */\n  function processFees(uint256 _projectId)\n    external\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.PROCESS_FEES,\n      msg.sender == owner()\n    )\n    nonReentrant\n  {\n    // Get a reference to the project's held fees.\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\n\n    // Process each fee.\n    for (uint256 _i = 0; _i < _heldFees.length; _i++)\n      _takeFee(\n        _heldFees[_i].amount - PRBMath.mulDiv(_heldFees[_i].amount, 200, _heldFees[_i].fee + 200),\n        _heldFees[_i].beneficiary,\n        _heldFees[_i].memo\n      );\n\n    // Delete the held fee's now that they've been processed.\n    delete _heldFeesOf[_projectId];\n\n    emit ProcessFees(_projectId, _heldFees, msg.sender);\n  }\n\n  /**\n    @notice\n    Allows the fee to be updated for subsequent funding cycle configurations.\n\n    @dev\n    Only the owner of this contract can change the fee.\n\n    @param _fee The new fee.\n  */\n  function setFee(uint256 _fee) external onlyOwner {\n    // The max fee is 5%.\n    if (_fee > _MAX_FEE) {\n      revert FEE_TOO_HIGH();\n    }\n\n    // Store the new fee.\n    fee = _fee;\n\n    emit SetFee(_fee, msg.sender);\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Pays out splits for a project's funding cycle configuration.\n\n    @param _projectId The ID of the project for which payout splits are being distributed.\n    @param _fundingCycle The funding cycle during which the distribution is being made.\n    @param _amount The total amount being distributed.\n    @param _memo A memo to pass along to the emitted events.\n\n    @return leftoverAmount If the leftover amount if the splits don't add up to 100%.\n  */\n  function _distributeToPayoutSplitsOf(\n    uint256 _projectId,\n    JBFundingCycle memory _fundingCycle,\n    uint256 _amount,\n    string memory _memo\n  ) private returns (uint256 leftoverAmount) {\n    // Set the leftover amount to the initial amount.\n    leftoverAmount = _amount;\n\n    // Get a reference to the project's payout splits.\n    JBSplit[] memory _splits = splitsStore.splitsOf(\n      _projectId,\n      _fundingCycle.configuration,\n      JBSplitsGroups.ETH_PAYOUT\n    );\n\n    //Transfer between all splits.\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\n      // Get a reference to the mod being iterated on.\n      JBSplit memory _split = _splits[_i];\n\n      // The amount to send towards mods.\n      uint256 _payoutAmount = PRBMath.mulDiv(\n        _amount,\n        _split.percent,\n        JBConstants.SPLITS_TOTAL_PERCENT\n      );\n\n      if (_payoutAmount > 0) {\n        // Transfer ETH to the mod.\n        // If there's an allocator set, transfer to its `allocate` function.\n        if (_split.allocator != IJBSplitAllocator(address(0))) {\n          _split.allocator.allocate{value: _payoutAmount}(\n            _payoutAmount,\n            JBSplitsGroups.ETH_PAYOUT,\n            _projectId,\n            _split.projectId,\n            _split.beneficiary,\n            _split.preferClaimed\n          );\n          // Otherwise, if a project is specified, make a payment to it.\n        } else if (_split.projectId != 0) {\n          // Get a reference to the Juicebox terminal being used.\n          IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_split.projectId, token);\n\n          // The project must have a terminal to send funds to.\n          if (_terminal == IJBPaymentTerminal(address(0))) {\n            revert TERMINAL_IN_SPLIT_ZERO_ADDRESS();\n          }\n\n          // Save gas if this contract is being used as the terminal.\n          if (_terminal == this) {\n            _pay(\n              _payoutAmount,\n              _split.projectId,\n              _split.beneficiary,\n              0,\n              _split.preferClaimed,\n              _memo,\n              bytes('')\n            );\n          } else {\n            _terminal.pay{value: _payoutAmount}(\n              _split.projectId,\n              _split.beneficiary,\n              0,\n              _split.preferClaimed,\n              _memo,\n              bytes('')\n            );\n          }\n        } else {\n          // Otherwise, send the funds directly to the beneficiary.\n          Address.sendValue(_split.beneficiary, _payoutAmount);\n        }\n\n        // Subtract from the amount to be sent to the beneficiary.\n        leftoverAmount = leftoverAmount - _payoutAmount;\n      }\n\n      emit DistributeToPayoutSplit(\n        _fundingCycle.configuration,\n        _fundingCycle.number,\n        _projectId,\n        _split,\n        _payoutAmount,\n        msg.sender\n      );\n    }\n  }\n\n  /**\n    @notice\n    Takes a fee into the platform's project, which has an id of 1.\n\n    @param _projectId The ID of the project having fees taken from.\n    @param _fundingCycle The funding cycle during which the fee is being taken.\n    @param _amount The amount to take a fee from.\n    @param _beneficiary The address to print the platforms tokens for.\n    @param _memo A memo to pass along to the emitted event.\n\n    @return feeAmount The amount of the fee taken.\n  */\n  function _takeFeeFrom(\n    uint256 _projectId,\n    JBFundingCycle memory _fundingCycle,\n    uint256 _amount,\n    address _beneficiary,\n    string memory _memo\n  ) private returns (uint256 feeAmount) {\n    // The amount of ETH from the _amount to pay as a fee.\n    feeAmount = _amount - PRBMath.mulDiv(_amount, 200, fee + 200);\n\n    // Nothing to do if there's no fee to take.\n    if (feeAmount == 0) return 0;\n\n    _fundingCycle.shouldHoldFees()\n      ? _heldFeesOf[_projectId].push(JBFee(_amount, uint8(fee), _beneficiary, _memo))\n      : _takeFee(feeAmount, _beneficiary, _memo); // Take the fee.\n  }\n\n  /**\n    @notice\n    Take a fee of the specified amount.\n\n    @param _amount The fee amount.\n    @param _beneficiary The address to print the platforms tokens for.\n    @param _memo A memo to pass along to the emitted event.\n  */\n  function _takeFee(\n    uint256 _amount,\n    address _beneficiary,\n    string memory _memo\n  ) private {\n    // Get the terminal for the JuiceboxDAO project.\n    IJBPaymentTerminal _terminal = directory.primaryTerminalOf(1, token);\n\n    // When processing the admin fee, save gas if the admin is using this contract as its terminal.\n    _terminal == this\n      ? _pay(_amount, 1, _beneficiary, 0, false, _memo, bytes('')) // Use the local pay call.\n      : _terminal.pay{value: _amount}(1, _beneficiary, 0, false, _memo, bytes('')); // Use the external pay call of the correct terminal.\n  }\n\n  /**\n    @notice\n    See the documentation for 'pay'.\n  */\n  function _pay(\n    uint256 _amount,\n    uint256 _projectId,\n    address _beneficiary,\n    uint256 _minReturnedTokens,\n    bool _preferClaimedTokens,\n    string memory _memo,\n    bytes memory _delegateMetadata\n  ) private {\n    // Cant send tokens to the zero address.\n    if (_beneficiary == address(0)) {\n      revert PAY_TO_ZERO_ADDRESS();\n    }\n\n    JBFundingCycle memory _fundingCycle;\n    uint256 _weight;\n    uint256 _tokenCount;\n\n    // Record the payment.\n    (_fundingCycle, _weight, _tokenCount, _memo) = store.recordPaymentFrom(\n      msg.sender,\n      _amount,\n      _projectId,\n      (_preferClaimedTokens ? 1 : 0) | (uint256(uint160(_beneficiary)) << 1),\n      _minReturnedTokens,\n      _memo,\n      _delegateMetadata\n    );\n\n    emit Pay(\n      _fundingCycle.configuration,\n      _fundingCycle.number,\n      _projectId,\n      _beneficiary,\n      _amount,\n      _weight,\n      _tokenCount,\n      _memo,\n      msg.sender\n    );\n  }\n\n  /**\n    @notice\n    Refund fees based on the specified amount.\n\n    @param _projectId The project for which fees are being refunded.\n    @param _amount The amount to base the refund on.\n  */\n  function _refundHeldFees(uint256 _projectId, uint256 _amount) private {\n    // Get a reference to the project's held fees.\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\n\n    // Delete the current held fees.\n    delete _heldFeesOf[_projectId];\n\n    // Process each fee.\n    for (uint256 _i = 0; _i < _heldFees.length; _i++) {\n      if (_amount == 0) {\n        _heldFeesOf[_projectId].push(_heldFees[_i]);\n      } else if (_amount >= _heldFees[_i].amount) {\n        _amount = _amount - _heldFees[_i].amount;\n      } else {\n        _heldFeesOf[_projectId].push(\n          JBFee(\n            _heldFees[_i].amount - _amount,\n            _heldFees[_i].fee,\n            _heldFees[_i].beneficiary,\n            _heldFees[_i].memo\n          )\n        );\n        _amount = 0;\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/JBTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary JBTokens {\n  /** \n    @notice \n    The ETH token address in Juicebox is represented by 0x000000000000000000000000000000000000eeee.\n\n    @dev\n    This address is guaranteed to never conflict with other tokens per the following:\n    https://github.com/ethereum/EIPs/pull/1352/files#diff-02f3b07abd45fe04d908b93f8b7aa6d7\n  */\n  address public constant ETH = address(0xeeee);\n}\n"
    },
    "contracts/interfaces/IJBETHPaymentTerminal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\nimport './IJBProjects.sol';\nimport './IJBDirectory.sol';\nimport './IJBSplitsStore.sol';\nimport './IJBFundingCycleStore.sol';\nimport './IJBPayDelegate.sol';\nimport './IJBTokenStore.sol';\nimport './IJBPrices.sol';\nimport './IJBRedemptionDelegate.sol';\nimport './IJBController.sol';\n\nimport './../structs/JBFee.sol';\n\ninterface IJBETHPaymentTerminal {\n  event AddToBalance(uint256 indexed projectId, uint256 amount, string memo, address caller);\n  event Migrate(uint256 indexed projectId, IJBPaymentTerminal indexed to, uint256 amount, address caller);\n  event DistributePayouts(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address beneficiary,\n    uint256 amount,\n    uint256 distributedAmount,\n    uint256 feeAmount,\n    uint256 beneficiaryDistributionAmount,\n    string memo,\n    address caller\n  );\n\n  event UseAllowance(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address beneficiary,\n    uint256 amount,\n    uint256 feeAmount,\n    uint256 transferAmount,\n    address caller\n  );\n  event ProcessFees(uint256 indexed projectId, JBFee[] fees, address caller);\n  event Pay(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address beneficiary,\n    uint256 amount,\n    uint256 weight,\n    uint256 tokenCount,\n    string memo,\n    address caller\n  );\n  event RedeemTokens(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    address holder,\n    address beneficiary,\n    uint256 tokenCount,\n    uint256 claimedAmount,\n    string memo,\n    address caller\n  );\n  event DistributeToPayoutSplit(\n    uint256 indexed fundingCycleConfiguration,\n    uint256 indexed fundingCycleNumber,\n    uint256 indexed projectId,\n    JBSplit split,\n    uint256 amount,\n    address caller\n  );\n\n  event SetFee(uint256 fee, address caller);\n\n  function projects() external view returns (IJBProjects);\n\n  function splitsStore() external view returns (IJBSplitsStore);\n\n  function directory() external view returns (IJBDirectory);\n\n  function heldFeesOf(uint256 _projectId) external view returns (JBFee[] memory);\n\n  function fee() external view returns (uint256);\n\n  function distributePayoutsOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    uint256 _minReturnedWei,\n    string memory _memo\n  ) external;\n\n  function redeemTokensOf(\n    address _holder,\n    uint256 _projectId,\n    uint256 _count,\n    uint256 _minReturnedWei,\n    address payable _beneficiary,\n    string calldata _memo,\n    bytes calldata _delegateMetadata\n  ) external returns (uint256 claimedAmount);\n\n  function useAllowanceOf(\n    uint256 _projectId,\n    uint256 _amount,\n    uint256 _currency,\n    uint256 _minReturnedWei,\n    address payable _beneficiary\n  ) external;\n\n  function migrate(uint256 _projectId, IJBPaymentTerminal _to) external;\n}\n"
    },
    "contracts/structs/JBFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nstruct JBFee {\n  // The total amount the fee was taken from.\n  uint256 amount;\n  // The percent of the fee.\n  uint8 fee;\n  // The address that will receive the tokens that are minted as a result of the fee payment.\n  address beneficiary;\n  // The memo that should be emitted alongside the fee payment.\n  string memo;\n}\n"
    },
    "contracts/JBPrices.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport './interfaces/IJBPrices.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror PRICE_FEED_ALREADY_EXISTS();\nerror PRICE_FEED_NOT_FOUND();\n\n/** \n  @notice Manages and normalizes price feeds.\n*/\ncontract JBPrices is IJBPrices, Ownable {\n  //*********************************************************************//\n  // ---------------- public constant stored properties ---------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The normalized number of decimals each price feed has.\n  */\n  uint256 public constant override TARGET_DECIMALS = 18;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The available price feeds.\n\n    _currency he currency of the feed.\n    _base he base of the feed. \n  */\n  mapping(uint256 => mapping(uint256 => AggregatorV3Interface)) public override feedFor;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n      @notice \n      Gets the current price of the provided currency in terms of the provided base currency.\n      \n      @param _currency The currency to get a price for.\n      @param _base The currency to base the price on.\n      \n      @return The price of the currency in terms of the base, with 18 decimals.\n    */\n  function priceFor(uint256 _currency, uint256 _base) external view override returns (uint256) {\n    // If the currency is the base, return 1 since they are priced the same.\n    if (_currency == _base) return 10**TARGET_DECIMALS;\n\n    // Get a reference to the feed.\n    AggregatorV3Interface _feed = feedFor[_currency][_base];\n\n    // Feed must exist.\n    if (_feed == AggregatorV3Interface(address(0))) {\n      revert PRICE_FEED_NOT_FOUND();\n    }\n\n    // Get the latest round information. Only need the price is needed.\n    (, int256 _price, , , ) = _feed.latestRoundData();\n\n    // Get a reference to the number of decimals the feed uses.\n    uint256 _decimals = _feed.decimals();\n\n    // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result.\n    if (TARGET_DECIMALS == _decimals) {\n      return uint256(_price);\n    } else if (TARGET_DECIMALS > _decimals) {\n      return uint256(_price) * 10**(TARGET_DECIMALS - _decimals);\n    } else {\n      return uint256(_price) / 10**(_decimals - TARGET_DECIMALS);\n    }\n  }\n\n  //*********************************************************************//\n  // ---------------------------- constructor -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _owner The address that will own the contract.\n  */\n  constructor(address _owner) {\n    // Transfer the ownership.\n    transferOwnership(_owner);\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Add a price feed for a currency in terms of the provided base currency.\n\n    @dev\n    Current feeds can't be modified.\n\n    @param _currency The currency that the price feed is for.\n    @param _base The currency that the price feed is based on.\n    @param _feed The price feed being added.\n  */\n  function addFeedFor(\n    uint256 _currency,\n    uint256 _base,\n    AggregatorV3Interface _feed\n  ) external override onlyOwner {\n    // There can't already be a feed for the specified currency.\n    if (feedFor[_currency][_base] != AggregatorV3Interface(address(0))) {\n      revert PRICE_FEED_ALREADY_EXISTS();\n    }\n\n    // Set the feed.\n    feedFor[_currency][_base] = _feed;\n\n    emit AddFeed(_currency, _base, _feed);\n  }\n}\n"
    },
    "contracts/JBFundingCycleStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@paulrberg/contracts/math/PRBMath.sol';\n\nimport './abstract/JBControllerUtility.sol';\nimport './interfaces/IJBFundingCycleStore.sol';\nimport './libraries/JBConstants.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror FUNDING_CYCLE_CONFIGURATION_NOT_FOUND();\nerror INVALID_DISCOUNT_RATE();\nerror INVALID_DURATION();\nerror INVALID_WEIGHT();\nerror NON_RECURRING_FUNDING_CYCLE();\n\n/** \n  @notice \n  Manages funding cycle configurations and scheduling.\n*/\ncontract JBFundingCycleStore is JBControllerUtility, IJBFundingCycleStore {\n  //*********************************************************************//\n  // --------------------- private stored properties ------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    Stores the user defined properties of each funding cycle, packed into one storage slot.\n\n    _projectId The ID of the project to get properties of.\n    _configuration The funding cycle configuration to get properties of.\n  */\n  mapping(uint256 => mapping(uint256 => uint256)) private _packedUserPropertiesOf;\n\n  /** \n    @notice\n    Stores the properties added by the mechanism to manage and schedule each funding cycle, packed into one storage slot.\n    \n    _projectId The ID of the project to get instrinsic properties of.\n    _configuration The funding cycle configuration to get properties of.\n  */\n  mapping(uint256 => mapping(uint256 => uint256)) private _packedIntrinsicPropertiesOf;\n\n  /** \n    @notice\n    Stores the metadata for each funding cycle configuration, packed into one storage slot.\n\n    _projectId The ID of the project to get metadata of.\n    _configuration The funding cycle configuration to get metadata of.\n  */\n  mapping(uint256 => mapping(uint256 => uint256)) private _metadataOf;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The latest funding cycle configuration for each project.\n\n    _projectId The ID of the project to get the latest funding cycle configuration of.\n  */\n  mapping(uint256 => uint256) public override latestConfigurationOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Get the funding cycle with the given configuration for the specified project.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n    @param _configuration The configuration of the funding cycle to get.\n\n    @return fundingCycle The funding cycle.\n  */\n  function get(uint256 _projectId, uint256 _configuration)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle)\n  {\n    return _getStructFor(_projectId, _configuration);\n  }\n\n  /**\n    @notice \n    The funding cycle that's next up for the specified project.\n\n    @dev\n    Returns an empty funding cycle with all properties set to 0 if a queued funding cycle of the project is not found.\n\n    @param _projectId The ID of the project to get the queued funding cycle of.\n\n    @return _fundingCycle The queued funding cycle.\n  */\n  function queuedOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (JBFundingCycle memory _fundingCycle)\n  {\n    // The project must have funding cycles.\n    if (latestConfigurationOf[_projectId] == 0) return _getStructFor(0, 0);\n\n    // Get a reference to the configuration of the standby funding cycle.\n    uint256 _standbyFundingCycleConfiguration = _standbyOf(_projectId);\n\n    // If it exists, return it's funding cycle if it is approved\n    if (_standbyFundingCycleConfiguration > 0) {\n      _fundingCycle = _getStructFor(_projectId, _standbyFundingCycleConfiguration);\n      if (_isApproved(_projectId, _fundingCycle)) return _fundingCycle;\n      // Resolve the funding cycle for the for the latest configured funding cycle.\n      _fundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn);\n    } else {\n      // Resolve the funding cycle for the for the latest configured funding cycle.\n      _fundingCycle = _getStructFor(_projectId, latestConfigurationOf[_projectId]);\n      // If the latest funding cycle starts in the future, it must start in the distant future\n      // since its not in standby. In this case base the queued cycles on the base cycle.\n      if (_fundingCycle.start > block.timestamp)\n        _fundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn);\n    }\n\n    // There's no queued if the current has a duration of 0.\n    if (_fundingCycle.duration == 0) return _getStructFor(0, 0);\n\n    // Check to see if this funding cycle's ballot is approved.\n    // If so, return a funding cycle based on it.\n    if (_isApproved(_projectId, _fundingCycle))\n      return _mockFundingCycleBasedOn(_fundingCycle, false);\n\n    // Get the funding cycle of its base funding cycle, which carries the last approved configuration.\n    _fundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn);\n\n    // Return a mock of the next up funding cycle.\n    return _mockFundingCycleBasedOn(_fundingCycle, false);\n  }\n\n  /**\n    @notice \n    The funding cycle that is currently active for the specified project.\n\n    @dev\n    Returns an empty funding cycle with all properties set to 0 if a current funding cycle of the project is not found.\n\n    @param _projectId The ID of the project to get the current funding cycle of.\n\n    @return fundingCycle The current funding cycle.\n  */\n  function currentOf(uint256 _projectId)\n    external\n    view\n    override\n    returns (JBFundingCycle memory fundingCycle)\n  {\n    // The project must have funding cycles.\n    if (latestConfigurationOf[_projectId] == 0) return _getStructFor(0, 0);\n\n    // Get a reference to the configuration of the eligible funding cycle.\n    uint256 _fundingCycleConfiguration = _eligibleOf(_projectId);\n\n    // Keep a reference to the eligible funding cycle.\n    JBFundingCycle memory _fundingCycle;\n\n    // If a standby funding cycle exists...\n    if (_fundingCycleConfiguration > 0) {\n      // Resolve the funding cycle for the eligible configuration.\n      _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n      // Check to see if this funding cycle's ballot is approved.\n      // If so, return it.\n      if (_isApproved(_projectId, _fundingCycle)) return _fundingCycle;\n\n      // If it hasn't been approved, set the funding cycle configuration to be the configuration of the funding cycle that it's based on,\n      // which carries the last approved configuration.\n      _fundingCycleConfiguration = _fundingCycle.basedOn;\n    } else {\n      // No upcoming funding cycle found that is eligible to become active,\n      // so use the last configuration.\n      _fundingCycleConfiguration = latestConfigurationOf[_projectId];\n\n      // Get the funding cycle for the latest ID.\n      _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n      // If it's not approved or if it hasn't yet started, get a reference to the funding cycle that the latest is based on, which has the latest approved configuration.\n      if (!_isApproved(_projectId, _fundingCycle) || block.timestamp < _fundingCycle.start)\n        _fundingCycleConfiguration = _fundingCycle.basedOn;\n    }\n\n    // The funding cycle cant be 0.\n    if (_fundingCycleConfiguration == 0) return _getStructFor(0, 0);\n\n    // The funding cycle to base a current one on.\n    _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n    // Return a mock of the current funding cycle.\n    return _mockFundingCycleBasedOn(_fundingCycle, true);\n  }\n\n  /** \n    @notice \n    The current ballot state of the project.\n\n    @param _projectId The ID of the project to check the ballot state of.\n\n    @return The current ballot's state.\n  */\n  function currentBallotStateOf(uint256 _projectId) external view override returns (JBBallotState) {\n    // Get a reference to the latest funding cycle configuration.\n    uint256 _fundingCycleConfiguration = latestConfigurationOf[_projectId];\n\n    // Resolve the funding cycle for the for the latest configuration.\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, _fundingCycleConfiguration);\n\n    return _ballotStateOf(_projectId, _fundingCycle.configuration, _fundingCycle.basedOn);\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  constructor(IJBDirectory _directory) JBControllerUtility(_directory) {}\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Configures the next eligible funding cycle for the specified project.\n\n    @dev\n    Only a project's current controller can configure its funding cycles.\n\n    @param _projectId The ID of the project being configured.\n    @param _data The funding cycle configuration.\n      @dev _data.duration The duration of the funding cycle. Measured in days. \n        Set to 0 for no expiry and to be able to reconfigure anytime.\n      @dev _data.discountRate A number from 0-1000000000 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\n        If it's 0, each funding cycle will have equal weight.\n        If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\n      @dev _data.ballot The new ballot that will be used to approve subsequent reconfigurations.\n    @param _metadata Data to associate with this funding cycle configuration.\n    @param _mustStartAtOrAfter The time before which the initialized funding cycle can't start.\n\n    @return The funding cycle that the configuration will take effect during.\n  */\n  function configureFor(\n    uint256 _projectId,\n    JBFundingCycleData calldata _data,\n    uint256 _metadata,\n    uint256 _mustStartAtOrAfter\n  ) external override onlyController(_projectId) returns (JBFundingCycle memory) {\n    // Duration must fit in a uint64.\n    if (_data.duration > type(uint64).max) {\n      revert INVALID_DURATION();\n    }\n\n    // Discount rate token must be less than or equal to 100%.\n    if (_data.discountRate > JBConstants.MAX_DISCOUNT_RATE) {\n      revert INVALID_DISCOUNT_RATE();\n    }\n\n    // Weight must fit into a uint88.\n    if (_data.weight > type(uint88).max) {\n      revert INVALID_WEIGHT();\n    }\n\n    // The configuration timestamp is now.\n    uint256 _configuration = block.timestamp;\n\n    // Set up a reconfiguration by configuring intrinsic properties.\n    _configureIntrinsicProperiesFor(\n      _projectId,\n      _configuration,\n      _data.weight,\n      // Must start on or after the current timestamp.\n      _mustStartAtOrAfter > block.timestamp ? _mustStartAtOrAfter : block.timestamp\n    );\n\n    // Efficiently stores a funding cycles provided user defined properties.\n    // If all user config properties are zero, no need to store anything as the default value will have the same outcome.\n    if (\n      _data.ballot != IJBFundingCycleBallot(address(0)) ||\n      _data.duration > 0 ||\n      _data.discountRate > 0\n    ) {\n      // ballot in bits 0-159 bytes.\n      uint256 packed = uint160(address(_data.ballot));\n      // duration in bits 160-223 bytes.\n      packed |= _data.duration << 160;\n      // discountRate in bits 224-255 bytes.\n      packed |= _data.discountRate << 224;\n\n      // Set in storage.\n      _packedUserPropertiesOf[_projectId][_configuration] = packed;\n    }\n\n    // Set the metadata if needed.\n    if (_metadata > 0) _metadataOf[_projectId][_configuration] = _metadata;\n\n    emit Configure(_configuration, _projectId, _data, _metadata, _mustStartAtOrAfter, msg.sender);\n\n    // Return the funding cycle for the new configuration.\n    return _getStructFor(_projectId, _configuration);\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Updates the configurable funding cycle for this project if it exists, otherwise creates one.\n\n    @param _projectId The ID of the project to find a configurable funding cycle for.\n    @param _configuration The time at which the configuration is occurring.\n    @param _weight The weight to store in the configured funding cycle.\n    @param _mustStartAtOrAfter The time before which the initialized funding cycle can't start.\n  */\n  function _configureIntrinsicProperiesFor(\n    uint256 _projectId,\n    uint256 _configuration,\n    uint256 _weight,\n    uint256 _mustStartAtOrAfter\n  ) private {\n    // If there's not yet a funding cycle for the project, initialize one.\n    if (latestConfigurationOf[_projectId] == 0) {\n      // Use an empty funding cycle as the base.\n      _initFor(_projectId, _getStructFor(0, 0), _configuration, _mustStartAtOrAfter, _weight);\n      return;\n    }\n\n    // Get the active funding cycle's configuration.\n    uint256 _currentConfiguration = _eligibleOf(_projectId);\n\n    // If an eligible funding cycle does not exist, get a reference to the latest funding cycle configuration for the project.\n    if (_currentConfiguration == 0)\n      // Get the latest funding cycle's configuration.\n      _currentConfiguration = latestConfigurationOf[_projectId];\n\n    // Get a reference to the funding cycle.\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, _currentConfiguration);\n\n    if (!_isApproved(_projectId, _fundingCycle))\n      // If it hasn't been approved, set the ID to be the based funding cycle,\n      // which carries the last approved configuration.\n      _currentConfiguration = _getStructFor(_projectId, _currentConfiguration).basedOn;\n\n    // Determine the funding cycle to use as the base.\n    JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _currentConfiguration);\n\n    // The time after the ballot of the provided funding cycle has expired.\n    // If the provided funding cycle has no ballot, return the current timestamp.\n    uint256 _timestampAfterBallot = _baseFundingCycle.ballot == IJBFundingCycleBallot(address(0))\n      ? 0\n      : _configuration + _baseFundingCycle.ballot.duration();\n\n    _initFor(\n      _projectId,\n      _baseFundingCycle,\n      _configuration,\n      // Can only start after the ballot.\n      _timestampAfterBallot > _mustStartAtOrAfter ? _timestampAfterBallot : _mustStartAtOrAfter,\n      _weight\n    );\n  }\n\n  /**\n    @notice \n    Initializes a funding cycle with the appropriate properties.\n\n    @param _projectId The ID of the project to which the funding cycle being initialized belongs.\n    @param _baseFundingCycle The funding cycle to base the initialized one on.\n    @param _configuration The configuration of the funding cycle being initialized.\n    @param _mustStartAtOrAfter The time before which the initialized funding cycle can't start.\n    @param _weight The weight to give the newly initialized funding cycle.\n  */\n  function _initFor(\n    uint256 _projectId,\n    JBFundingCycle memory _baseFundingCycle,\n    uint256 _configuration,\n    uint256 _mustStartAtOrAfter,\n    uint256 _weight\n  ) private {\n    // If there is no base, initialize a first cycle.\n    if (_baseFundingCycle.number == 0) {\n      // The first number is 1.\n      uint256 _number = 1;\n\n      // Set fresh intrinsic properties.\n      _packAndStoreIntrinsicPropertiesOf(\n        _configuration,\n        _projectId,\n        _number,\n        _weight,\n        _baseFundingCycle.configuration,\n        _mustStartAtOrAfter\n      );\n    } else {\n      // Derive the correct next start time from the base.\n      uint256 _start = _deriveStartFrom(_baseFundingCycle, _mustStartAtOrAfter);\n\n      // A weight of 1 is treated as a weight of 0.\n      // This is to allow a weight of 0 (default) to represent inheriting the discounted weight of the previous funding cycle.\n      _weight = _weight > 0\n        ? (_weight == 1 ? 0 : _weight)\n        : _deriveWeightFrom(_baseFundingCycle, _start);\n\n      // Derive the correct number.\n      uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start);\n\n      // Update the intrinsic properties.\n      _packAndStoreIntrinsicPropertiesOf(\n        _configuration,\n        _projectId,\n        _number,\n        _weight,\n        _baseFundingCycle.configuration,\n        _start\n      );\n    }\n\n    // Set the project's latest funding cycle configuration.\n    latestConfigurationOf[_projectId] = _configuration;\n\n    emit Init(_configuration, _projectId, _baseFundingCycle.configuration);\n  }\n\n  /**\n  @notice \n  Efficiently stores a funding cycle's provided intrinsic properties.\n\n  @param _configuration The configuration of the funding cycle to pack and store.\n  @param _projectId The ID of the project to which the funding cycle belongs.\n  @param _number The number of the funding cycle.\n  @param _weight The weight of the funding cycle.\n  @param _basedOn The configuration of the based funding cycle.\n  @param _start The start time of this funding cycle.\n*/\n  function _packAndStoreIntrinsicPropertiesOf(\n    uint256 _configuration,\n    uint256 _projectId,\n    uint256 _number,\n    uint256 _weight,\n    uint256 _basedOn,\n    uint256 _start\n  ) private {\n    // weight in bits 0-87.\n    uint256 packed = _weight;\n    // basedOn in bits 88-143.\n    packed |= _basedOn << 88;\n    // start in bits 144-199.\n    packed |= _start << 144;\n    // number in bits 200-255.\n    packed |= _number << 200;\n\n    // Set in storage.\n    _packedIntrinsicPropertiesOf[_projectId][_configuration] = packed;\n  }\n\n  /**\n    @notice \n    The project's stored funding cycle that hasn't yet started and should be used next, if one exists.\n\n    @dev\n    A value of 0 is returned if no funding cycle was found.\n\n    @dev\n    Assumes the project has a latest configuration.\n    \n    @param _projectId The ID of a project to look through for a standby cycle.\n\n    @return configuration The configuration of the standby funding cycle.\n  */\n  function _standbyOf(uint256 _projectId) private view returns (uint256 configuration) {\n    // Get a reference to the project's latest funding cycle.\n    configuration = latestConfigurationOf[_projectId];\n\n    // Get the necessary properties for the latest funding cycle.\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, configuration);\n\n    // There is no upcoming funding cycle if the latest funding cycle has already started.\n    if (block.timestamp >= _fundingCycle.start) return 0;\n\n    // If this is the first funding cycle, it is queued.\n    if (_fundingCycle.number == 1) return configuration;\n\n    // Get the necessary properties for the base funding cycle.\n    JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn);\n\n    // If the latest configuration doesn't start until after another base cycle, return 0.\n    if (\n      _baseFundingCycle.duration > 0 &&\n      block.timestamp < _fundingCycle.start - _baseFundingCycle.duration\n    ) return 0;\n  }\n\n  /**\n    @notice \n    The project's stored funding cycle that has started and hasn't yet expired.\n    \n    @dev\n    A value of 0 is returned if no funding cycle was found.\n\n    @dev\n    Assumes the project has a latest configuration.\n\n    @param _projectId The ID of the project to look through.\n\n    @return configuration The configuration of the active funding cycle.\n  */\n  function _eligibleOf(uint256 _projectId) private view returns (uint256 configuration) {\n    // Get a reference to the project's latest funding cycle.\n    configuration = latestConfigurationOf[_projectId];\n\n    // Get the latest funding cycle.\n    JBFundingCycle memory _fundingCycle = _getStructFor(_projectId, configuration);\n\n    // If the latest is expired, return an empty funding cycle.\n    // A duration of 0 can not be expired.\n    if (\n      _fundingCycle.duration > 0 && block.timestamp >= _fundingCycle.start + _fundingCycle.duration\n    ) return 0;\n\n    // Return the funding cycle's configuration if it has started.\n    if (block.timestamp >= _fundingCycle.start) return _fundingCycle.configuration;\n\n    // Get a reference to the cycle's base configuration.\n    JBFundingCycle memory _baseFundingCycle = _getStructFor(_projectId, _fundingCycle.basedOn);\n\n    // If the base cycle isn't eligible, the project has no eligible cycle.\n    // A duration of 0 is always eligible.\n    if (\n      _baseFundingCycle.duration > 0 &&\n      block.timestamp >= _baseFundingCycle.start + _baseFundingCycle.duration\n    ) return 0;\n\n    // Return the configuration that the latest funding cycle is based on.\n    configuration = _fundingCycle.basedOn;\n  }\n\n  /** \n    @notice \n    A view of the funding cycle that would be created based on the provided one if the project doesn't make a reconfiguration.\n\n    @dev\n    Returns an empty funding cycle if there can't be a mock funding cycle based on the provided one.\n\n    @param _baseFundingCycle The funding cycle that the resulting funding cycle should follow.\n    @param _allowMidCycle A flag indicating if the mocked funding cycle is allowed to already be mid cycle.\n\n    @return A mock of what the next funding cycle will be.\n  */\n  function _mockFundingCycleBasedOn(JBFundingCycle memory _baseFundingCycle, bool _allowMidCycle)\n    private\n    view\n    returns (JBFundingCycle memory)\n  {\n    // The distance of the current time to the start of the next possible funding cycle.\n    // If the returned mock cycle must not yet have started, the start time of the mock must be in the future.\n    // If the base funding cycle doesn't have a duration, no adjustment is necessary because the next cycle can start immediately.\n    uint256 _mustStartAtOrAfter = !_allowMidCycle || _baseFundingCycle.duration == 0\n      ? block.timestamp + 1\n      : block.timestamp - _baseFundingCycle.duration + 1;\n\n    // Derive what the start time should be.\n    uint256 _start = _deriveStartFrom(_baseFundingCycle, _mustStartAtOrAfter);\n\n    // Derive what the number should be.\n    uint256 _number = _deriveNumberFrom(_baseFundingCycle, _start);\n\n    return\n      JBFundingCycle(\n        _number,\n        _baseFundingCycle.configuration,\n        _baseFundingCycle.basedOn,\n        _start,\n        _baseFundingCycle.duration,\n        _deriveWeightFrom(_baseFundingCycle, _start),\n        _baseFundingCycle.discountRate,\n        _baseFundingCycle.ballot,\n        _baseFundingCycle.metadata\n      );\n  }\n\n  /**\n    @notice \n    Unpack a funding cycle's packed stored values into an easy-to-work-with funding cycle struct.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n    @param _configuration The funding cycle configuration to get the full struct for.\n\n    @return fundingCycle The funding cycle struct.\n  */\n  function _getStructFor(uint256 _projectId, uint256 _configuration)\n    private\n    view\n    returns (JBFundingCycle memory fundingCycle)\n  {\n    // Return an empty funding cycle if the configuration specified is 0.\n    if (_configuration == 0) return fundingCycle;\n\n    fundingCycle.configuration = _configuration;\n\n    uint256 _packedIntrinsicProperties = _packedIntrinsicPropertiesOf[_projectId][_configuration];\n\n    fundingCycle.weight = uint256(uint88(_packedIntrinsicProperties));\n    fundingCycle.basedOn = uint256(uint56(_packedIntrinsicProperties >> 88));\n    fundingCycle.start = uint256(uint56(_packedIntrinsicProperties >> 144));\n    fundingCycle.number = uint256(uint56(_packedIntrinsicProperties >> 200));\n\n    uint256 _packedUserProperties = _packedUserPropertiesOf[_projectId][_configuration];\n\n    fundingCycle.ballot = IJBFundingCycleBallot(address(uint160(_packedUserProperties)));\n    fundingCycle.duration = uint256(uint64(_packedUserProperties >> 160));\n    fundingCycle.discountRate = uint256(uint32(_packedUserProperties >> 224));\n\n    fundingCycle.metadata = _metadataOf[_projectId][_configuration];\n  }\n\n  /** \n    @notice \n    The date that is the nearest multiple of the specified funding cycle's duration from its end.\n\n    @param _baseFundingCycle The funding cycle to make the calculation for.\n    @param _mustStartAtOrAfter A date that the derived start must be on or come after.\n\n    @return start The next start time.\n  */\n  function _deriveStartFrom(JBFundingCycle memory _baseFundingCycle, uint256 _mustStartAtOrAfter)\n    private\n    pure\n    returns (uint256 start)\n  {\n    // A subsequent cycle to one with a duration of 0 should start as soon as possible.\n    if (_baseFundingCycle.duration == 0) return _mustStartAtOrAfter;\n\n    // The time when the funding cycle immediately after the specified funding cycle starts.\n    uint256 _nextImmediateStart = _baseFundingCycle.start + _baseFundingCycle.duration;\n\n    // If the next immediate start is now or in the future, return it.\n    if (_nextImmediateStart >= _mustStartAtOrAfter) return _nextImmediateStart;\n\n    // The amount of seconds since the `_mustStartAtOrAfter` time that results in a start time that might satisfy the specified constraints.\n    uint256 _timeFromImmediateStartMultiple = (_mustStartAtOrAfter - _nextImmediateStart) %\n      _baseFundingCycle.duration;\n\n    // A reference to the first possible start timestamp.\n    start = _mustStartAtOrAfter - _timeFromImmediateStartMultiple;\n\n    // Add increments of duration as necessary to satisfy the threshold.\n    while (_mustStartAtOrAfter > start) start = start + _baseFundingCycle.duration;\n  }\n\n  /** \n    @notice \n    The accumulated weight change since the specified funding cycle.\n\n    @param _baseFundingCycle The funding cycle to make the calculation with.\n    @param _start The start time to derive a weight for.\n\n    @return weight The next weight.\n  */\n  function _deriveWeightFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start)\n    private\n    pure\n    returns (uint256 weight)\n  {\n    // A subsequent cycle to one with a duration of 0 should have the next possible weight.\n    if (_baseFundingCycle.duration == 0)\n      return\n        PRBMath.mulDiv(\n          _baseFundingCycle.weight,\n          JBConstants.MAX_DISCOUNT_RATE - _baseFundingCycle.discountRate,\n          JBConstants.MAX_DISCOUNT_RATE\n        );\n\n    // The weight should be based off the base funding cycle's weight.\n    weight = _baseFundingCycle.weight;\n\n    // If the discount is 0, the weight doesn't change.\n    if (_baseFundingCycle.discountRate == 0) return weight;\n\n    // The difference between the start of the base funding cycle and the proposed start.\n    uint256 _startDistance = _start - _baseFundingCycle.start;\n\n    // Apply the base funding cycle's discount rate for each cycle that has passed.\n    uint256 _discountMultiple = _startDistance / _baseFundingCycle.duration;\n\n    for (uint256 i = 0; i < _discountMultiple; i++) {\n      // The number of times to apply the discount rate.\n      // Base the new weight on the specified funding cycle's weight.\n      weight = PRBMath.mulDiv(\n        weight,\n        JBConstants.MAX_DISCOUNT_RATE - _baseFundingCycle.discountRate,\n        JBConstants.MAX_DISCOUNT_RATE\n      );\n      // The calculation doesn't need to continue if the weight is 0.\n      if (weight == 0) break;\n    }\n  }\n\n  /** \n    @notice \n    The number of the next funding cycle given the specified funding cycle.\n\n    @param _baseFundingCycle The funding cycle to make the calculation with.\n    @param _start The start time to derive a number for.\n\n    @return The next number.\n  */\n  function _deriveNumberFrom(JBFundingCycle memory _baseFundingCycle, uint256 _start)\n    private\n    pure\n    returns (uint256)\n  {\n    // A subsequent cycle to one with a duration of 0 should be the next number.\n    if (_baseFundingCycle.duration == 0) return _baseFundingCycle.number + 1;\n\n    // The difference between the start of the base funding cycle and the proposed start.\n    uint256 _startDistance = _start - _baseFundingCycle.start;\n\n    // Find the number of base cycles that fit in the start distance.\n    return _baseFundingCycle.number + (_startDistance / _baseFundingCycle.duration);\n  }\n\n  /** \n  @notice \n  Checks to see if the provided funding cycle is approved according to the correct ballot.\n\n  @param _projectId The ID of the project to which the funding cycle belongs. \n  @param _fundingCycle The funding cycle to get an approval flag for.\n\n  @return The approval flag.\n*/\n  function _isApproved(uint256 _projectId, JBFundingCycle memory _fundingCycle)\n    private\n    view\n    returns (bool)\n  {\n    return\n      _ballotStateOf(_projectId, _fundingCycle.configuration, _fundingCycle.basedOn) ==\n      JBBallotState.Approved;\n  }\n\n  /**\n    @notice \n    A funding cycle configuration's current status.\n\n    @param _projectId The ID of the project to which the funding cycle belongs.\n    @param _configuration The funding cycle configuration to get the ballot state of.\n    @param _ballotFundingCycleConfiguration The configuration of the funding cycle which is configured with the ballot that should be used.\n\n    @return The funding cycle's configuration status.\n  */\n  function _ballotStateOf(\n    uint256 _projectId,\n    uint256 _configuration,\n    uint256 _ballotFundingCycleConfiguration\n  ) private view returns (JBBallotState) {\n    // If there is no ballot funding cycle, implicitly approve.\n    if (_ballotFundingCycleConfiguration == 0) return JBBallotState.Approved;\n\n    // Get the ballot funding cycle.\n    JBFundingCycle memory _ballotFundingCycle = _getStructFor(\n      _projectId,\n      _ballotFundingCycleConfiguration\n    );\n\n    // If there is no ballot, the ID is auto approved.\n    // Otherwise if the ballot's duration hasn't passed, its still active.\n    // Otherwise, return the ballot's state.\n    if (_ballotFundingCycle.ballot == IJBFundingCycleBallot(address(0)))\n      return JBBallotState.Approved;\n    else if (_ballotFundingCycle.ballot.duration() >= block.timestamp - _configuration)\n      return JBBallotState.Active;\n    else return _ballotFundingCycle.ballot.stateOf(_configuration);\n  }\n}\n"
    },
    "contracts/JBSplitsStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './libraries/JBOperations.sol';\n\n// Inheritance\nimport './abstract/JBOperatable.sol';\n\nimport './interfaces/IJBSplitsStore.sol';\nimport './interfaces/IJBDirectory.sol';\n\nimport './libraries/JBConstants.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror ALLOCATOR_AND_BENEFICIARY_ZERO_ADDRESS();\nerror INVALID_SPLIT_PERCENT();\nerror INVALID_TOTAL_PERCENT();\nerror PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n\n/**\n  @notice\n  Stores splits for each project.\n*/\ncontract JBSplitsStore is IJBSplitsStore, JBOperatable {\n  //*********************************************************************//\n  // --------------------- private stored properties ------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    All splits for each project ID's configurations.\n\n    _projectId is The ID of the project to get splits for.\n    _domain is An identifier within which the returned splits should be considered active.\n    _group The identifying group of the splits.\n  */\n  mapping(uint256 => mapping(uint256 => mapping(uint256 => JBSplit[]))) private _splitsOf;\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable override projects;\n\n  /** \n    @notice \n    The directory of terminals and controllers for projects.\n  */\n  IJBDirectory public immutable override directory;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Get all splits for the specified project ID, within the specified domain, for the specified group.\n\n    @param _projectId The ID of the project to get splits for.\n    @param _domain An identifier within which the returned splits should be considered active.\n    @param _group The identifying group of the splits.\n\n    @return An array of all splits for the project.\n    */\n  function splitsOf(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group\n  ) external view override returns (JBSplit[] memory) {\n    return _splitsOf[_projectId][_domain][_group];\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n    @param _directory A contract storing directories of terminals and controllers for each project.\n  */\n  constructor(\n    IJBOperatorStore _operatorStore,\n    IJBProjects _projects,\n    IJBDirectory _directory\n  ) JBOperatable(_operatorStore) {\n    projects = _projects;\n    directory = _directory;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Sets a project's splits.\n\n    @dev\n    Only the owner or operator of a project, or the current controller contract of the project, can set its splits.\n\n    @dev\n    The new splits must include any currently set splits that are locked.\n\n    @param _projectId The ID of the project for which splits are being added.\n    @param _domain An identifier within which the splits should be considered active.\n    @param _group An identifier between of splits being set. All splits within this _group must add up to within 100%.\n    @param _splits The splits to set.\n  */\n  function set(\n    uint256 _projectId,\n    uint256 _domain,\n    uint256 _group,\n    JBSplit[] memory _splits\n  )\n    external\n    override\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.SET_SPLITS,\n      address(directory.controllerOf(_projectId)) == msg.sender\n    )\n  {\n    // Get a reference to the project's current splits.\n    JBSplit[] memory _currentSplits = _splitsOf[_projectId][_domain][_group];\n\n    // Check to see if all locked splits are included.\n    for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\n      // If not locked, continue.\n      if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\n\n      // Keep a reference to whether or not the locked split being iterated on is included.\n      bool _includesLocked = false;\n\n      for (uint256 _j = 0; _j < _splits.length; _j++) {\n        // Check for sameness.\n        if (\n          _splits[_j].percent == _currentSplits[_i].percent &&\n          _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\n          _splits[_j].allocator == _currentSplits[_i].allocator &&\n          _splits[_j].projectId == _currentSplits[_i].projectId &&\n          // Allow lock extention.\n          _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\n        ) _includesLocked = true;\n      }\n      if (!_includesLocked) {\n        revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n      }\n    }\n\n    // Delete from storage so splits can be repopulated.\n    delete _splitsOf[_projectId][_domain][_group];\n\n    // Add up all the percents to make sure they cumulative are under 100%.\n    uint256 _percentTotal = 0;\n\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\n      // The percent should be greater than 0.\n      if (_splits[_i].percent == 0) {\n        revert INVALID_SPLIT_PERCENT();\n      }\n\n      // The allocator and the beneficiary shouldn't both be the zero address.\n      if (\n        _splits[_i].allocator == IJBSplitAllocator(address(0)) &&\n        _splits[_i].beneficiary == address(0)\n      ) {\n        revert ALLOCATOR_AND_BENEFICIARY_ZERO_ADDRESS();\n      }\n\n      // Add to the total percents.\n      _percentTotal = _percentTotal + _splits[_i].percent;\n\n      // Validate the total does not exceed the expected value.\n      if (_percentTotal > JBConstants.SPLITS_TOTAL_PERCENT) {\n        revert INVALID_TOTAL_PERCENT();\n      }\n\n      // Push the new split into the project's list of splits.\n      _splitsOf[_projectId][_domain][_group].push(_splits[_i]);\n\n      emit SetSplit(_projectId, _domain, _group, _splits[_i], msg.sender);\n    }\n  }\n}\n"
    },
    "contracts/JBDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport './abstract/JBOperatable.sol';\nimport './interfaces/IJBPaymentTerminal.sol';\nimport './interfaces/IJBDirectory.sol';\nimport './libraries/JBOperations.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror ADD_TERMINAL_ZERO_ADDRESS();\nerror CONTROLLER_ALREADY_IN_ALLOWLIST();\nerror CONTROLLER_NOT_IN_ALLOWLIST();\nerror INVALID_PROJECT_ID();\nerror PRIMARY_TERMINAL_ALREADY_SET();\nerror SET_CONTROLLER_ZERO_ADDRESS();\nerror SET_PRIMARY_TERMINAL_ZERO_ADDRESS();\n\n/**\n  @notice\n  Keeps a reference of which terminal contracts each project is currently accepting funds through, and which controller contract is managing each project's tokens and funding cycles.\n*/\ncontract JBDirectory is IJBDirectory, JBOperatable, Ownable {\n  //*********************************************************************//\n  // --------------------- private stored properties ------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    For each project ID, the terminals that are currently managing its funds.\n\n    _projectId The ID of the project to get terminals of.\n  */\n  mapping(uint256 => IJBPaymentTerminal[]) private _terminalsOf;\n\n  /** \n    @notice \n    The project's primary terminal for a token.\n\n    _projectId The ID of the project to get the primary terminal of.\n    _token The token to get the project's primary terminal of.\n  */\n  mapping(uint256 => mapping(address => IJBPaymentTerminal)) private _primaryTerminalOf;\n\n  /**\n    @notice\n    Addresses that can set a project's controller. These addresses/contracts have been vetted and verified by Juicebox owners.\n   */\n  mapping(address => bool) private _setControllerAllowlist;\n\n  //*********************************************************************//\n  // ---------------- public immutable stored properties --------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\n  */\n  IJBProjects public immutable override projects;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    For each project ID, the controller that manages how terminals interact with tokens and funding cycles.\n\n    _projectId The ID of the project to get the controller of.\n  */\n  mapping(uint256 => IJBController) public override controllerOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    For each project ID, the terminals that are currently managing its funds.\n\n    @param _projectId The ID of the project to get terminals of.\n\n    @return An array of terminal addresses.\n  */\n  function terminalsOf(uint256 _projectId) external view override returns (IJBPaymentTerminal[] memory) {\n    return _terminalsOf[_projectId];\n  }\n\n  /** \n    @notice\n    Whether or not a specified terminal is a terminal of the specified project.\n\n    @param _projectId The ID of the project to check within.\n    @param _terminal The address of the terminal to check for.\n\n    @return A flag indicating whether or not the specified terminal is a terminal of the specified project.\n  */\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\n    public\n    view\n    override\n    returns (bool)\n  {\n    for (uint256 _i; _i < _terminalsOf[_projectId].length; _i++)\n      if (_terminalsOf[_projectId][_i] == _terminal) return true;\n    return false;\n  }\n\n  /** \n    @notice\n    Whether or not a specified terminal is a terminal of the specified project.\n\n    @param _projectId The ID of the project to check within.\n    @param _contract The address of the terminal to check for.\n\n    @return A flag indicating whether or not the specified terminal is a terminal of the specified project.\n  */\n  function isTerminalDelegateOf(uint256 _projectId, address _contract)\n    public\n    view\n    override\n    returns (bool)\n  {\n    for (uint256 _i; _i < _terminalsOf[_projectId].length; _i++)\n      if (address(_terminalsOf[_projectId][_i].delegate()) == _contract) return true;\n    return false;\n  }\n\n  /** \n    @notice\n    The primary terminal that is managing funds for a project for a specified token.\n\n    @dev\n    The zero address is returned if a terminal isn't found for the specified token.\n\n    @param _projectId The ID of the project to get a terminal for.\n    @param _token The token the terminal accepts.\n\n    @return The primary terminal for the project for the specified token.\n  */\n  function primaryTerminalOf(uint256 _projectId, address _token)\n    public\n    view\n    override\n    returns (IJBPaymentTerminal)\n  {\n    // If a primary terminal for the token was specifically set, return it.\n    if (_primaryTerminalOf[_projectId][_token] != IJBPaymentTerminal(address(0)))\n      return _primaryTerminalOf[_projectId][_token];\n\n    // Return the first terminal which accepts the specified token.\n    for (uint256 _i; _i < _terminalsOf[_projectId].length; _i++) {\n      IJBPaymentTerminal _terminal = _terminalsOf[_projectId][_i];\n      if (_terminal.token() == _token) return _terminal;\n    }\n\n    // Not found.\n    return IJBPaymentTerminal(address(0));\n  }\n\n  /**\n    @notice\n    Whether or not a specified address is allowed to set controllers.\n\n    @param _address the address to check\n\n    @return A flag indicating whether or not the specified address can change controllers.\n  */\n  function isAllowedToSetController(address _address) public view override returns (bool) {\n    return _setControllerAllowlist[_address];\n  }\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _operatorStore A contract storing operator assignments.\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\n  */\n  constructor(IJBOperatorStore _operatorStore, IJBProjects _projects) JBOperatable(_operatorStore) {\n    projects = _projects;\n  }\n\n  /**\n    @notice\n    Update the controller that manages how terminals interact with the ecosystem.\n    @dev \n    A controller can be set if:\n    - the message sender is the project owner or an operator having the correct authorization.\n    - or, an allowedlisted address is setting an allowlisted controller.\n    @param _projectId The ID of the project to set a new controller for.\n    @param _controller The new controller to set.\n  */\n  function setControllerOf(uint256 _projectId, IJBController _controller)\n    external\n    override\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.SET_CONTROLLER,\n      (_setControllerAllowlist[address(_controller)] && _setControllerAllowlist[msg.sender])\n    )\n  {\n    // Can't set the zero address.\n    if (_controller == IJBController(address(0))) {\n      revert SET_CONTROLLER_ZERO_ADDRESS();\n    }\n\n    // If the controller is already set, nothing to do.\n    if (controllerOf[_projectId] == _controller) return;\n\n    // The project must exist.\n    if (projects.count() < _projectId) {\n      revert INVALID_PROJECT_ID();\n    }\n\n    // Set the new controller.\n    controllerOf[_projectId] = _controller;\n\n    emit SetController(_projectId, _controller, msg.sender);\n  }\n\n  /** \n    @notice \n    Add terminals to project's list of terminals.\n\n    @dev\n    Only a project owner, an operator, or its controller can add terminals.\n\n    @param _projectId The ID of the project having a terminal added.\n    @param _terminals The terminals to add.\n  */\n  function addTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals)\n    external\n    override\n    requirePermissionAllowingOverride(\n      projects.ownerOf(_projectId),\n      _projectId,\n      JBOperations.ADD_TERMINALS,\n      msg.sender == address(controllerOf[_projectId])\n    )\n  {\n    for (uint256 _i = 0; _i < _terminals.length; _i++) {\n      _addTerminalIfNeeded(_projectId, _terminals[_i], msg.sender);\n    }\n  }\n\n  /** \n    @notice \n    Remove a terminal from a project's list of terminals.\n\n    @dev\n    Only a project owner or an operator can remove one of its terminals. \n\n    @param _projectId The ID of the project having a terminal removed.\n    @param _terminal The terminal to remove.\n  */\n  function removeTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\n    external\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.REMOVE_TERMINAL)\n  {\n    // Get a reference to the terminals of the project.\n    IJBPaymentTerminal[] memory _terminals = _terminalsOf[_projectId];\n\n    // Delete the stored terminals for the project.\n    delete _terminalsOf[_projectId];\n\n    // Repopulate the stored terminals for the project, omitting the one being deleted.\n    for (uint256 _i; _i < _terminals.length; _i++)\n      // Don't include the terminal being deleted.\n      if (_terminals[_i] != _terminal) _terminalsOf[_projectId].push(_terminals[_i]);\n\n    // If the terminal that is being removed is the primary terminal for the token, delete it from being primary terminal.\n    if (_primaryTerminalOf[_projectId][_terminal.token()] == _terminal)\n      delete _primaryTerminalOf[_projectId][_terminal.token()];\n\n    emit RemoveTerminal(_projectId, _terminal, msg.sender);\n  }\n\n  /** \n    @notice\n    Project's can set which terminal should be their primary for a particular token.\n    This is useful in case a project has several terminals connected for a particular token.\n\n    @dev\n    The terminal will be set as the primary for the token that its vault accepts. \n\n    @param _projectId The ID of the project for which a primary token is being set.\n    @param _terminal The terminal to make primary.\n  */\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\n    external\n    override\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.SET_PRIMARY_TERMINAL)\n  {\n    // Can't set the zero address.\n    if (_terminal == IJBPaymentTerminal(address(0))) {\n      revert SET_PRIMARY_TERMINAL_ZERO_ADDRESS();\n    }\n\n    // Get a reference to the token that the terminal's vault accepts.\n    address _token = _terminal.token();\n\n    // Can't set this terminal as the primary if it already is.\n    if (_terminal == _primaryTerminalOf[_projectId][_token]) {\n      revert PRIMARY_TERMINAL_ALREADY_SET();\n    }\n\n    // Add the terminal to thge project if it hasn't been already.\n    _addTerminalIfNeeded(_projectId, _terminal, msg.sender);\n\n    // Store the terminal as the primary for the particular token.\n    _primaryTerminalOf[_projectId][_token] = _terminal;\n\n    emit SetPrimaryTerminal(_projectId, _token, _terminal, msg.sender);\n  }\n\n  /** \n    @notice\n    The owner (Juicebox multisig) can add addresses which are allowed to change\n    a project's controller. Those addresses are known and vetted controllers as well as\n    contracts designed to launch new projects. This is not a requirement for all controllers.\n    However, unknown controllers may require additional transactions to perform certain operations.\n\n    @dev\n    If you would like an address/contract allowlisted, please reach out to the Juicebox dev team.\n\n    @param _address the allowed address to be added.\n  */\n  function addToSetControllerAllowlist(address _address) external override onlyOwner {\n    // Check that the address is not already in the allowlist.\n    if (_setControllerAllowlist[_address]) {\n      revert CONTROLLER_ALREADY_IN_ALLOWLIST();\n    }\n\n    // Add the address to the allowlist.\n    _setControllerAllowlist[_address] = true;\n\n    emit AddToSetControllerAllowlist(_address, msg.sender);\n  }\n\n  /** \n    @notice\n    See `addKnownController(...)` for context. Removes an address from the allowlist.\n\n    @param _address The address to be removed.\n  */\n  function removeFromSetControllerAllowlist(address _address) external override onlyOwner {\n    // Check that the address is in the allowlist.\n    if (!_setControllerAllowlist[_address]) {\n      revert CONTROLLER_NOT_IN_ALLOWLIST();\n    }\n\n    // Remove the address from the allowlist.\n    delete _setControllerAllowlist[_address];\n\n    emit RemoveFromSetControllerAllowlist(_address, msg.sender);\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Add a terminal to a project's list of terminals if it hasn't been already.\n\n    @dev\n    If the terminal is equal to address zero, the transaction will be reverted.\n\n    @param _projectId The ID of the project having a terminal added.\n    @param _terminal The terminal to add.\n    @param _caller The original caller that added the terminal.\n  */\n  function _addTerminalIfNeeded(\n    uint256 _projectId,\n    IJBPaymentTerminal _terminal,\n    address _caller\n  ) private {\n    if (_terminal == IJBPaymentTerminal(address(0))) {\n      revert ADD_TERMINAL_ZERO_ADDRESS();\n    }\n\n    // Check that the terminal has not already been added.\n    if (isTerminalOf(_projectId, _terminal)) return;\n\n    // Set the new terminal.\n    _terminalsOf[_projectId].push(_terminal);\n\n    emit AddTerminal(_projectId, _terminal, _caller);\n  }\n}\n"
    },
    "contracts/JBProjects.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\nimport './abstract/JBOperatable.sol';\nimport './interfaces/IJBProjects.sol';\nimport './libraries/JBOperations.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror HANDLE_ALREADY_CHALLENGED();\nerror HANDLE_EMPTY();\nerror HANDLE_TAKEN();\nerror HANDLE_NOT_TAKEN();\nerror TRANSFER_HANDLE_UNAUTHORIZED();\n\n/** \n  @notice \n  Stores project ownership and identifying information.\n\n  @dev\n  Projects are represented as ERC-721's.\n*/\ncontract JBProjects is ERC721, IJBProjects, JBOperatable {\n  //*********************************************************************//\n  // --------------------- private stored constants -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    The number of seconds in 365 days.\n  */\n  uint256 private constant _SECONDS_IN_YEAR = 31536000;\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    The number of projects that have been created using this contract.\n\n    @dev\n    The count is incremented with each new project created. \n    The resulting ERC-721 token ID for each project is the newly incremented count value.\n  */\n  uint256 public override count = 0;\n\n  /** \n    @notice \n    The IPFS CID for each project, which can be used to reference the project's metadata.\n\n    @dev\n    This is optional for each project.\n\n    _projectId The ID of the project to which the URI belongs.\n    _domain The domain within which the metadata applies.\n  */\n  mapping(uint256 => mapping(uint256 => string)) public override metadataCidOf;\n\n  /** \n    @notice \n    The unique handle for each project.\n\n    @dev\n    Each project must have a handle.\n\n    _projectId The ID of the project to which the handle belongs.\n  */\n  mapping(uint256 => bytes32) public override handleOf;\n\n  /** \n    @notice \n    The ID of the project that each unique handle is currently referencing.\n\n    _handle The handle from which the project ID can be referenced.\n  */\n  mapping(bytes32 => uint256) public override idFor;\n\n  /** \n    @notice \n    The address that can reallocate a handle that have been transferred to it.\n\n    _handle The handle to look for the transfer address for.\n  */\n  mapping(bytes32 => address) public override transferAddressFor;\n\n  /** \n    @notice \n    The timestamps after which each handle can be openly claimed. \n\n    @dev\n    A value of 0 means a handle isn't yet being challenged.\n\n    _handle The handle to look for the challenge expiry of.\n  */\n  mapping(bytes32 => uint256) public override challengeExpiryOf;\n\n  //*********************************************************************//\n  // -------------------------- constructor ---------------------------- //\n  //*********************************************************************//\n\n  /** \n    @param _operatorStore A contract storing operator assignments.\n  */\n  constructor(IJBOperatorStore _operatorStore)\n    ERC721('Juicebox project', 'JUICEBOX')\n    JBOperatable(_operatorStore)\n  {}\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice \n    Create a new project for the specified owner, which mints an NFT (ERC-721) into their wallet.\n\n    @dev \n    Anyone can create a project on an owner's behalf.\n\n    @param _owner The address that will be the owner of the project.\n    @param _handle A unique string to associate with the project that will resolve to its token ID.\n    @param _metadata A struct containing an IPFS CID hash where metadata about the project has been uploaded, and domain within which the metadata applies. An empty string is acceptable if no metadata is being provided.\n\n    @return The token ID of the newly created project\n  */\n  function createFor(\n    address _owner,\n    bytes32 _handle,\n    JBProjectMetadata calldata _metadata\n  ) external override returns (uint256) {\n    // Handle must exist.\n    if (_handle == bytes32(0)) {\n      revert HANDLE_EMPTY();\n    }\n\n    // Handle must be unique.\n    if (idFor[_handle] != 0 || transferAddressFor[_handle] != address(0)) {\n      revert HANDLE_TAKEN();\n    }\n\n    // Increment the count, which will be used as the ID.\n    count++;\n\n    // Mint the project.\n    _safeMint(_owner, count);\n\n    // Store the handle for the project ID.\n    handleOf[count] = _handle;\n\n    // Store the project ID for the handle.\n    idFor[_handle] = count;\n\n    // Set the URI if one was provided for the specified domain.\n    if (bytes(_metadata.cid).length > 0) metadataCidOf[count][_metadata.domain] = _metadata.cid;\n\n    emit Create(count, _owner, _handle, _metadata, msg.sender);\n\n    return count;\n  }\n\n  /**\n    @notice \n    Allows a project owner to set the project's handle.\n\n    @dev \n    Only a project's owner or operator can set its handle.\n\n    @param _projectId The ID of the project who's handle is being changed.\n    @param _handle The new unique handle for the project.\n  */\n  function setHandleOf(uint256 _projectId, bytes32 _handle)\n    external\n    override\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_HANDLE)\n  {\n    // Handle must exist.\n    if (_handle == bytes32(0)) {\n      revert HANDLE_EMPTY();\n    }\n    // Handle must be unique.\n    if (idFor[_handle] != 0 || transferAddressFor[_handle] != address(0)) {\n      revert HANDLE_TAKEN();\n    }\n\n    // Register the change in the resolver.\n    idFor[handleOf[_projectId]] = 0;\n\n    // Store the handle for the project ID.\n    handleOf[_projectId] = _handle;\n\n    // Store the project ID for the handle.\n    idFor[_handle] = _projectId;\n\n    emit SetHandle(_projectId, _handle, msg.sender);\n  }\n\n  /**\n    @notice \n    Allows a project owner to set the project's IPFS CID hash where metadata about the project has been uploaded for various domains.\n\n    @dev \n    Only a project's owner or operator can set its metadata.\n\n    @param _projectId The ID of the project who's URI is being changed.\n    @param _metadata A struct containing an IPFS CID hash where metadata about the project has been uploaded, and domain within which the metadata applies. An empty string is acceptable if no metadata is being provided.\n  */\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata)\n    external\n    override\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_METADATA)\n  {\n    // Set the new uri within the specified domain.\n    metadataCidOf[_projectId][_metadata.domain] = _metadata.cid;\n\n    emit SetMetadata(_projectId, _metadata, msg.sender);\n  }\n\n  /**\n    @notice \n    Allows a project owner to transfer its handle to another address.\n\n    @dev \n    Only a project's owner or operator can transfer its handle.\n\n    @param _projectId The ID of the project to transfer the handle from.\n    @param _transferAddress The address that should be able to reallocate the transferred handle.\n    @param _newHandle The new unique handle for the project that will replace the transferred one.\n\n    @return handle The handle that has been transferred.\n  */\n  function transferHandleOf(\n    uint256 _projectId,\n    address _transferAddress,\n    bytes32 _newHandle\n  )\n    external\n    override\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.SET_HANDLE)\n    returns (bytes32 handle)\n  {\n    // A new handle must have been provided.\n    if (_newHandle == bytes32(0)) {\n      revert HANDLE_EMPTY();\n    }\n\n    // The new handle must be available.\n    if (idFor[_newHandle] != 0 || transferAddressFor[_newHandle] != address(0)) {\n      revert HANDLE_TAKEN();\n    }\n\n    // Get a reference to the project's current handle.\n    handle = handleOf[_projectId];\n\n    // Remove the project ID for the transferred handle.\n    idFor[handle] = 0;\n\n    // Store the new handle for the project ID.\n    idFor[_newHandle] = _projectId;\n\n    // Store the project ID for the new handle.\n    handleOf[_projectId] = _newHandle;\n\n    // Give the address the power to transfer the current handle.\n    transferAddressFor[handle] = _transferAddress;\n\n    emit TransferHandle(_projectId, _transferAddress, handle, _newHandle, msg.sender);\n  }\n\n  /**\n    @notice \n    Allows an address to claim an handle that has been transferred to it, and apply it to a project of theirs.\n    A handle can also be claimed if it has been challenged and the challenge has succeeded.\n\n    @dev \n    Only a project's owner or operator can claim a handle for it.\n\n    @param _handle The handle being claimed.\n    @param _transferAddress The address to which the handle has been transferred, which can now assign the handle to a project.\n    @param _projectId The ID of the project to assign to the claimed handle.\n  */\n  function claimHandle(\n    bytes32 _handle,\n    address _transferAddress,\n    uint256 _projectId\n  )\n    external\n    override\n    requirePermission(_transferAddress, _projectId, JBOperations.CLAIM_HANDLE)\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.CLAIM_HANDLE)\n  {\n    // The handle must have been transferred to the specified address,\n    // or the handle challenge must have expired before being renewed.\n    if (\n      transferAddressFor[_handle] != _transferAddress &&\n      (challengeExpiryOf[_handle] == 0 || block.timestamp <= challengeExpiryOf[_handle])\n    ) {\n      revert TRANSFER_HANDLE_UNAUTHORIZED();\n    }\n\n    // Remove the project ID for the current handle of the specified project.\n    idFor[handleOf[_projectId]] = 0;\n\n    // Set the project ID for the provided handle to be the specified project.\n    idFor[_handle] = _projectId;\n\n    // Set the new handle.\n    handleOf[_projectId] = _handle;\n\n    // Set the handle as not being transferred.\n    transferAddressFor[_handle] = address(0);\n\n    // Reset the challenge to 0.\n    challengeExpiryOf[_handle] = 0;\n\n    emit ClaimHandle(_projectId, _transferAddress, _handle, msg.sender);\n  }\n\n  /** \n    @notice\n    Allows anyone to challenge a project's handle. After one year, the handle can be claimed by anyone if the challenge isn't answered by the handle's project.\n    This can be used to make sure a handle belonging to a stale project isn't lost forever.\n\n    @param _handle The handle to challenge.\n  */\n  function challengeHandle(bytes32 _handle) external override {\n    // Get a reference to the ID of the project to which the handle belongs.\n    uint256 _projectId = idFor[_handle];\n\n    // No need to challenge a handle that's not taken.\n    if (_projectId == 0) {\n      revert HANDLE_NOT_TAKEN();\n    }\n\n    // No need to challenge again if a handle is already being challenged.\n    if (challengeExpiryOf[_handle] != 0) {\n      revert HANDLE_ALREADY_CHALLENGED();\n    }\n\n    // The challenge will expire in a year, at which point the handle can be claimed if it has yet to be renewed.\n    uint256 _challengeExpiry = block.timestamp + _SECONDS_IN_YEAR;\n\n    // Store the challenge expiry for the handle.\n    challengeExpiryOf[_handle] = _challengeExpiry;\n\n    emit ChallengeHandle(_handle, _projectId, _challengeExpiry, msg.sender);\n  }\n\n  /** \n    @notice\n    Allows a project to renew its handle, which cancels any pending challenges.\n\n    @dev \n    Only a project's owner or operator can renew its handle.\n\n    @param _projectId The ID of the project to which the handle being renewed belongs. \n  */\n  function renewHandleOf(uint256 _projectId)\n    external\n    override\n    requirePermission(ownerOf(_projectId), _projectId, JBOperations.RENEW_HANDLE)\n  {\n    // Get the handle of the project.\n    bytes32 _handle = handleOf[_projectId];\n\n    // Reset the challenge to 0.\n    challengeExpiryOf[_handle] = 0;\n\n    emit RenewHandle(_handle, _projectId, msg.sender);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/JBOperatorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './interfaces/IJBOperatorStore.sol';\n\n//*********************************************************************//\n// --------------------------- custom errors ------------------------- //\n//*********************************************************************//\nerror PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n/** \n  @notice\n  Stores operator permissions for all addresses. Addresses can give permissions to any other address to take specific indexed actions on their behalf.\n*/\ncontract JBOperatorStore is IJBOperatorStore {\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    The permissions that an operator has to operate on a specific domain.\n    \n    @dev\n    An account can give an operator permissions that only pertain to a specific domain.\n    There is no domain with a value of 0 – accounts can use the 0 domain to give an operator\n    permissions to all domains on their behalf.\n\n    _operator The address of the operator.\n    _account The address of the account being operated.\n    _domain The domain within which the permissions apply.\n  */\n  mapping(address => mapping(address => mapping(uint256 => uint256))) public override permissionsOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Whether or not an operator has the permission to take a certain action pertaining to the specified domain.\n\n    @param _operator The operator to check.\n    @param _account The account that has given out permissions to the operator.\n    @param _domain The domain that the operator has been given permissions to operate.\n    @param _permissionIndex The permission indexes to check for.\n\n    @return Whether the operator has the specified permission.\n  */\n  function hasPermission(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) external view override returns (bool) {\n    if (_permissionIndex > 255) {\n      revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n    }\n    return (((permissionsOf[_operator][_account][_domain] >> _permissionIndex) & 1) == 1);\n  }\n\n  /** \n    @notice \n    Whether or not an operator has the permission to take certain actions pertaining to the specified domain.\n\n    @param _operator The operator to check.\n    @param _account The account that has given out permissions to the operator.\n    @param _domain The domain that the operator has been given permissions to operate.\n    @param _permissionIndexes An array of permission indexes to check for.\n\n    @return Whether the operator has all specified permissions.\n  */\n  function hasPermissions(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256[] calldata _permissionIndexes\n  ) external view override returns (bool) {\n    for (uint256 _i = 0; _i < _permissionIndexes.length; _i++) {\n      uint256 _permissionIndex = _permissionIndexes[_i];\n      if (_permissionIndex > 255) {\n        revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n      }\n      if (((permissionsOf[_operator][_account][_domain] >> _permissionIndex) & 1) == 0)\n        return false;\n    }\n    return true;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Sets permissions for an operators.\n\n    @dev\n    Only an address can set its own operators.\n\n    @param _operatorData The data that specifies the params for the operator being set.\n      @dev _operatorData.operators The operators to whom permissions will be given.\n      @dev _operatorData.domains Lists the domain that each operator is being given permissions to operate. A value of 0 serves as a wildcard domain. Applications can specify their own domain system.\n      @dev _operatorData.permissionIndexes Lists the permission indexes to set for each operator. Indexes must be between 0-255. Applications can specify the significance of each index.\n  */\n  function setOperator(JBOperatorData calldata _operatorData) external override {\n    // Pack the indexes into a uint256.\n    uint256 _packed = _packedPermissions(_operatorData.permissionIndexes);\n\n    // Store the new value.\n    permissionsOf[_operatorData.operator][msg.sender][_operatorData.domain] = _packed;\n\n    emit SetOperator(\n      _operatorData.operator,\n      msg.sender,\n      _operatorData.domain,\n      _operatorData.permissionIndexes,\n      _packed\n    );\n  }\n\n  /**\n    @notice\n    Sets permissions for many operators.\n\n    @dev\n    Only an address can set its own operators.\n\n    @param _operatorData The data that specifies the params for each operator being set.\n      @dev _operatorData.operators The operators to whom permissions will be given.\n      @dev _operatorData.domains Lists the domain that each operator is being given permissions to operate. A value of 0 serves as a wildcard domain. Applications can specify their own domain system.\n      @dev _operatorData.permissionIndexes Lists the permission indexes to set for each operator. Indexes must be between 0-255. Applications can specify the significance of each index.\n  */\n  function setOperators(JBOperatorData[] calldata _operatorData) external override {\n    for (uint256 _i = 0; _i < _operatorData.length; _i++) {\n      // Pack the indexes into a uint256.\n      uint256 _packed = _packedPermissions(_operatorData[_i].permissionIndexes);\n\n      // Store the new value.\n      permissionsOf[_operatorData[_i].operator][msg.sender][_operatorData[_i].domain] = _packed;\n\n      emit SetOperator(\n        _operatorData[_i].operator,\n        msg.sender,\n        _operatorData[_i].domain,\n        _operatorData[_i].permissionIndexes,\n        _packed\n      );\n    }\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Converts an array of permission indexes to a packed uint256.\n\n    @param _indexes The indexes of the permissions to pack.\n\n    @return packed The packed result.\n  */\n  function _packedPermissions(uint256[] calldata _indexes) private pure returns (uint256 packed) {\n    for (uint256 _i = 0; _i < _indexes.length; _i++) {\n      uint256 _index = _indexes[_i];\n      if (_index > 255) {\n        revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n      }\n      // Turn the bit at the index on.\n      packed |= 1 << _index;\n    }\n  }\n}\n"
    },
    "contracts/abstract/JBProject.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport './../interfaces/IJBDirectory.sol';\nimport './../libraries/JBTokens.sol';\n\n// --------------------------- custom errors -------------------------- //\n//*********************************************************************//\nerror INSUFFICIENT_BALANCE();\nerror PROJECT_NOT_FOUND();\nerror TERMINAL_NOT_FOUND();\n\n/** \n  @notice A contract that inherits from JuiceboxProject can use Juicebox as a business-model-as-a-service.\n  @dev The owner of the contract makes admin decisions such as:\n    - Which address is the funding cycle owner, which can withdraw funds from the funding cycle.\n    - Should this project's Tickets be migrated to a new TerminalV1. \n*/\nabstract contract JBProject is Ownable {\n  /// @notice The direct deposit terminals.\n  IJBDirectory public immutable directory;\n\n  /// @notice The ID of the project that should be used to forward this contract's received payments.\n  uint256 public projectId;\n\n  /** \n      @param _projectId The ID of the project that should be used to forward this contract's received payments.\n      @param _directory A directory of a project's current Juicebox terminal to receive payments in.\n    */\n  constructor(uint256 _projectId, IJBDirectory _directory) {\n    projectId = _projectId;\n    directory = _directory;\n  }\n\n  /** \n      Received funds go straight to the project.\n    */\n  receive() external payable {\n    _pay(msg.sender, '', false, JBTokens.ETH);\n  }\n\n  /** \n      @notice Allows the project that is being managed to be set.\n      @param _projectId The ID of the project that is being managed.\n    */\n  function setProjectId(uint256 _projectId) external onlyOwner {\n    projectId = _projectId;\n  }\n\n  /** \n      @notice Make a payment to this project.\n      @param _beneficiary The address who will receive tickets from this fee.\n      @param _memo A memo that will be included in the published event.\n      @param _preferClaimedTokens Whether ERC20's should be claimed automatically if they have been issued.\n    */\n  function pay(\n    address _beneficiary,\n    string memory _memo,\n    bool _preferClaimedTokens,\n    address _token\n  ) external payable {\n    _pay(_beneficiary, _memo, _preferClaimedTokens, _token);\n  }\n\n  /** \n      @notice Take a fee for this project from this contract.\n      @param _projectId The ID of the project being funded.\n      @param _amount The payment amount.\n      @param _beneficiary The address who will receive tickets from this fee.\n      @param _memo A memo that will be included in the published event.\n      @param _preferClaimedTokens Whether ERC20's should be claimed automatically if they have been issued.\n    */\n  function _fundTreasury(\n    uint256 _projectId,\n    uint256 _amount,\n    address _beneficiary,\n    string memory _memo,\n    bool _preferClaimedTokens,\n    address _token\n  ) internal {\n    if (_projectId == 0) {\n      revert PROJECT_NOT_FOUND();\n    }\n\n    // Find the terminal for this contract's project.\n    IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_projectId, _token);\n\n    // There must be a terminal.\n    if (_terminal == IJBPaymentTerminal(address(0))) {\n      revert TERMINAL_NOT_FOUND();\n    }\n\n    // There must be enough funds in the contract to take the fee.\n    if (address(this).balance < _amount) {\n      revert INSUFFICIENT_BALANCE();\n    }\n\n    // Send funds to the terminal.\n    _terminal.pay{value: _amount}(\n      _projectId,\n      _beneficiary,\n      0,\n      _preferClaimedTokens,\n      _memo,\n      bytes('')\n    );\n  }\n\n  /** \n      @notice See the documentation from `pay`.\n    */\n  function _pay(\n    address _beneficiary,\n    string memory _memo,\n    bool _preferClaimedTokens,\n    address _token\n  ) private {\n    if (projectId == 0) {\n      revert PROJECT_NOT_FOUND();\n    }\n\n    // Get the terminal for this contract's project.\n    IJBPaymentTerminal _terminal = directory.primaryTerminalOf(projectId, _token);\n\n    // There must be a terminal.\n    if (_terminal == IJBPaymentTerminal(address(0))) {\n      revert TERMINAL_NOT_FOUND();\n    }\n\n    _terminal.pay{value: msg.value}(\n      projectId,\n      _beneficiary,\n      0,\n      _preferClaimedTokens,\n      _memo,\n      bytes('')\n    );\n  }\n}\n"
    },
    "contracts/test/JBFakeProject.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n// Inheritance\nimport '../abstract/JBProject.sol';\n\n/**\n  @dev \n  Fake Juicebox project used for testing.\n*/\ncontract JBFakeProject is JBProject {\n  constructor(uint256 _projectId, IJBDirectory _directory) JBProject(_projectId, _directory) {}\n\n  /**\n    @dev\n    Example API that calls internal _fundTreasury function. The example here is an NFT mint\n    function that routes funds to a Juicebox project.\n   */\n  function mint(\n    uint256 _projectId,\n    uint256 _amount,\n    address _beneficiary,\n    string memory _memo,\n    bool _preferClaimedTokens,\n    address _token\n  ) external payable {\n    // Mint NFT, etc.\n    // ...\n\n    // Fund Juicebox treasury.\n    _fundTreasury(_projectId, _amount, _beneficiary, _memo, _preferClaimedTokens, _token);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 4294967295
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
