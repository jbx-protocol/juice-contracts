{
  "address": "0xb6301A0DBd16F57Ca880e3088e1405505cd44622",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "_fundingCycleStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBTokenStore",
          "name": "_tokenStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBSplitsStore",
          "name": "_splitsStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "INVALID_DISTRIBUTION_LIMIT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_DISTRIBUTION_LIMIT_CURRENCY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_OVERFLOW_ALLOWANCE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_OVERFLOW_ALLOWANCE_CURRENCY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_CURRENT_CONTROLLER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CANT_MIGRATE_TO_CURRENT_CONTROLLER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHANGE_TOKEN_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FUNDING_CYCLE_ALREADY_LAUNCHED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_BALLOT_REDEMPTION_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_REDEMPTION_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_RESERVED_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_RESERVED_RATE_AND_BENEFICIARY_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MIGRATION_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NO_BURNABLE_TOKENS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_TOKENS_TO_MINT",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "BurnTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beneficiaryTokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeReservedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBSplit",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeToReservedTokenSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IJBController",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservedRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MintTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IJBPaymentTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimitCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowanceCurrency",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFundAccessConstraints",
          "name": "constraints",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetFundAccessConstraints",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        }
      ],
      "name": "burnTokensOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBToken",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeTokenOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "distributeReservedTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "distributionLimitCurrencyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "distributionLimitOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycleStore",
      "outputs": [
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "issueTokenFor",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reservedRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballotRedemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pausePay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseDistributions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseRedeem",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseMint",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseBurn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowChangeToken",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTerminalMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowControllerMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "holdFees",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useLocalBalanceForRedemptions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForPay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForRedeem",
              "type": "bool"
            },
            {
              "internalType": "contract IJBFundingCycleDataSource",
              "name": "dataSource",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleMetadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_mustStartAtOrAfter",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "preferClaimed",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "percent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "projectId",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IJBSplitAllocator",
                  "name": "allocator",
                  "type": "address"
                }
              ],
              "internalType": "struct JBSplit[]",
              "name": "splits",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct JBGroupedSplits[]",
          "name": "_groupedSplits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IJBPaymentTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimitCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowanceCurrency",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundAccessConstraints[]",
          "name": "_fundAccessConstraints",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IJBPaymentTerminal[]",
          "name": "_terminals",
          "type": "address[]"
        }
      ],
      "name": "launchFundingCycleFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "domain",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBProjectMetadata",
          "name": "_projectMetadata",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reservedRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballotRedemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pausePay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseDistributions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseRedeem",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseMint",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseBurn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowChangeToken",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTerminalMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowControllerMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "holdFees",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useLocalBalanceForRedemptions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForPay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForRedeem",
              "type": "bool"
            },
            {
              "internalType": "contract IJBFundingCycleDataSource",
              "name": "dataSource",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleMetadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_mustStartAtOrAfter",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "preferClaimed",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "percent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "projectId",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IJBSplitAllocator",
                  "name": "allocator",
                  "type": "address"
                }
              ],
              "internalType": "struct JBSplit[]",
              "name": "splits",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct JBGroupedSplits[]",
          "name": "_groupedSplits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IJBPaymentTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimitCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowanceCurrency",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundAccessConstraints[]",
          "name": "_fundAccessConstraints",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IJBPaymentTerminal[]",
          "name": "_terminals",
          "type": "address[]"
        }
      ],
      "name": "launchProjectFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBController",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_reservedRate",
          "type": "uint256"
        }
      ],
      "name": "mintTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beneficiaryTokenCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "overflowAllowanceCurrencyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "overflowAllowanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBController",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prepForMigrationOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reservedRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballotRedemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pausePay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseDistributions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseRedeem",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseMint",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseBurn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowChangeToken",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTerminalMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowControllerMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "holdFees",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useLocalBalanceForRedemptions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForPay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForRedeem",
              "type": "bool"
            },
            {
              "internalType": "contract IJBFundingCycleDataSource",
              "name": "dataSource",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleMetadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_mustStartAtOrAfter",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "preferClaimed",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "percent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "projectId",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IJBSplitAllocator",
                  "name": "allocator",
                  "type": "address"
                }
              ],
              "internalType": "struct JBSplit[]",
              "name": "splits",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct JBGroupedSplits[]",
          "name": "_groupedSplits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IJBPaymentTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimitCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowanceCurrency",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundAccessConstraints[]",
          "name": "_fundAccessConstraints",
          "type": "tuple[]"
        }
      ],
      "name": "reconfigureFundingCyclesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservedRate",
          "type": "uint256"
        }
      ],
      "name": "reservedTokenBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitsStore",
      "outputs": [
        {
          "internalType": "contract IJBSplitsStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenStore",
      "outputs": [
        {
          "internalType": "contract IJBTokenStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4ab30fe936e34f190542b34a2aac276eb878bee84d7160214a9418f8bc4b50f",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0xb6301A0DBd16F57Ca880e3088e1405505cd44622",
    "transactionIndex": 3,
    "gasUsed": "4825797",
    "logsBloom": "0x
    "blockHash": "0x056bc7833edd35819a3910239dd3d1ad86c48e948f71b9b1091c0fd6d86f9be2",
    "transactionHash": "0xe4ab30fe936e34f190542b34a2aac276eb878bee84d7160214a9418f8bc4b50f",
    "logs": [],
    "blockNumber": 10088541,
    "cumulativeGasUsed": "5066602",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xacD28185AE65adc711481c0aECB0B99Ac8608698",
    "0x05ea48673d41DC75fbDC8f32fA825be69c1BD5B2",
    "0xedfCFdCB621aFA76781eFBe7586fAe83D1578Ac2",
    "0x6B0bD488c2122Ad61513437f2e0619d53d128895",
    "0xBd0A8D0617eea36A4399d3d61027e338c4Faa36f",
    "0x53C0CE78b61B29816b548C705dAc4cD4839693b6"
  ],
  "numDeployments": 2,
  "solcInputHash": "84ad828d78fb9f44a0d0346f7fab757e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"_fundingCycleStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBTokenStore\",\"name\":\"_tokenStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"_splitsStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"INVALID_DISTRIBUTION_LIMIT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_DISTRIBUTION_LIMIT_CURRENCY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_OVERFLOW_ALLOWANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_OVERFLOW_ALLOWANCE_CURRENCY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_CURRENT_CONTROLLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANT_MIGRATE_TO_CURRENT_CONTROLLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHANGE_TOKEN_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUNDING_CYCLE_ALREADY_LAUNCHED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_BALLOT_REDEMPTION_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_REDEMPTION_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_RESERVED_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_RESERVED_RATE_AND_BENEFICIARY_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MIGRATION_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_BURNABLE_TOKENS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_TOKENS_TO_MINT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaryTokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeReservedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBSplit\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeToReservedTokenSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IJBController\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct JBFundAccessConstraints\",\"name\":\"constraints\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetFundAccessConstraints\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"}],\"name\":\"burnTokensOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeTokenOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"distributeReservedTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"distributionLimitCurrencyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"distributionLimitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycleStore\",\"outputs\":[{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"issueTokenFor\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowChangeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useLocalBalanceForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForPay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"contract IJBFundingCycleDataSource\",\"name\":\"dataSource\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleMetadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"_groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"_fundAccessConstraints\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IJBPaymentTerminal[]\",\"name\":\"_terminals\",\"type\":\"address[]\"}],\"name\":\"launchFundingCycleFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"internalType\":\"struct JBProjectMetadata\",\"name\":\"_projectMetadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowChangeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useLocalBalanceForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForPay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"contract IJBFundingCycleDataSource\",\"name\":\"dataSource\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleMetadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"_groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"_fundAccessConstraints\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IJBPaymentTerminal[]\",\"name\":\"_terminals\",\"type\":\"address[]\"}],\"name\":\"launchProjectFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBController\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_reservedRate\",\"type\":\"uint256\"}],\"name\":\"mintTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beneficiaryTokenCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"overflowAllowanceCurrencyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"overflowAllowanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBController\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prepForMigrationOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowChangeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useLocalBalanceForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForPay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"contract IJBFundingCycleDataSource\",\"name\":\"dataSource\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleMetadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"_groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"_fundAccessConstraints\",\"type\":\"tuple[]\"}],\"name\":\"reconfigureFundingCyclesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedRate\",\"type\":\"uint256\"}],\"name\":\"reservedTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitsStore\",\"outputs\":[{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStore\",\"outputs\":[{\"internalType\":\"contract IJBTokenStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A project can transfer control from this contract to another allowed controller contract at any time. Inherits from: IJBController - general interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the Juicebox protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\",\"kind\":\"dev\",\"methods\":{\"burnTokensOf(address,uint256,uint256,string,bool)\":{\"details\":\"Only a token's holder, a designated operator, or a project's terminal's delegate can burn it.\",\"params\":{\"_holder\":\"The account that is having its tokens burned.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_preferClaimedTokens\":\"A flag indicating whether ERC20's should be burned first if they have been issued.\",\"_projectId\":\"The ID of the project to which the tokens being burned belong.\",\"_tokenCount\":\"The number of tokens to burn.\"}},\"changeTokenOf(uint256,address,address)\":{\"details\":\"Only a project owner or operator can change its token.\",\"params\":{\"_newOwner\":\"An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\",\"_projectId\":\"The ID of the project to which the changed token belongs.\",\"_token\":\"The new token.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_fundingCycleStore\":\"A contract storing all funding cycle configurations.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\",\"_splitsStore\":\"A contract that stores splits for each project.\",\"_tokenStore\":\"A contract that manages token minting and burning.\"}},\"distributeReservedTokensOf(uint256,string)\":{\"params\":{\"_memo\":\"A memo to pass along to the emitted event.\",\"_projectId\":\"The ID of the project to which the reserved tokens belong.\"},\"returns\":{\"_0\":\"The amount of minted reserved tokens.\"}},\"distributionLimitCurrencyOf(uint256,uint256,address)\":{\"params\":{\"_configuration\":\"The configuration during which the distribution limit currency applies.\",\"_projectId\":\"The ID of the project to get the distribution limit currency of.\",\"_terminal\":\"The terminal from which distributions are being limited.\"}},\"distributionLimitOf(uint256,uint256,address)\":{\"params\":{\"_configuration\":\"The configuration during which the distribution limit applies.\",\"_projectId\":\"The ID of the project to get the distribution limit of.\",\"_terminal\":\"The terminal from which distributions are being limited.\"}},\"issueTokenFor(uint256,string,string)\":{\"details\":\"Deploys a project's ERC-20 token contract.Only a project owner or operator can issue its token.\",\"params\":{\"_name\":\"The ERC-20's name.\",\"_projectId\":\"The ID of the project being issued tokens.\",\"_symbol\":\"The ERC-20's symbol.\"}},\"launchFundingCycleFor(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[])\":{\"details\":\"Only a project owner or operator can launch its funding cycles.\",\"params\":{\"_data\":\"A JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\",\"_fundAccessConstraints\":\"An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.\",\"_groupedSplits\":\"An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.\",\"_metadata\":\"A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\",\"_mustStartAtOrAfter\":\"The time before which the configured funding cycle can't start.\",\"_projectId\":\"The ID of the project to launch funding cycles for.\",\"_terminals\":\"Payment terminals to add for the project.\"},\"returns\":{\"configuration\":\"The configuration of the funding cycle that was successfully created.\"}},\"launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[])\":{\"details\":\"Each operation within this transaction can be done in sequence separately.Anyone can deploy a project on an owner's behalf.\",\"params\":{\"_data\":\"A JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\",\"_fundAccessConstraints\":\"An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.\",\"_groupedSplits\":\"An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.\",\"_metadata\":\"A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\",\"_mustStartAtOrAfter\":\"The time before which the configured funding cycle can't start.\",\"_owner\":\"The address to set as the owner of the project. The project ERC-721 will be owned by this address.\",\"_projectMetadata\":\"A link to associate with the project within a particular domain. This can be updated any time by the owner of the project.\",\"_terminals\":\"Payment terminals to add for the project.\"},\"returns\":{\"projectId\":\"The ID of the project.\"}},\"migrate(uint256,address)\":{\"details\":\"Only a project's owner or a designated operator can migrate it.\",\"params\":{\"_projectId\":\"The ID of the project that will be migrated from this controller.\",\"_to\":\"The controller to which the project is migrating.\"}},\"mintTokensOf(uint256,uint256,address,string,bool,uint256)\":{\"details\":\"Only a project's owner, a designated operator, or one of its terminal's delegate can mint its tokens.\",\"params\":{\"_beneficiary\":\"The account that the tokens are being minted for.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_preferClaimedTokens\":\"A flag indicating whether ERC20's should be minted if they have been issued.\",\"_projectId\":\"The ID of the project to which the tokens being minted belong.\",\"_reservedRate\":\"The reserved rate to use when minting tokens. A positive amount will reduce the token count minted to the beneficiary, instead being reserved for preprogrammed splits. This number is out of 10000.\",\"_tokenCount\":\"The amount of tokens to mint.\"},\"returns\":{\"beneficiaryTokenCount\":\"The amount of tokens minted for the beneficiary.\"}},\"overflowAllowanceCurrencyOf(uint256,uint256,address)\":{\"params\":{\"_configuration\":\"The configuration of the during which the allowance currency applies.\",\"_projectId\":\"The ID of the project to get the overflow allowance currency of.\",\"_terminal\":\"The terminal managing the overflow.\"}},\"overflowAllowanceOf(uint256,uint256,address)\":{\"params\":{\"_configuration\":\"The configuration of the during which the allowance applies.\",\"_projectId\":\"The ID of the project to get the overflow allowance of.\",\"_terminal\":\"The terminal managing the overflow.\"}},\"prepForMigrationOf(uint256,address)\":{\"params\":{\"_projectId\":\"The ID of the project that will be migrated to this controller.\"}},\"reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[])\":{\"details\":\"Only a project's owner or a designated operator can configure its funding cycles.\",\"params\":{\"_data\":\"A JBFundingCycleData data structure that defines the project's funding cycle that will be queued. These properties will remain fixed for the duration of the funding cycle.\",\"_fundAccessConstraints\":\"An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.\",\"_groupedSplits\":\"An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.\",\"_metadata\":\"A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\",\"_mustStartAtOrAfter\":\"The time before which the configured funding cycle can't start.\",\"_projectId\":\"The ID of the project whose funding cycles are being reconfigured.\"},\"returns\":{\"_0\":\"The configuration of the funding cycle that was successfully reconfigured.\"}},\"reservedTokenBalanceOf(uint256,uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get a reserved token balance of.\",\"_reservedRate\":\"The reserved rate to use when making the calculation.\"},\"returns\":{\"_0\":\"The current amount of reserved tokens.\"}}},\"stateVariables\":{\"_packedDistributionLimitDataOf\":{\"details\":\"bits 0-247: The amount of token that a project can withdraw per funding cycle.bits 248-255: The currency of amount that a project can withdraw. _projectId The ID of the project to get the packed distribution limit data of. _configuration The configuration during which the packed distribution limit data applies. _terminal The terminal from which distributions are being limited.\"},\"_packedOverflowAllowanceDataOf\":{\"details\":\"bits 0-247: The amount of overflow that a project is allowed to tap into on-demand throughout configuration.bits 248-255: The currency of the amount of overflow that a project is allowed to tap. _projectId The ID of the project to get the packed overflow allowance data of. _configuration The configuration during which the packed overflow allowance data applies. _terminal The terminal managing the overflow.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"burnTokensOf(address,uint256,uint256,string,bool)\":{\"notice\":\"Burns a token holder's supply.\"},\"changeTokenOf(uint256,address,address)\":{\"notice\":\"Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\"},\"directory()\":{\"notice\":\"The directory of terminals and controllers for projects.\"},\"distributeReservedTokensOf(uint256,string)\":{\"notice\":\"Distributes all outstanding reserved tokens for a project.\"},\"distributionLimitCurrencyOf(uint256,uint256,address)\":{\"notice\":\"The currency of the amount of that a project can withdraw per funding cycle.\"},\"distributionLimitOf(uint256,uint256,address)\":{\"notice\":\"The amount of token that a project can withdraw per funding cycle.\"},\"fundingCycleStore()\":{\"notice\":\"The contract storing all funding cycle configurations.\"},\"issueTokenFor(uint256,string,string)\":{\"notice\":\"Issues an owner's ERC-20 Tokens that'll be used when claiming tokens.\"},\"launchFundingCycleFor(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[])\":{\"notice\":\"Creates a funding cycle for an already existing project ERC-721.\"},\"launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[])\":{\"notice\":\"Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits.\"},\"migrate(uint256,address)\":{\"notice\":\"Allows a project to migrate from this controller to another.\"},\"mintTokensOf(uint256,uint256,address,string,bool,uint256)\":{\"notice\":\"Mint new token supply into an account.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"overflowAllowanceCurrencyOf(uint256,uint256,address)\":{\"notice\":\"The currency of the amount of overflow that a project is allowed to tap into.\"},\"overflowAllowanceOf(uint256,uint256,address)\":{\"notice\":\"The amount of overflow that a project is allowed to tap into on-demand throughout configuration.\"},\"prepForMigrationOf(uint256,address)\":{\"notice\":\"Allows other controllers to signal to this one that a migration is expected for the specified project.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership.\"},\"reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[])\":{\"notice\":\"Configures the properties of the current funding cycle if the project hasn't distributed tokens yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot.\"},\"reservedTokenBalanceOf(uint256,uint256)\":{\"notice\":\"Gets the amount of reserved tokens that a project has available to distribute.\"},\"splitsStore()\":{\"notice\":\"The contract that stores splits for each project.\"},\"tokenStore()\":{\"notice\":\"The contract that manages token minting and burning.\"}},\"notice\":\"Stitches together funding cycles and community tokens, making sure all activity is accounted for and correct.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBController.sol\":\"JBController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0x42821345981bc0434a90ba2268a2f5278dfe9e38166981d72fc7f3b776a29495\",\"license\":\"Unlicense\"},\"@paulrberg/contracts/math/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\",\"keccak256\":\"0xe170989159224c21fd720fa923e6c8111005f767f6e5a266034f82a1b4348f93\",\"license\":\"Unlicense\"},\"contracts/JBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\\n\\nimport './libraries/JBConstants.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\n\\nimport './interfaces/IJBTokenStore.sol';\\nimport './interfaces/IJBProjects.sol';\\nimport './interfaces/IJBSplitsStore.sol';\\nimport './interfaces/IJBPaymentTerminal.sol';\\nimport './interfaces/IJBOperatorStore.sol';\\nimport './interfaces/IJBFundingCycleDataSource.sol';\\nimport './interfaces/IJBPrices.sol';\\nimport './interfaces/IJBController.sol';\\n\\nimport './structs/JBFundingCycleData.sol';\\nimport './structs/JBFundingCycleMetadata.sol';\\nimport './structs/JBFundAccessConstraints.sol';\\nimport './structs/JBGroupedSplits.sol';\\nimport './structs/JBProjectMetadata.sol';\\n\\n// Inheritance\\nimport './interfaces/IJBController.sol';\\nimport './abstract/JBOperatable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror INVALID_DISTRIBUTION_LIMIT();\\nerror INVALID_DISTRIBUTION_LIMIT_CURRENCY();\\nerror INVALID_OVERFLOW_ALLOWANCE();\\nerror INVALID_OVERFLOW_ALLOWANCE_CURRENCY();\\nerror BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\\nerror NOT_CURRENT_CONTROLLER();\\nerror CANT_MIGRATE_TO_CURRENT_CONTROLLER();\\nerror CHANGE_TOKEN_NOT_ALLOWED();\\nerror FUNDING_CYCLE_ALREADY_LAUNCHED();\\nerror INVALID_BALLOT_REDEMPTION_RATE();\\nerror INVALID_RESERVED_RATE();\\nerror INVALID_RESERVED_RATE_AND_BENEFICIARY_ZERO_ADDRESS();\\nerror INVALID_REDEMPTION_RATE();\\nerror MIGRATION_NOT_ALLOWED();\\nerror MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE();\\nerror NO_BURNABLE_TOKENS();\\nerror ZERO_TOKENS_TO_MINT();\\n\\n/**\\n  @notice\\n  Stitches together funding cycles and community tokens, making sure all activity is accounted for and correct.\\n\\n  @dev\\n  A project can transfer control from this contract to another allowed controller contract at any time.\\n\\n  Inherits from:\\n\\n  IJBController - general interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the Juicebox protocol's rules.\\n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\\n*/\\ncontract JBController is IJBController, JBOperatable, ReentrancyGuard {\\n  // A library that parses the packed funding cycle metadata into a more friendly format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  event SetFundAccessConstraints(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBFundAccessConstraints constraints,\\n    address caller\\n  );\\n  event DistributeReservedTokens(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 count,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event DistributeToReservedTokenSplit(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBSplit split,\\n    uint256 count,\\n    address caller\\n  );\\n\\n  event MintTokens(\\n    address indexed beneficiary,\\n    uint256 indexed projectId,\\n    uint256 indexed count,\\n    string memo,\\n    uint256 reservedRate,\\n    address caller\\n  );\\n\\n  event BurnTokens(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 count,\\n    string memo,\\n    address caller\\n  );\\n\\n  event Migrate(uint256 indexed projectId, IJBController to, address caller);\\n\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The difference between the processed token tracker of a project and the project's token's total supply is the amount of tokens that\\n    still need to have reserves minted against them.\\n\\n    _projectId The ID of the project to get the tracker of.\\n  */\\n  mapping(uint256 => int256) private _processedTokenTrackerOf;\\n\\n  /**\\n    @notice\\n    Data regarding the distribution limit of a project during a configuration.\\n\\n    @dev\\n    bits 0-247: The amount of token that a project can withdraw per funding cycle.\\n\\n    @dev\\n    bits 248-255: The currency of amount that a project can withdraw.\\n\\n    _projectId The ID of the project to get the packed distribution limit data of.\\n    _configuration The configuration during which the packed distribution limit data applies.\\n    _terminal The terminal from which distributions are being limited.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => uint256)))\\n    private _packedDistributionLimitDataOf;\\n\\n  /**\\n    @notice\\n    Data regarding the overflow allowance of a project during a configuration.\\n\\n    @dev\\n    bits 0-247: The amount of overflow that a project is allowed to tap into on-demand throughout configuration.\\n\\n    @dev\\n    bits 248-255: The currency of the amount of overflow that a project is allowed to tap.\\n\\n    _projectId The ID of the project to get the packed overflow allowance data of.\\n    _configuration The configuration during which the packed overflow allowance data applies.\\n    _terminal The terminal managing the overflow.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => uint256)))\\n    private _packedOverflowAllowanceDataOf;\\n\\n  //*********************************************************************//\\n  // --------------- public immutable stored properties ---------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership.\\n  */\\n  IJBProjects public immutable projects;\\n\\n  /**\\n    @notice\\n    The contract storing all funding cycle configurations.\\n  */\\n  IJBFundingCycleStore public immutable fundingCycleStore;\\n\\n  /**\\n    @notice\\n    The contract that manages token minting and burning.\\n  */\\n  IJBTokenStore public immutable tokenStore;\\n\\n  /**\\n    @notice\\n    The contract that stores splits for each project.\\n  */\\n  IJBSplitsStore public immutable splitsStore;\\n\\n  /**\\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable directory;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The amount of token that a project can withdraw per funding cycle.\\n\\n    @param _projectId The ID of the project to get the distribution limit of.\\n    @param _configuration The configuration during which the distribution limit applies.\\n    @param _terminal The terminal from which distributions are being limited.\\n  */\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view override returns (uint256) {\\n    return uint256(uint248(_packedDistributionLimitDataOf[_projectId][_configuration][_terminal]));\\n  }\\n\\n  /**\\n    @notice\\n    The currency of the amount of that a project can withdraw per funding cycle.\\n\\n    @param _projectId The ID of the project to get the distribution limit currency of.\\n    @param _configuration The configuration during which the distribution limit currency applies.\\n    @param _terminal The terminal from which distributions are being limited.\\n  */\\n  function distributionLimitCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view override returns (uint256) {\\n    return _packedDistributionLimitDataOf[_projectId][_configuration][_terminal] >> 248;\\n  }\\n\\n  /**\\n    @notice\\n    The amount of overflow that a project is allowed to tap into on-demand throughout configuration.\\n\\n    @param _projectId The ID of the project to get the overflow allowance of.\\n    @param _configuration The configuration of the during which the allowance applies.\\n    @param _terminal The terminal managing the overflow.\\n  */\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view override returns (uint256) {\\n    return uint256(uint248(_packedOverflowAllowanceDataOf[_projectId][_configuration][_terminal]));\\n  }\\n\\n  /**\\n    @notice\\n    The currency of the amount of overflow that a project is allowed to tap into.\\n\\n    @param _projectId The ID of the project to get the overflow allowance currency of.\\n    @param _configuration The configuration of the during which the allowance currency applies.\\n    @param _terminal The terminal managing the overflow.\\n  */\\n  function overflowAllowanceCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view override returns (uint256) {\\n    return _packedOverflowAllowanceDataOf[_projectId][_configuration][_terminal] >> 248;\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount of reserved tokens that a project has available to distribute.\\n\\n    @param _projectId The ID of the project to get a reserved token balance of.\\n    @param _reservedRate The reserved rate to use when making the calculation.\\n\\n    @return The current amount of reserved tokens.\\n  */\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return\\n      _reservedTokenAmountFrom(\\n        _processedTokenTrackerOf[_projectId],\\n        _reservedRate,\\n        tokenStore.totalSupplyOf(_projectId)\\n      );\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------------- constructor -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\\n    @param _tokenStore A contract that manages token minting and burning.\\n    @param _splitsStore A contract that stores splits for each project.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBFundingCycleStore _fundingCycleStore,\\n    IJBTokenStore _tokenStore,\\n    IJBSplitsStore _splitsStore\\n  ) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n    directory = _directory;\\n    fundingCycleStore = _fundingCycleStore;\\n    tokenStore = _tokenStore;\\n    splitsStore = _splitsStore;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- external transactions ----------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits.\\n\\n    @dev\\n    Each operation within this transaction can be done in sequence separately.\\n\\n    @dev\\n    Anyone can deploy a project on an owner's behalf.\\n\\n    @param _owner The address to set as the owner of the project. The project ERC-721 will be owned by this address.\\n    @param _projectMetadata A link to associate with the project within a particular domain. This can be updated any time by the owner of the project.\\n    @param _data A JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n    @param _metadata A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n    @param _mustStartAtOrAfter The time before which the configured funding cycle can't start.\\n    @param _groupedSplits An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.\\n    @param _fundAccessConstraints An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.\\n    @param _terminals Payment terminals to add for the project.\\n\\n    @return projectId The ID of the project.\\n  */\\n  function launchProjectFor(\\n    address _owner,\\n    JBProjectMetadata calldata _projectMetadata,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals\\n  ) external returns (uint256 projectId) {\\n    // Mint the project into the wallet of the message sender.\\n    projectId = projects.createFor(_owner, _projectMetadata);\\n\\n    // Set this contract as the project's controller in the directory.\\n    directory.setControllerOf(projectId, this);\\n\\n    _configure(\\n      projectId,\\n      _data,\\n      _metadata,\\n      _mustStartAtOrAfter,\\n      _groupedSplits,\\n      _fundAccessConstraints\\n    );\\n\\n    // Add the provided terminals to the list of terminals.\\n    if (_terminals.length > 0) directory.addTerminalsOf(projectId, _terminals);\\n  }\\n\\n  /**\\n    @notice\\n    Creates a funding cycle for an already existing project ERC-721.\\n\\n    @dev\\n    Only a project owner or operator can launch its funding cycles.\\n\\n    @param _projectId The ID of the project to launch funding cycles for.\\n    @param _data A JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n    @param _metadata A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n    @param _mustStartAtOrAfter The time before which the configured funding cycle can't start.\\n    @param _groupedSplits An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.\\n    @param _fundAccessConstraints An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.\\n    @param _terminals Payment terminals to add for the project.\\n\\n    @return configuration The configuration of the funding cycle that was successfully created.\\n  */\\n  function launchFundingCycleFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals\\n  )\\n    external\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\\n    returns (uint256 configuration)\\n  {\\n    // If there is a previous configuration, reconfigureFundingCyclesOf should be called instead\\n    if (fundingCycleStore.latestConfigurationOf(_projectId) != 0) {\\n      revert FUNDING_CYCLE_ALREADY_LAUNCHED();\\n    }\\n\\n    // Set this contract as the project's controller in the directory.\\n    directory.setControllerOf(_projectId, this);\\n\\n    configuration = _configure(\\n      _projectId,\\n      _data,\\n      _metadata,\\n      _mustStartAtOrAfter,\\n      _groupedSplits,\\n      _fundAccessConstraints\\n    );\\n\\n    // Add the provided terminals to the list of terminals.\\n    if (_terminals.length > 0) directory.addTerminalsOf(_projectId, _terminals);\\n  }\\n\\n  /**\\n    @notice\\n    Configures the properties of the current funding cycle if the project hasn't distributed tokens yet, or\\n    sets the properties of the proposed funding cycle that will take effect once the current one expires\\n    if it is approved by the current funding cycle's ballot.\\n\\n    @dev\\n    Only a project's owner or a designated operator can configure its funding cycles.\\n\\n    @param _projectId The ID of the project whose funding cycles are being reconfigured.\\n    @param _data A JBFundingCycleData data structure that defines the project's funding cycle that will be queued. These properties will remain fixed for the duration of the funding cycle.\\n    @param _metadata A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n    @param _mustStartAtOrAfter The time before which the configured funding cycle can't start.\\n    @param _groupedSplits An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.\\n    @param _fundAccessConstraints An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.\\n\\n    @return The configuration of the funding cycle that was successfully reconfigured.\\n  */\\n  function reconfigureFundingCyclesOf(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints\\n  )\\n    external\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\\n    returns (uint256)\\n  {\\n    return\\n      _configure(\\n        _projectId,\\n        _data,\\n        _metadata,\\n        _mustStartAtOrAfter,\\n        _groupedSplits,\\n        _fundAccessConstraints\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Issues an owner's ERC-20 Tokens that'll be used when claiming tokens.\\n\\n    @dev\\n    Deploys a project's ERC-20 token contract.\\n\\n    @dev\\n    Only a project owner or operator can issue its token.\\n\\n    @param _projectId The ID of the project being issued tokens.\\n    @param _name The ERC-20's name.\\n    @param _symbol The ERC-20's symbol.\\n  */\\n  function issueTokenFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  )\\n    external\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.ISSUE)\\n    returns (IJBToken token)\\n  {\\n    // Issue the token in the store.\\n    return tokenStore.issueFor(_projectId, _name, _symbol);\\n  }\\n\\n  /**\\n    @notice\\n    Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\\n\\n    @dev\\n    Only a project owner or operator can change its token.\\n\\n    @param _projectId The ID of the project to which the changed token belongs.\\n    @param _token The new token.\\n    @param _newOwner An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\\n  */\\n  function changeTokenOf(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  )\\n    external\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.CHANGE_TOKEN)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    if (!_fundingCycle.changeTokenAllowed()) {\\n      revert CHANGE_TOKEN_NOT_ALLOWED();\\n    }\\n\\n    // Change the token in the store.\\n    tokenStore.changeFor(_projectId, _token, _newOwner);\\n  }\\n\\n  /**\\n    @notice\\n    Mint new token supply into an account.\\n\\n    @dev\\n    Only a project's owner, a designated operator, or one of its terminal's delegate can mint its tokens.\\n\\n    @param _projectId The ID of the project to which the tokens being minted belong.\\n    @param _tokenCount The amount of tokens to mint.\\n    @param _beneficiary The account that the tokens are being minted for.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _preferClaimedTokens A flag indicating whether ERC20's should be minted if they have been issued.\\n    @param _reservedRate The reserved rate to use when minting tokens. A positive amount will reduce the token count minted to the beneficiary, instead being reserved for preprogrammed splits. This number is out of 10000.\\n\\n    @return beneficiaryTokenCount The amount of tokens minted for the beneficiary.\\n  */\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reservedRate\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermissionAllowingOverride(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.MINT,\\n      directory.isTerminalDelegateOf(_projectId, msg.sender)\\n    )\\n    returns (uint256 beneficiaryTokenCount)\\n  {\\n    if (_reservedRate > JBConstants.MAX_RESERVED_RATE) {\\n      revert INVALID_RESERVED_RATE();\\n    }\\n\\n    // Can't send to the zero address.\\n    if (_reservedRate != JBConstants.MAX_RESERVED_RATE && _beneficiary == address(0)) {\\n      revert INVALID_RESERVED_RATE_AND_BENEFICIARY_ZERO_ADDRESS();\\n    }\\n\\n    // There should be tokens to mint.\\n    if (_tokenCount == 0) {\\n      revert ZERO_TOKENS_TO_MINT();\\n    }\\n\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // If the message sender is not a terminal delegate, the current funding cycle must not be paused.\\n    if (_fundingCycle.mintPaused() && !directory.isTerminalDelegateOf(_projectId, msg.sender)) {\\n      revert MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE();\\n    }\\n\\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE) {\\n      // Subtract the total weighted amount from the tracker so the full reserved token amount can be printed later.\\n      _processedTokenTrackerOf[_projectId] =\\n        _processedTokenTrackerOf[_projectId] -\\n        int256(_tokenCount);\\n    } else {\\n      // The unreserved token count that will be minted for the beneficiary.\\n      beneficiaryTokenCount = PRBMath.mulDiv(\\n        _tokenCount,\\n        JBConstants.MAX_RESERVED_RATE - _reservedRate,\\n        JBConstants.MAX_RESERVED_RATE\\n      );\\n\\n      // Mint the tokens.\\n      tokenStore.mintFor(_beneficiary, _projectId, beneficiaryTokenCount, _preferClaimedTokens);\\n\\n      if (_reservedRate == 0)\\n        // If there's no reserved rate, increment the tracker with the newly minted tokens.\\n        _processedTokenTrackerOf[_projectId] =\\n          _processedTokenTrackerOf[_projectId] +\\n          int256(beneficiaryTokenCount);\\n    }\\n\\n    emit MintTokens(_beneficiary, _projectId, _tokenCount, _memo, _reservedRate, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Burns a token holder's supply.\\n\\n    @dev\\n    Only a token's holder, a designated operator, or a project's terminal's delegate can burn it.\\n\\n    @param _holder The account that is having its tokens burned.\\n    @param _projectId The ID of the project to which the tokens being burned belong.\\n    @param _tokenCount The number of tokens to burn.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _preferClaimedTokens A flag indicating whether ERC20's should be burned first if they have been issued.\\n  */\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  )\\n    external\\n    override\\n    nonReentrant\\n    requirePermissionAllowingOverride(\\n      _holder,\\n      _projectId,\\n      JBOperations.BURN,\\n      directory.isTerminalDelegateOf(_projectId, msg.sender)\\n    )\\n  {\\n    // There should be tokens to burn\\n    if (_tokenCount == 0) {\\n      revert NO_BURNABLE_TOKENS();\\n    }\\n\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // If the message sender is not a terminal delegate, the current funding cycle must not be paused.\\n    if (_fundingCycle.burnPaused() && !directory.isTerminalDelegateOf(_projectId, msg.sender)) {\\n      revert BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\\n    }\\n\\n    // Update the token tracker so that reserved tokens will still be correctly mintable.\\n    _processedTokenTrackerOf[_projectId] =\\n      _processedTokenTrackerOf[_projectId] -\\n      int256(_tokenCount);\\n\\n    // Burn the tokens.\\n    tokenStore.burnFrom(_holder, _projectId, _tokenCount, _preferClaimedTokens);\\n\\n    emit BurnTokens(_holder, _projectId, _tokenCount, _memo, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Distributes all outstanding reserved tokens for a project.\\n\\n    @param _projectId The ID of the project to which the reserved tokens belong.\\n    @param _memo A memo to pass along to the emitted event.\\n\\n    @return The amount of minted reserved tokens.\\n  */\\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    external\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    return _distributeReservedTokensOf(_projectId, _memo);\\n  }\\n\\n  /**\\n    @notice\\n    Allows other controllers to signal to this one that a migration is expected for the specified project.\\n\\n    @param _projectId The ID of the project that will be migrated to this controller.\\n  */\\n  function prepForMigrationOf(uint256 _projectId, IJBController) external override {\\n    // This controller must not be the project's current controller.\\n    if (directory.controllerOf(_projectId) == this) {\\n      revert CANT_MIGRATE_TO_CURRENT_CONTROLLER();\\n    }\\n\\n    // Set the tracker as the total supply.\\n    _processedTokenTrackerOf[_projectId] = int256(tokenStore.totalSupplyOf(_projectId));\\n  }\\n\\n  /**\\n    @notice\\n    Allows a project to migrate from this controller to another.\\n\\n    @dev\\n    Only a project's owner or a designated operator can migrate it.\\n\\n    @param _projectId The ID of the project that will be migrated from this controller.\\n    @param _to The controller to which the project is migrating.\\n  */\\n  function migrate(uint256 _projectId, IJBController _to)\\n    external\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_CONTROLLER)\\n    nonReentrant\\n  {\\n    // This controller must be the project's current controller.\\n    if (directory.controllerOf(_projectId) != this) {\\n      revert NOT_CURRENT_CONTROLLER();\\n    }\\n\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Migration must be allowed\\n    if (!_fundingCycle.controllerMigrationAllowed()) {\\n      revert MIGRATION_NOT_ALLOWED();\\n    }\\n\\n    // All reserved tokens must be minted before migrating.\\n    if (uint256(_processedTokenTrackerOf[_projectId]) != tokenStore.totalSupplyOf(_projectId))\\n      _distributeReservedTokensOf(_projectId, '');\\n\\n    // Make sure the new controller is prepped for the migration.\\n    _to.prepForMigrationOf(_projectId, this);\\n\\n    // Set the new controller.\\n    directory.setControllerOf(_projectId, _to);\\n\\n    emit Migrate(_projectId, _to, msg.sender);\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    See docs for `distributeReservedTokens`\\n  */\\n  function _distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    private\\n    returns (uint256 count)\\n  {\\n    // Get the current funding cycle to read the reserved rate from.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Get a reference to new total supply of tokens before minting reserved tokens.\\n    uint256 _totalTokens = tokenStore.totalSupplyOf(_projectId);\\n\\n    // Get a reference to the number of tokens that need to be minted.\\n    count = _reservedTokenAmountFrom(\\n      _processedTokenTrackerOf[_projectId],\\n      _fundingCycle.reservedRate(),\\n      _totalTokens\\n    );\\n\\n    // Set the tracker to be the new total supply.\\n    _processedTokenTrackerOf[_projectId] = int256(_totalTokens + count);\\n\\n    // Get a reference to the project owner.\\n    address _owner = projects.ownerOf(_projectId);\\n\\n    // Distribute tokens to splits and get a reference to the leftover amount to mint after all splits have gotten their share.\\n    uint256 _leftoverTokenCount = count == 0\\n      ? 0\\n      : _distributeToReservedTokenSplitsOf(_projectId, _fundingCycle, count);\\n\\n    // Mint any leftover tokens to the project owner.\\n    if (_leftoverTokenCount > 0) tokenStore.mintFor(_owner, _projectId, _leftoverTokenCount, false);\\n\\n    emit DistributeReservedTokens(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _owner,\\n      count,\\n      _leftoverTokenCount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Distributed tokens to the splits according to the specified funding cycle configuration.\\n\\n    @param _projectId The ID of the project for which reserved token splits are being distributed.\\n    @param _fundingCycle The funding cycle to base the token distribution on.\\n    @param _amount The total amount of tokens to mint.\\n\\n    @return leftoverAmount If the splits percents dont add up to 100%, the leftover amount is returned.\\n  */\\n  function _distributeToReservedTokenSplitsOf(\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _amount\\n  ) private returns (uint256 leftoverAmount) {\\n    // Set the leftover amount to the initial amount.\\n    leftoverAmount = _amount;\\n\\n    // Get a reference to the project's reserved token splits.\\n    JBSplit[] memory _splits = splitsStore.splitsOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      JBSplitsGroups.RESERVED_TOKENS\\n    );\\n\\n    //Transfer between all splits.\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // Get a reference to the split being iterated on.\\n      JBSplit memory _split = _splits[_i];\\n\\n      // The amount to send towards the split.\\n      uint256 _tokenCount = PRBMath.mulDiv(\\n        _amount,\\n        _split.percent,\\n        JBConstants.SPLITS_TOTAL_PERCENT\\n      );\\n\\n      // Mints tokens for the split if needed.\\n      if (_tokenCount > 0) {\\n        tokenStore.mintFor(\\n          // If an allocator is set in the splits, set it as the beneficiary. Otherwise if a projectId is set in the split, set the project's owner as the beneficiary. Otherwise use the split's beneficiary.\\n          _split.allocator != IJBSplitAllocator(address(0))\\n            ? address(_split.allocator)\\n            : _split.projectId != 0\\n            ? projects.ownerOf(_split.projectId)\\n            : _split.beneficiary,\\n          _projectId,\\n          _tokenCount,\\n          _split.preferClaimed\\n        );\\n\\n        // If there's an allocator set, trigger its `allocate` function.\\n        if (_split.allocator != IJBSplitAllocator(address(0)))\\n          _split.allocator.allocate(\\n            _tokenCount,\\n            _projectId,\\n            JBSplitsGroups.RESERVED_TOKENS,\\n            _split\\n          );\\n\\n        // Subtract from the amount to be sent to the beneficiary.\\n        leftoverAmount = leftoverAmount - _tokenCount;\\n      }\\n\\n      emit DistributeToReservedTokenSplit(\\n        _fundingCycle.configuration,\\n        _fundingCycle.number,\\n        _projectId,\\n        _split,\\n        _tokenCount,\\n        msg.sender\\n      );\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount of reserved tokens currently tracked for a project given a reserved rate.\\n\\n    @param _processedTokenTracker The tracker to make the calculation with.\\n    @param _reservedRate The reserved rate to use to make the calculation.\\n    @param _totalEligibleTokens The total amount to make the calculation with.\\n\\n    @return amount reserved token amount.\\n  */\\n  function _reservedTokenAmountFrom(\\n    int256 _processedTokenTracker,\\n    uint256 _reservedRate,\\n    uint256 _totalEligibleTokens\\n  ) private pure returns (uint256) {\\n    // Get a reference to the amount of tokens that are unprocessed.\\n    uint256 _unprocessedTokenBalanceOf = _processedTokenTracker >= 0\\n      ? _totalEligibleTokens - uint256(_processedTokenTracker)\\n      : _totalEligibleTokens + uint256(-_processedTokenTracker);\\n\\n    // If there are no unprocessed tokens, return.\\n    if (_unprocessedTokenBalanceOf == 0) return 0;\\n\\n    // If all tokens are reserved, return the full unprocessed amount.\\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE) return _unprocessedTokenBalanceOf;\\n\\n    return\\n      PRBMath.mulDiv(\\n        _unprocessedTokenBalanceOf,\\n        JBConstants.MAX_RESERVED_RATE,\\n        JBConstants.MAX_RESERVED_RATE - _reservedRate\\n      ) - _unprocessedTokenBalanceOf;\\n  }\\n\\n  /**\\n    @notice\\n    Configures a funding cycle and stores information pertinent to the configuration.\\n\\n    @dev\\n    See the docs for `launchProjectFor` and `reconfigureFundingCyclesOf`.\\n  */\\n  function _configure(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints\\n  ) private returns (uint256) {\\n    if (_metadata.reservedRate > JBConstants.MAX_RESERVED_RATE) {\\n      revert INVALID_RESERVED_RATE();\\n    }\\n\\n    if (_metadata.redemptionRate > JBConstants.MAX_REDEMPTION_RATE) {\\n      revert INVALID_REDEMPTION_RATE();\\n    }\\n\\n    if (_metadata.ballotRedemptionRate > JBConstants.MAX_REDEMPTION_RATE) {\\n      revert INVALID_BALLOT_REDEMPTION_RATE();\\n    }\\n\\n    // Configure the funding cycle's properties.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.configureFor(\\n      _projectId,\\n      _data,\\n      JBFundingCycleMetadataResolver.packFundingCycleMetadata(_metadata),\\n      _mustStartAtOrAfter\\n    );\\n\\n    for (uint256 _i; _i < _groupedSplits.length; _i++)\\n      // Set splits for the current group being iterated on if there are any.\\n      if (_groupedSplits[_i].splits.length > 0)\\n        splitsStore.set(\\n          _projectId,\\n          _fundingCycle.configuration,\\n          _groupedSplits[_i].group,\\n          _groupedSplits[_i].splits\\n        );\\n\\n    // Set distribution limits if there are any.\\n    for (uint256 _i; _i < _fundAccessConstraints.length; _i++) {\\n      JBFundAccessConstraints memory _constraints = _fundAccessConstraints[_i];\\n\\n      // If distribution limit values are too large then revert.\\n      if (_constraints.distributionLimit > type(uint248).max) revert INVALID_DISTRIBUTION_LIMIT();\\n\\n      if (_constraints.distributionLimitCurrency > type(uint8).max)\\n        revert INVALID_DISTRIBUTION_LIMIT_CURRENCY();\\n\\n      // If overflow allowance values are too large then revert.\\n      if (_constraints.overflowAllowance > type(uint248).max) revert INVALID_OVERFLOW_ALLOWANCE();\\n\\n      if (_constraints.overflowAllowanceCurrency > type(uint8).max)\\n        revert INVALID_OVERFLOW_ALLOWANCE_CURRENCY();\\n\\n      // Set the distribution limit if there is one.\\n      if (_constraints.distributionLimit > 0) {\\n        _packedDistributionLimitDataOf[_projectId][_fundingCycle.configuration][\\n          _constraints.terminal\\n        ] = _constraints.distributionLimit | (_constraints.distributionLimitCurrency << 248);\\n      }\\n\\n      // Set the overflow allowance if there is one.\\n      if (_constraints.overflowAllowance > 0) {\\n        _packedOverflowAllowanceDataOf[_projectId][_fundingCycle.configuration][\\n          _constraints.terminal\\n        ] = _constraints.overflowAllowance | (_constraints.overflowAllowanceCurrency << 248);\\n      }\\n\\n      emit SetFundAccessConstraints(\\n        _fundingCycle.configuration,\\n        _fundingCycle.number,\\n        _projectId,\\n        _constraints,\\n        msg.sender\\n      );\\n    }\\n\\n    return _fundingCycle.configuration;\\n  }\\n}\\n\",\"keccak256\":\"0x2ec56b82c1bbd342fb91f21d2409dd2b2e364bbf0a5320407b043e3fccac616c\",\"license\":\"MIT\"},\"contracts/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n// --------------------------- custom errors -------------------------- //\\n//*********************************************************************//\\nerror UNAUTHORIZED();\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) {\\n      revert UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) {\\n      revert UNAUTHORIZED();\\n    }\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0x54dabe4efc06083ac139b6fb0f2c48157611f2186dd5959867aa2161a413407a\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed\\n}\\n\",\"keccak256\":\"0xda8544e199de385d447fc485037d66ba906a88985328a5e1e0ddcb178b44f382\",\"license\":\"MIT\"},\"contracts/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    uint256 _reserveRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function overflowAllowanceCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9cde0919d7d96124cf75e36e2bc97c0b5fb8a418a6dd14fe45e574bada5d1ec3\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event AddToSetControllerAllowlist(address indexed _address, address caller);\\n\\n  event RemoveFromSetControllerAllowlist(address indexed _address, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function isAllowedToSetController(address _address) external view returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external view returns (bool);\\n\\n  function isTerminalDelegateOf(uint256 _projectId, address _delegate) external view returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function addToSetControllerAllowlist(address _address) external;\\n\\n  function removeFromSetControllerAllowlist(address _address) external;\\n}\\n\",\"keccak256\":\"0xcb8d82ed4c1b3a7800e0075d304a389e6810e2ba5df39e65870d7b65f9d900e5\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x7649782cc0f754b369bace5ac88e863027fa35d5912eef32ab0e8aef123adccb\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate,\\n      bytes memory delegateMetadata\\n    );\\n}\\n\",\"keccak256\":\"0xe689c3a2c9e75d368de61b3344df96015bb4421b264d98056d8aa351e8faf739\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xf8212a9e70b63c818f53aec3ed8728a2679d7b984d93b67a7d7e2890b6da8260\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xec7fcab267fc1227d983c9420373beece78a2a4243c44bfab01d12262818ab8e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, AggregatorV3Interface feed);\\n\\n  function TARGET_DECIMALS() external returns (uint256);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external returns (AggregatorV3Interface);\\n\\n  function priceFor(uint256 _currency, uint256 _base) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    AggregatorV3Interface _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2309ad881e3851c6d002dfa283e562f51327ef28243ef9bf09365df3d98eda39\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 id);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x11b7a85bd31d24e7cd08fe864ccd3ec5789e5d264e445d30a3b88de0979dfdab\",\"license\":\"MIT\"},\"contracts/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xbfeeb100e450c3cf5565a53a34a693f4963f09136bfea7e050efc3f8e1dea095\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '../structs/JBSplit.sol';\\n\\ninterface IJBSplitAllocator {\\n  function allocate(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    uint256 _group,\\n    JBSplit calldata _split\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xb203a9130c48dfeed047f4cdca7e250479295fb0c65041869b3c2e4303525669\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBPaymentTerminal {\\n  function token() external view returns (address);\\n\\n  function ethBalanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function remainingDistributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _fundingCycleConfiguration,\\n    uint256 _fundingCycleNumber\\n  ) external view returns (uint256);\\n\\n  function delegate() external view returns (address);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _delegateMetadata\\n  ) external payable;\\n\\n  function addToBalanceOf(uint256 _projectId, string memory _memo) external payable;\\n}\\n\",\"keccak256\":\"0xd8482a6347d06d13106c2f8252e1b6f9646a438af3c946b8075e4a2bb4fca32c\",\"license\":\"MIT\"},\"contracts/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(uint256 _projectId, address _account) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xbe143668f21d389bb89e1a3a4d50a5fd21fac9c13f53b92fe96d672c4aa4d8cd\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 unclaimedTokenBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(address indexed holder, uint256 indexed projectId, uint256 amount, address caller);\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    address indexed owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external;\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferTo(\\n    address _recipient,\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7beba1de2a273359c50194b00ffc083b010e80e3478bfa265a6a2403b766957f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475\",\"license\":\"MIT\"},\"contracts/libraries/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n  @notice\\n  Global constants used across multiple Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  /** \\n    @notice\\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\\n  */\\n  uint256 public constant MAX_RESERVED_RATE = 10000;\\n\\n  /**\\n    @notice\\n    Maximum token redemption rate.  \\n    */\\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\\n\\n  /** \\n    @notice\\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\\n  */\\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum splits percentage.\\n  */\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum discount on fee granted by a gauge.\\n  */\\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\\n}\\n\",\"keccak256\":\"0x9a12e8bb803d650356783fd995db0dbbd09dedd3f93195bf689c902c102f59a9\",\"license\":\"MIT\"},\"contracts/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBConstants.sol';\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 40));\\n  }\\n\\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 56) & 1) == 1;\\n  }\\n\\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 57) & 1) == 1;\\n  }\\n\\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 58) & 1) == 1;\\n  }\\n\\n  function mintPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 59) & 1) == 1;\\n  }\\n\\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 60) & 1) == 1;\\n  }\\n\\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 61) & 1) == 1;\\n  }\\n\\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 62) & 1) == 1;\\n  }\\n\\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 63) & 1) == 1;\\n  }\\n\\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 64) & 1) == 1;\\n  }\\n\\n  function shouldUseLocalBalanceForRedemptions(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 65) & 1) == 1;\\n  }\\n\\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 66) & 1 == 1;\\n  }\\n\\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (_fundingCycle.metadata >> 67) & 1 == 1;\\n  }\\n\\n  function dataSource(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (IJBFundingCycleDataSource)\\n  {\\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 68)));\\n  }\\n\\n  /**\\n    @notice\\n    Pack the funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\\n  */\\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // version 1 in the bits 0-7 (8 bits).\\n    packed = 1;\\n    // reserved rate in bits 8-23 (16 bits).\\n    packed |= _metadata.reservedRate << 8;\\n    // redemption rate in bits 24-39 (16 bits).\\n    // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) << 24;\\n    // ballot redemption rate rate in bits 40-55 (16 bits).\\n    // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.ballotRedemptionRate) << 40;\\n    // pause pay in bit 56.\\n    if (_metadata.pausePay) packed |= 1 << 56;\\n    // pause tap in bit 57.\\n    if (_metadata.pauseDistributions) packed |= 1 << 57;\\n    // pause redeem in bit 58.\\n    if (_metadata.pauseRedeem) packed |= 1 << 58;\\n    // pause mint in bit 59.\\n    if (_metadata.pauseMint) packed |= 1 << 59;\\n    // pause mint in bit 60.\\n    if (_metadata.pauseBurn) packed |= 1 << 60;\\n    // pause change token in bit 61.\\n    if (_metadata.allowChangeToken) packed |= 1 << 61;\\n    // allow terminal migration in bit 62.\\n    if (_metadata.allowTerminalMigration) packed |= 1 << 62;\\n    // allow controller migration in bit 63.\\n    if (_metadata.allowControllerMigration) packed |= 1 << 63;\\n    // hold fees in bit 64.\\n    if (_metadata.holdFees) packed |= 1 << 64;\\n    // useLocalBalanceForRedemptions in bit 65.\\n    if (_metadata.useLocalBalanceForRedemptions) packed |= 1 << 65;\\n    // use pay data source in bit 66.\\n    if (_metadata.useDataSourceForPay) packed |= 1 << 66;\\n    // use redeem data source in bit 67.\\n    if (_metadata.useDataSourceForRedeem) packed |= 1 << 67;\\n    // data source address in bits 68-227.\\n    packed |= uint256(uint160(address(_metadata.dataSource))) << 68;\\n  }\\n}\\n\",\"keccak256\":\"0x454ada2c970e4270ef05ac18d06d751eef8cc6d65432b932683a50c708f26eba\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_HANDLE = 6;\\n  uint256 public constant SET_METADATA = 7;\\n  uint256 public constant ISSUE = 8;\\n  uint256 public constant CHANGE_TOKEN = 9;\\n  uint256 public constant MINT = 10;\\n  uint256 public constant BURN = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant REQUIRE_CLAIM = 13;\\n  uint256 public constant SET_CONTROLLER = 14;\\n  uint256 public constant ADD_TERMINALS = 15;\\n  uint256 public constant REMOVE_TERMINAL = 16;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 17;\\n  uint256 public constant USE_ALLOWANCE = 18;\\n  uint256 public constant SET_SPLITS = 19;\\n}\\n\",\"keccak256\":\"0x1c56caf6c44994cc44a3e16de9781e880079e8543d8ce541a405178b3407838f\",\"license\":\"MIT\"},\"contracts/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of ETH that was paid.\\n  uint256 amount;\\n  // The weight that was used for minting tokens.\\n  uint256 weight;\\n  // The number of tokens minted.\\n  uint256 tokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0x3fabe50ca2d00e24420061165124d1f43d8489605d84d0ab0a942a7ba8b02101\",\"license\":\"MIT\"},\"contracts/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The amount of ETH being claimed.\\n  uint256 claimAmount;\\n  // The address to which the ETH will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x9415d894e263a90d824a1cde4a6f17d1a325f5183226e02b2e2318afd6103e27\",\"license\":\"MIT\"},\"contracts/structs/JBFundAccessConstraints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBFundAccessConstraints {\\n  // The terminal within which the distribution limit and the overflow allowance applies.\\n  IJBPaymentTerminal terminal;\\n  // The amount of the distribution limit.\\n  uint256 distributionLimit;\\n  // The currency that the distribution limit are denoted in.\\n  uint256 distributionLimitCurrency;\\n  // The amount of the allowance.\\n  uint256 overflowAllowance;\\n  // The currency that the overflow allowance are denoted in.\\n  uint256 overflowAllowanceCurrency;\\n}\\n\",\"keccak256\":\"0x1dc84586f31105231c3b620694492352e0a33f5b8dd902f450c3d83b75c8edb5\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // An unsigned 60.18-decimal fixed-point number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x8ff64289216ea89220cc828df7d0ca1a363286c71a158faddd1b3161958b190e\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0xc68e73a33a605bab8bd4fa260833e7ba3b539f90e96f43b4851a33e53811eb2d\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the distribute functionality should be paused during the funding cycle.\\n  bool pauseDistributions;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the mint functionality should be paused during the funding cycle.\\n  bool pauseMint;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If changing tokens should be allowed during this funding cycle.\\n  bool allowChangeToken;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If redemptions should use the project's local terminal balance instead of the project's balance held in all terminals.\\n  bool useLocalBalanceForRedemptions;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0x63043118e450fc2ef17ca0f772afcf3016104ade23fa84fff788a74821a72186\",\"license\":\"MIT\"},\"contracts/structs/JBGroupedSplits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBSplit.sol';\\nimport '../libraries/JBSplitsGroups.sol';\\n\\nstruct JBGroupedSplits {\\n  uint256 group;\\n  JBSplit[] splits;\\n}\\n\",\"keccak256\":\"0x2eaaeadea6a0033a60a736612765c9592f9b3d4d637f7431bb53852f878e3916\",\"license\":\"MIT\"},\"contracts/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x25a5007c18c3c057615869124af6b0e9cdfbd64fd8d2d7a17f428d6eea5a4835\",\"license\":\"MIT\"},\"contracts/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBPayParamsData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ETH amount of the payment.\\n  uint256 amount;\\n  // The ID of the project being paid.\\n  uint256 projectId;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The proposed beneficiary of the tokens that will be minted as a result of the tokens.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the payment.\\n  string memo;\\n  // The proposed metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0x89a9ac69ef88eff66233299390b70a6146d787db3b69c7d5eae1bd65fba0464a\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBProjectMetadata {\\n  // Metadata content.\\n  string content;\\n  // The domain within which the metadata applies.\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0xc3b76e617b453c6dc60cc8bd3683ff7726f1a967b28fb8e760b1d16f52c07d17\",\"license\":\"MIT\"},\"contracts/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBRedeemParamsData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The proposed number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The ID of the project whos tokens are being redeemed.\\n  uint256 projectId;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The proposed beneficiary of the ETH being claimed by making the redemption.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // The proposed metadata to send to the delegate.\\n  bytes delegateMetadata;\\n}\\n\",\"keccak256\":\"0xe950084e3b31bbd51edf2be5c4a53b69c3b239b4a45863aa819817eb040a8224\",\"license\":\"MIT\"},\"contracts/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and that project has issued its tokens.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered staked or unstaked to the beneficiary.\\n  bool preferClaimed;\\n  // The percent of the whole group that this split occupies. This number is out of 1000000000.\\n  uint256 percent;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the Juicebox treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the unstaked token preference respected.\\n  uint256 projectId;\\n  // The role the  beneficary depends on whether or not projectId is specified, or whether or not allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // Specifies if the split should be unchangeable until the specifies time comes, with the exception of extending the lockedUntil period.\\n  uint256 lockedUntil;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with the projectId, beneficiary, preferClaimed properties.\\n  IJBSplitAllocator allocator;\\n}\\n\",\"keccak256\":\"0xbf9548ed07950457a334c38a74d2bf66fedd248f755634e01ba4b95d8711dcd7\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620059993803806200599983398101604081905262000035916200007b565b6001600160601b0319606096871b8116608052600160005594861b851660a05292851b84166101205290841b831660c052831b821660e05290911b166101005262000128565b60008060008060008060c087890312156200009557600080fd5b8651620000a2816200010f565b6020880151909650620000b5816200010f565b6040880151909550620000c8816200010f565b6060880151909450620000db816200010f565b6080880151909350620000ee816200010f565b60a088015190925062000101816200010f565b809150509295509295509295565b6001600160a01b03811681146200012557600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61569c620002fd6000396000818161044c0152818161059d015281816109860152818161121d0152818161169f0152818161194a01528181611e68015281816121f6015281816123b20152818161247601528181612bcc0152612c920152600081816101cf015281816138950152613cf50152600081816103b101528181610ad501528181611032015281816117a601528181611a4101528181612068015281816130140152818161317f01528181613426015281816136240152613e0b01526000818161038a015281816108a801528181610f06015281816115c101528181611f6101528181612ad10152818161336101526137ad0152600081816103fe01528181610c390152818161113f01528181611b15015281816122f10152818161251e0152818161280701528181612d3c015281816135160152613e80015260008181610425015281816106b00152818161078c01528181610d4501528181610e210152818161131b015281816113f701528181611c2101528181611cfd0152818161262a0152818161270601528181612913015281816129ef01528181612e480152612f24015261569c6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80635578dfd7116100d85780638b79543c1161008c578063d101307311610066578063d10130731461046e578063e867c59c14610481578063f033b3b41461049457600080fd5b80638b79543c146103f9578063ad007d6314610420578063c41c2f241461044757600080fd5b806361930630116100bd57806361930630146103ac578063628d9288146103d35780636e5c8614146103e657600080fd5b80635578dfd71461031a578063557e71551461038557600080fd5b80633e8c615b1161012f5780634e9d00d2116101145780634e9d00d21461024f578063507dac011461029c5780635172a2bf146102af57600080fd5b80633e8c615b14610229578063405b84fa1461023c57600080fd5b8063229bb82411610160578063229bb824146101b75780632bdfe004146101ca578063369e6f341461021657600080fd5b8063073d499c1461017c5780631665bc0f146101a2575b600080fd5b61018f61018a366004614dc7565b6104a7565b6040519081526020015b60405180910390f35b6101b56101b03660046146c7565b6104ea565b005b6101b56101c5366004614a44565b610b98565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610199565b61018f610224366004614d40565b61109c565b6101b5610237366004614a14565b611904565b6101b561024a366004614a14565b611ae6565b61018f61025d366004614dc7565b600092835260026020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff9290921684525290205460f81c90565b61018f6102aa3660046145d8565b6122b1565b61018f6102bd366004614dc7565b600092835260036020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff929092168452529020547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b61018f610328366004614dc7565b600092835260026020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff929092168452529020547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b61018f6103e1366004614bbd565b6124ec565b61018f6103f4366004614c5a565b6127d5565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101f161047c366004614a86565b612d0a565b61018f61048f366004614b00565b6130b0565b61018f6104a2366004614d1e565b61313a565b6000838152600360209081526040808320858452825280832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460f81c5b9392505050565b6002600054141561055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556040517f898370ee0000000000000000000000000000000000000000000000000000000081526004810186905233602482015286908690600b907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063898370ee9060440160206040518083038186803b1580156105f457600080fd5b505afa158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c919061483f565b8015801561065057503373ffffffffffffffffffffffffffffffffffffffff851614155b801561072c57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a919061483f565b155b801561080857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610806919061483f565b155b1561083f576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610876576040517f7b38547b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018a90526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610938919061497b565b610100810151909150603c1c6001908116148015610a1757506040517f898370ee000000000000000000000000000000000000000000000000000000008152600481018b90523360248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063898370ee9060440160206040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a15919061483f565b155b15610a4e576040517f78a4871800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a815260016020526040902054610a68908a9061547a565b60008b8152600160205260409081902091909155517f906ebd0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152602482018c9052604482018b905287151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063906ebd0f90608401600060405180830381600087803b158015610b1957600080fd5b505af1158015610b2d573d6000803e3d6000fd5b50505050898b73ffffffffffffffffffffffffffffffffffffffff167fdf04e13ee4fcd48a81ab2fd114757093740a3efa9b6475d86e05878b4c59d0798b8b8b33604051610b7e94939291906150c6565b60405180910390a350506001600055505050505050505050565b60026000541415610c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b60026000556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015610c9057600080fd5b505afa158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc891906145bb565b8360093373ffffffffffffffffffffffffffffffffffffffff841614801590610dc157506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf919061483f565b155b8015610e9d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b919061483f565b155b15610ed4576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610f5e57600080fd5b505afa158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f96919061497b565b610100810151909150603d1c600190811614610fde576040517f2ebc601300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f57e4c7780000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff878116602483015286811660448301527f000000000000000000000000000000000000000000000000000000000000000016906357e4c77890606401600060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b50506001600055505050505050505050565b60006002600054141561110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b60026000556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018990527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561119657600080fd5b505afa1580156111aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ce91906145bb565b6040517f898370ee000000000000000000000000000000000000000000000000000000008152600481018a90523360248201528990600a9073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063898370ee9060440160206040518083038186803b15801561125f57600080fd5b505afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611297919061483f565b801580156112bb57503373ffffffffffffffffffffffffffffffffffffffff851614155b801561139757506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561135d57600080fd5b505afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611395919061483f565b155b801561147357506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561143957600080fd5b505afa15801561144d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611471919061483f565b155b156114aa576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6127108611156114e6576040517f5623289500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710861415801561150c575073ffffffffffffffffffffffffffffffffffffffff8a16155b15611543576040517fea872c7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8a61157a576040517f9fd13e5400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018d905260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163c919061497b565b610100810151909150603b1c600190811614801561171b57506040517f898370ee000000000000000000000000000000000000000000000000000000008152600481018e905233602482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063898370ee9060440160206040518083038186803b1580156116e157600080fd5b505afa1580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611719919061483f565b155b15611752576040517f8c5fb46100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271087141561178a5760008d815260016020526040902054611776908d9061547a565b60008e815260016020526040902055611898565b6117a28c61179a896127106154ee565b612710613213565b95507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ceddd3e48c8f898c6040518563ffffffff1660e01b8152600401611833949392919073ffffffffffffffffffffffffffffffffffffffff949094168452602084019290925260408301521515606082015260800190565b600060405180830381600087803b15801561184d57600080fd5b505af1158015611861573d6000803e3d6000fd5b5050505086600014156118985760008d8152600160205260409020546118889087906153ee565b60008e8152600160205260409020555b8b8d8c73ffffffffffffffffffffffffffffffffffffffff167f795e99b6853d7eafe7c0ccc6fb02e87770a8284e2be638ef327b6347587bde2c8d8d8c336040516118e69493929190614fa2565b60405180910390a45050600160005550919998505050505050505050565b6040517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101839052309073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c491906145bb565b73ffffffffffffffffffffffffffffffffffffffff161415611a12576040517ffc2ce25a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b158015611a9857600080fd5b505afa158015611aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad091906149fb565b6000928352600160205260409092209190915550565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba491906145bb565b8260033373ffffffffffffffffffffffffffffffffffffffff841614801590611c9d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611c6357600080fd5b505afa158015611c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9b919061483f565b155b8015611d7957506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611d3f57600080fd5b505afa158015611d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d77919061483f565b155b15611db0576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000541415611e1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b60026000556040517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101869052309073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b158015611eaa57600080fd5b505afa158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee291906145bb565b73ffffffffffffffffffffffffffffffffffffffff1614611f2f576040517f14a80ba900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611fb957600080fd5b505afa158015611fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff1919061497b565b610100810151909150603f1c600190811614612039576040517f46ace3f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b1580156120bf57600080fd5b505afa1580156120d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f791906149fb565b60008781526001602052604090205414612126576121248660405180602001604052806000815250613318565b505b6040517f3e8c615b0000000000000000000000000000000000000000000000000000000081526004810187905230602482015273ffffffffffffffffffffffffffffffffffffffff861690633e8c615b90604401600060405180830381600087803b15801561219457600080fd5b505af11580156121a8573d6000803e3d6000fd5b50506040517f714e7f320000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff88811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063714e7f329150604401600060405180830381600087803b15801561223c57600080fd5b505af1158015612250573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff891681523360208201528993507f01f954abace731a88ab86e71186040cc2be49fe517ea06bc0d24f25b82b8345692500160405180910390a25050600160005550505050565b6040517f666d87a000000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063666d87a090612328908c908c90600401614e3e565b602060405180830381600087803b15801561234257600080fd5b505af1158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a91906149fb565b6040517f714e7f32000000000000000000000000000000000000000000000000000000008152600481018290523060248201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063714e7f3290604401600060405180830381600087803b15801561240b57600080fd5b505af115801561241f573d6000803e3d6000fd5b505050506124318188888888886136d5565b508151156124e0576040517f1cda3bfe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631cda3bfe906124ad908490869060040161506f565b600060405180830381600087803b1580156124c757600080fd5b505af11580156124db573d6000803e3d6000fd5b505050505b98975050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561257557600080fd5b505afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad91906145bb565b8760013373ffffffffffffffffffffffffffffffffffffffff8416148015906126a657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561266c57600080fd5b505afa158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a4919061483f565b155b801561278257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561274857600080fd5b505afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612780919061483f565b155b156127b9576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6127c78a8a8a8a8a8a6136d5565b9a9950505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018890526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561285e57600080fd5b505afa158015612872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289691906145bb565b8860013373ffffffffffffffffffffffffffffffffffffffff84161480159061298f57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561295557600080fd5b505afa158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d919061483f565b155b8015612a6b57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015612a3157600080fd5b505afa158015612a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a69919061483f565b155b15612aa2576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f2cee6deb000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632cee6deb9060240160206040518083038186803b158015612b2857600080fd5b505afa158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6091906149fb565b15612b97576040517fffd0bc1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f714e7f32000000000000000000000000000000000000000000000000000000008152600481018c90523060248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063714e7f3290604401600060405180830381600087803b158015612c2557600080fd5b505af1158015612c39573d6000803e3d6000fd5b50505050612c4b8b8b8b8b8b8b6136d5565b855190945015612cfc576040517f1cda3bfe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631cda3bfe90612cc9908e90899060040161506f565b600060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b505050505b505050979650505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015612d9357600080fd5b505afa158015612da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcb91906145bb565b8660083373ffffffffffffffffffffffffffffffffffffffff841614801590612ec457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015612e8a57600080fd5b505afa158015612e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec2919061483f565b155b8015612fa057506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015612f6657600080fd5b505afa158015612f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9e919061483f565b155b15612fd7576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa7f2a70b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a7f2a70b90613051908c908c908c908c908c90600401615107565b602060405180830381600087803b15801561306b57600080fd5b505af115801561307f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a391906145bb565b9998505050505050505050565b60006002600054141561311f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b600260005561312e8383613318565b60016000559392505050565b6000828152600160205260408082205490517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018590526104e3919084907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b1580156131d657600080fd5b505afa1580156131ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320e91906149fb565b613c33565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561326c57838281613262576132626155a6565b04925050506104e3565b8381106132af576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610553565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101839052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b1580156133a457600080fd5b505afa1580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc919061497b565b6040517f75b0d9cd0000000000000000000000000000000000000000000000000000000081526004810186905290915060009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906375b0d9cd9060240160206040518083038186803b15801561346857600080fd5b505afa15801561347c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a091906149fb565b6000868152600160205260409020546101008401519192506134c99160081c61ffff1683613c33565b92506134d58382615462565b6000868152600160205260408082209290925590517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561356d57600080fd5b505afa158015613581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a591906145bb565b9050600084156135bf576135ba878587613cad565b6135c2565b60005b90508015613681576040517fceddd3e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820189905260448201839052600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063ceddd3e490608401600060405180830381600087803b15801561366857600080fd5b505af115801561367c573d6000803e3d6000fd5b505050505b86846000015185602001517fb12d7a78048433f69fe6d30145bf08aad8e82985b96e4db6d5c6a7e94d57086e8589868c336040516136c3959493929190614ee9565b60405180910390a45050505092915050565b600061271085351115613714576040517f5623289500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271085602001351115613754576040517f9db9ee9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271085604001351115613794576040517fddbf1bc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a249d42589896137eb6137e6368c90038c018c61485c565b6140b7565b896040518563ffffffff1660e01b815260040161380b9493929190615134565b61012060405180830381600087803b15801561382657600080fd5b505af115801561383a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385e919061497b565b905060005b8451811015613975576000858281518110613880576138806155d5565b602002602001015160200151511115613963577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639acff5ac8a84602001518885815181106138e7576138e76155d5565b602002602001015160000151898681518110613905576139056155d5565b6020026020010151602001516040518563ffffffff1660e01b81526004016139309493929190615195565b600060405180830381600087803b15801561394a57600080fd5b505af115801561395e573d6000803e3d6000fd5b505050505b8061396d81615505565b915050613863565b5060005b8351811015613c21576000848281518110613996576139966155d5565b602002602001015190507effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016816020015111156139ff576040517f95c96c6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604081015160ff1015613a3e576040517ff90c7b4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608101517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1015613a9b576040517fb5f8759400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b608081015160ff1015613ada576040517f90af4da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602081015115613b335760408181015160208084015160008e8152600283528481208884015182528352848120865173ffffffffffffffffffffffffffffffffffffffff16825290925292902060f89190911b90911790555b606081015115613b8c576080810151606082015160008c81526003602090815260408083208883015184528252808320865173ffffffffffffffffffffffffffffffffffffffff168452909152902060f89290921b1790555b825160208085015160408051855173ffffffffffffffffffffffffffffffffffffffff1681528584015193810193909352808501519083015260608085015190830152608080850151908301523360a08301528c92917e506dbcdf2e70275bf246b8f39ca18ebea55b7253498928a3de5c5bae26bd849060c00160405180910390a45080613c1981615505565b915050613979565b506020015190505b9695505050505050565b6000806000851215613c5757613c488561553e565b613c529084615462565b613c61565b613c6185846154ee565b905080613c725760009150506104e3565b612710841415613c835790506104e3565b80613c9a81612710613c9588826154ee565b613213565b613ca491906154ee565b95945050505050565b60208201516040517f69e11cc50000000000000000000000000000000000000000000000000000000081526004810185905260248101919091526002604482015281906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906369e11cc59060640160006040518083038186803b158015613d4c57600080fd5b505afa158015613d60573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613da69190810190614743565b905060005b81518110156140ae576000828281518110613dc857613dc86155d5565b602002602001015190506000613de7868360200151633b9aca00613213565b905080156140535760a082015173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169163ceddd3e49116613f14576040840151613e4b578360600151613f1a565b60408481015190517f6352211e00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015613ed757600080fd5b505afa158015613eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0f91906145bb565b613f1a565b8360a001515b845160405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482018c90526044820185905215156064820152608401600060405180830381600087803b158015613f9757600080fd5b505af1158015613fab573d6000803e3d6000fd5b5050505060a082015173ffffffffffffffffffffffffffffffffffffffff1615614046578160a0015173ffffffffffffffffffffffffffffffffffffffff1663550b0432828a6002866040518563ffffffff1660e01b8152600401614013949392919061524e565b600060405180830381600087803b15801561402d57600080fd5b505af1158015614041573d6000803e3d6000fd5b505050505b61405081866154ee565b94505b87876000015188602001517f08b272f627530027641b54430e5e88cf4de5feb60e3df46d714a426e3cabb99f85853360405161409193929190614fe3565b60405180910390a4505080806140a690615505565b915050613dab565b50509392505050565b8051602082015160089190911b600117906018906140d7906127106154ee565b901b81179050602882604001516127106140f191906154ee565b901b8117905081606001511561410c57670100000000000000175b81608001511561412157670200000000000000175b8160a001511561413657670400000000000000175b8160c001511561414b57670800000000000000175b8160e001511561416057671000000000000000175b8161010001511561417657672000000000000000175b8161012001511561418c57674000000000000000175b816101400151156141a257678000000000000000175b816101600151156141b95768010000000000000000175b816101800151156141d05768020000000000000000175b816101a00151156141e75768040000000000000000175b816101c00151156141fe5768080000000000000000175b6101e0919091015160441b7c0ffffffffffffffffffffffffffffffffffffffff00000000000000000161790565b803561423781615633565b919050565b600082601f83011261424d57600080fd5b8135602061426261425d836153ca565b61537b565b80838252828201915082860187848660051b890101111561428257600080fd5b60005b858110156142aa57813561429881615633565b84529284019290840190600101614285565b5090979650505050505050565b600082601f8301126142c857600080fd5b813560206142d861425d836153ca565b8281528181019085830160a0808602880185018910156142f757600080fd5b6000805b8781101561435e5782848c031215614311578182fd5b6143196152c4565b843561432481615633565b81528488013588820152604080860135908201526060808601359082015260808086013590820152865294860194928201926001016142fb565b50929998505050505050505050565b600082601f83011261437e57600080fd5b602061438d61425d84356153ca565b808435825282820191508285018684873560051b88010111156143af57600080fd5b60005b86358110156145135767ffffffffffffffff80833511156143d257600080fd5b8235880160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828c0301121561440857600080fd5b6144106152ed565b87820135815260408201358381111561442857600080fd5b82019250603f83018b1361443b57600080fd5b87830135915061444d61425d836153ca565b808382528982019150604085018d604060c08702880101111561446f57600080fd5b600095505b848610156144f95760c0818f03121561448c57600080fd5b614494615310565b61449e8235615658565b813581528b8201358c8201526040820135604082015260608201356144c281615633565b60608201526080828101359082015260a08201356144df81615633565b60a0820152835260019590950194918a019160c001614474565b50828a0152508652505092840192908401906001016143b2565b50909695505050505050565b803561423781615658565b805161423781615633565b60008083601f84011261454757600080fd5b50813567ffffffffffffffff81111561455f57600080fd5b60208301915083602082850101111561457757600080fd5b9250929050565b60006080828403121561459057600080fd5b50919050565b6000610200828403121561459057600080fd5b60006040828403121561459057600080fd5b6000602082840312156145cd57600080fd5b81516104e381615633565b600080600080600080600080610340898b0312156145f557600080fd5b6145fe8961422c565b9750602089013567ffffffffffffffff8082111561461b57600080fd5b6146278c838d016145a9565b98506146368c60408d0161457e565b97506146458c60c08d01614596565b96506102c08b013595506102e08b013591508082111561466457600080fd5b6146708c838d0161436d565b94506103008b013591508082111561468757600080fd5b6146938c838d016142b7565b93506103208b01359150808211156146aa57600080fd5b506146b78b828c0161423c565b9150509295985092959890939650565b60008060008060008060a087890312156146e057600080fd5b86356146eb81615633565b95506020870135945060408701359350606087013567ffffffffffffffff81111561471557600080fd5b61472189828a01614535565b909450925050608087013561473581615658565b809150509295509295509295565b6000602080838503121561475657600080fd5b825167ffffffffffffffff81111561476d57600080fd5b8301601f8101851361477e57600080fd5b805161478c61425d826153ca565b8181528381019083850160c0808502860187018a10156147ab57600080fd5b60009550855b858110156148305781838c0312156147c7578687fd5b6147cf615310565b83516147da81615658565b81528389015189820152604080850151908201526060808501516147fd81615633565b908201526080848101519082015260a08085015161481a81615633565b90820152855293870193918101916001016147b1565b50919998505050505050505050565b60006020828403121561485157600080fd5b81516104e381615658565b6000610200828403121561486f57600080fd5b614877615333565b82358152602083013560208201526040830135604082015261489b6060840161451f565b60608201526148ac6080840161451f565b60808201526148bd60a0840161451f565b60a08201526148ce60c0840161451f565b60c08201526148df60e0840161451f565b60e08201526101006148f281850161451f565b9082015261012061490484820161451f565b9082015261014061491684820161451f565b9082015261016061492884820161451f565b9082015261018061493a84820161451f565b908201526101a061494c84820161451f565b908201526101c061495e84820161451f565b908201526101e061497084820161422c565b908201529392505050565b6000610120828403121561498e57600080fd5b614996615357565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526149e260e0840161452a565b60e0820152610100928301519281019290925250919050565b600060208284031215614a0d57600080fd5b5051919050565b60008060408385031215614a2757600080fd5b823591506020830135614a3981615633565b809150509250929050565b600080600060608486031215614a5957600080fd5b833592506020840135614a6b81615633565b91506040840135614a7b81615633565b809150509250925092565b600080600080600060608688031215614a9e57600080fd5b85359450602086013567ffffffffffffffff80821115614abd57600080fd5b614ac989838a01614535565b90965094506040880135915080821115614ae257600080fd5b50614aef88828901614535565b969995985093965092949392505050565b60008060408385031215614b1357600080fd5b8235915060208084013567ffffffffffffffff80821115614b3357600080fd5b818601915086601f830112614b4757600080fd5b813581811115614b5957614b59615604565b614b89847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161537b565b91508082528784828501011115614b9f57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000806000806103008789031215614bd757600080fd5b86359550614be8886020890161457e565b9450614bf78860a08901614596565b93506102a087013592506102c087013567ffffffffffffffff80821115614c1d57600080fd5b614c298a838b0161436d565b93506102e0890135915080821115614c4057600080fd5b50614c4d89828a016142b7565b9150509295509295509295565b6000806000806000806000610320888a031215614c7657600080fd5b87359650614c878960208a0161457e565b9550614c968960a08a01614596565b94506102a088013593506102c088013567ffffffffffffffff80821115614cbc57600080fd5b614cc88b838c0161436d565b94506102e08a0135915080821115614cdf57600080fd5b614ceb8b838c016142b7565b93506103008a0135915080821115614d0257600080fd5b50614d0f8a828b0161423c565b91505092959891949750929550565b60008060408385031215614d3157600080fd5b50508035926020909101359150565b600080600080600080600060c0888a031215614d5b57600080fd5b87359650602088013595506040880135614d7481615633565b9450606088013567ffffffffffffffff811115614d9057600080fd5b614d9c8a828b01614535565b9095509350506080880135614db081615658565b8092505060a0880135905092959891949750929550565b600080600060608486031215614ddc57600080fd5b83359250602084013591506040840135614a7b81615633565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614e9257600080fd5b8301803567ffffffffffffffff811115614eab57600080fd5b803603851315614eba57600080fd5b604080850152614ed1608085018260208501614df5565b91505060208401356060840152809150509392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260006020868184015285604084015260a0606084015284518060a085015260005b81811015614f3f5786810183015185820160c001528201614f23565b81811115614f5157600060c083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016830160c0019150613c299050608083018473ffffffffffffffffffffffffffffffffffffffff169052565b606081526000614fb6606083018688614df5565b905083602083015273ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b610100810161504582868051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b8360c083015273ffffffffffffffffffffffffffffffffffffffff831660e0830152949350505050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156142aa57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101615094565b8481526060602082015260006150e0606083018587614df5565b905073ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b858152606060208201526000615121606083018688614df5565b82810360408401526124e0818587614df5565b600060e082019050858252843560208301526020850135604083015260408501356060830152606085013561516881615633565b73ffffffffffffffffffffffffffffffffffffffff16608083015260a082019390935260c0015292915050565b600060808201868352602086818501528560408501526080606085015281855180845260a086019150828701935060005b8181101561523f5761522c8386518051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b9383019360c092909201916001016151c6565b50909998505050505050505050565b84815260208101849052604081018390526101208101613ca460608301848051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b60405160a0810167ffffffffffffffff811182821017156152e7576152e7615604565b60405290565b6040805190810167ffffffffffffffff811182821017156152e7576152e7615604565b60405160c0810167ffffffffffffffff811182821017156152e7576152e7615604565b604051610200810167ffffffffffffffff811182821017156152e7576152e7615604565b604051610120810167ffffffffffffffff811182821017156152e7576152e7615604565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156153c2576153c2615604565b604052919050565b600067ffffffffffffffff8211156153e4576153e4615604565b5060051b60200190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561542857615428615577565b827f800000000000000000000000000000000000000000000000000000000000000003841281161561545c5761545c615577565b50500190565b6000821982111561547557615475615577565b500190565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156154b4576154b4615577565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156154e8576154e8615577565b50500390565b60008282101561550057615500615577565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561553757615537615577565b5060010190565b60007f800000000000000000000000000000000000000000000000000000000000000082141561557057615570615577565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461565557600080fd5b50565b801515811461565557600080fdfea2646970667358221220d99b966133ded436500b965ef527dd941db504d5d1fcb3d208f0dad498012ced64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80635578dfd7116100d85780638b79543c1161008c578063d101307311610066578063d10130731461046e578063e867c59c14610481578063f033b3b41461049457600080fd5b80638b79543c146103f9578063ad007d6314610420578063c41c2f241461044757600080fd5b806361930630116100bd57806361930630146103ac578063628d9288146103d35780636e5c8614146103e657600080fd5b80635578dfd71461031a578063557e71551461038557600080fd5b80633e8c615b1161012f5780634e9d00d2116101145780634e9d00d21461024f578063507dac011461029c5780635172a2bf146102af57600080fd5b80633e8c615b14610229578063405b84fa1461023c57600080fd5b8063229bb82411610160578063229bb824146101b75780632bdfe004146101ca578063369e6f341461021657600080fd5b8063073d499c1461017c5780631665bc0f146101a2575b600080fd5b61018f61018a366004614dc7565b6104a7565b6040519081526020015b60405180910390f35b6101b56101b03660046146c7565b6104ea565b005b6101b56101c5366004614a44565b610b98565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610199565b61018f610224366004614d40565b61109c565b6101b5610237366004614a14565b611904565b6101b561024a366004614a14565b611ae6565b61018f61025d366004614dc7565b600092835260026020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff9290921684525290205460f81c90565b61018f6102aa3660046145d8565b6122b1565b61018f6102bd366004614dc7565b600092835260036020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff929092168452529020547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b61018f610328366004614dc7565b600092835260026020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff929092168452529020547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b61018f6103e1366004614bbd565b6124ec565b61018f6103f4366004614c5a565b6127d5565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101f161047c366004614a86565b612d0a565b61018f61048f366004614b00565b6130b0565b61018f6104a2366004614d1e565b61313a565b6000838152600360209081526040808320858452825280832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460f81c5b9392505050565b6002600054141561055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556040517f898370ee0000000000000000000000000000000000000000000000000000000081526004810186905233602482015286908690600b907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063898370ee9060440160206040518083038186803b1580156105f457600080fd5b505afa158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c919061483f565b8015801561065057503373ffffffffffffffffffffffffffffffffffffffff851614155b801561072c57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a919061483f565b155b801561080857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610806919061483f565b155b1561083f576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610876576040517f7b38547b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018a90526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610938919061497b565b610100810151909150603c1c6001908116148015610a1757506040517f898370ee000000000000000000000000000000000000000000000000000000008152600481018b90523360248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063898370ee9060440160206040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a15919061483f565b155b15610a4e576040517f78a4871800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a815260016020526040902054610a68908a9061547a565b60008b8152600160205260409081902091909155517f906ebd0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152602482018c9052604482018b905287151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063906ebd0f90608401600060405180830381600087803b158015610b1957600080fd5b505af1158015610b2d573d6000803e3d6000fd5b50505050898b73ffffffffffffffffffffffffffffffffffffffff167fdf04e13ee4fcd48a81ab2fd114757093740a3efa9b6475d86e05878b4c59d0798b8b8b33604051610b7e94939291906150c6565b60405180910390a350506001600055505050505050505050565b60026000541415610c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b60026000556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015610c9057600080fd5b505afa158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc891906145bb565b8360093373ffffffffffffffffffffffffffffffffffffffff841614801590610dc157506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf919061483f565b155b8015610e9d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b919061483f565b155b15610ed4576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610f5e57600080fd5b505afa158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f96919061497b565b610100810151909150603d1c600190811614610fde576040517f2ebc601300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f57e4c7780000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff878116602483015286811660448301527f000000000000000000000000000000000000000000000000000000000000000016906357e4c77890606401600060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b50506001600055505050505050505050565b60006002600054141561110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b60026000556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018990527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561119657600080fd5b505afa1580156111aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ce91906145bb565b6040517f898370ee000000000000000000000000000000000000000000000000000000008152600481018a90523360248201528990600a9073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063898370ee9060440160206040518083038186803b15801561125f57600080fd5b505afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611297919061483f565b801580156112bb57503373ffffffffffffffffffffffffffffffffffffffff851614155b801561139757506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561135d57600080fd5b505afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611395919061483f565b155b801561147357506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561143957600080fd5b505afa15801561144d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611471919061483f565b155b156114aa576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6127108611156114e6576040517f5623289500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710861415801561150c575073ffffffffffffffffffffffffffffffffffffffff8a16155b15611543576040517fea872c7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8a61157a576040517f9fd13e5400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018d905260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163c919061497b565b610100810151909150603b1c600190811614801561171b57506040517f898370ee000000000000000000000000000000000000000000000000000000008152600481018e905233602482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063898370ee9060440160206040518083038186803b1580156116e157600080fd5b505afa1580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611719919061483f565b155b15611752576040517f8c5fb46100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271087141561178a5760008d815260016020526040902054611776908d9061547a565b60008e815260016020526040902055611898565b6117a28c61179a896127106154ee565b612710613213565b95507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ceddd3e48c8f898c6040518563ffffffff1660e01b8152600401611833949392919073ffffffffffffffffffffffffffffffffffffffff949094168452602084019290925260408301521515606082015260800190565b600060405180830381600087803b15801561184d57600080fd5b505af1158015611861573d6000803e3d6000fd5b5050505086600014156118985760008d8152600160205260409020546118889087906153ee565b60008e8152600160205260409020555b8b8d8c73ffffffffffffffffffffffffffffffffffffffff167f795e99b6853d7eafe7c0ccc6fb02e87770a8284e2be638ef327b6347587bde2c8d8d8c336040516118e69493929190614fa2565b60405180910390a45050600160005550919998505050505050505050565b6040517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101839052309073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c491906145bb565b73ffffffffffffffffffffffffffffffffffffffff161415611a12576040517ffc2ce25a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b158015611a9857600080fd5b505afa158015611aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad091906149fb565b6000928352600160205260409092209190915550565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba491906145bb565b8260033373ffffffffffffffffffffffffffffffffffffffff841614801590611c9d57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611c6357600080fd5b505afa158015611c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9b919061483f565b155b8015611d7957506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611d3f57600080fd5b505afa158015611d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d77919061483f565b155b15611db0576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000541415611e1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b60026000556040517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101869052309073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b158015611eaa57600080fd5b505afa158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee291906145bb565b73ffffffffffffffffffffffffffffffffffffffff1614611f2f576040517f14a80ba900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611fb957600080fd5b505afa158015611fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff1919061497b565b610100810151909150603f1c600190811614612039576040517f46ace3f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b1580156120bf57600080fd5b505afa1580156120d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f791906149fb565b60008781526001602052604090205414612126576121248660405180602001604052806000815250613318565b505b6040517f3e8c615b0000000000000000000000000000000000000000000000000000000081526004810187905230602482015273ffffffffffffffffffffffffffffffffffffffff861690633e8c615b90604401600060405180830381600087803b15801561219457600080fd5b505af11580156121a8573d6000803e3d6000fd5b50506040517f714e7f320000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff88811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063714e7f329150604401600060405180830381600087803b15801561223c57600080fd5b505af1158015612250573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff891681523360208201528993507f01f954abace731a88ab86e71186040cc2be49fe517ea06bc0d24f25b82b8345692500160405180910390a25050600160005550505050565b6040517f666d87a000000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063666d87a090612328908c908c90600401614e3e565b602060405180830381600087803b15801561234257600080fd5b505af1158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a91906149fb565b6040517f714e7f32000000000000000000000000000000000000000000000000000000008152600481018290523060248201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063714e7f3290604401600060405180830381600087803b15801561240b57600080fd5b505af115801561241f573d6000803e3d6000fd5b505050506124318188888888886136d5565b508151156124e0576040517f1cda3bfe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631cda3bfe906124ad908490869060040161506f565b600060405180830381600087803b1580156124c757600080fd5b505af11580156124db573d6000803e3d6000fd5b505050505b98975050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561257557600080fd5b505afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad91906145bb565b8760013373ffffffffffffffffffffffffffffffffffffffff8416148015906126a657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561266c57600080fd5b505afa158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a4919061483f565b155b801561278257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561274857600080fd5b505afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612780919061483f565b155b156127b9576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6127c78a8a8a8a8a8a6136d5565b9a9950505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018890526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561285e57600080fd5b505afa158015612872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289691906145bb565b8860013373ffffffffffffffffffffffffffffffffffffffff84161480159061298f57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561295557600080fd5b505afa158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d919061483f565b155b8015612a6b57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015612a3157600080fd5b505afa158015612a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a69919061483f565b155b15612aa2576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f2cee6deb000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632cee6deb9060240160206040518083038186803b158015612b2857600080fd5b505afa158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6091906149fb565b15612b97576040517fffd0bc1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f714e7f32000000000000000000000000000000000000000000000000000000008152600481018c90523060248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063714e7f3290604401600060405180830381600087803b158015612c2557600080fd5b505af1158015612c39573d6000803e3d6000fd5b50505050612c4b8b8b8b8b8b8b6136d5565b855190945015612cfc576040517f1cda3bfe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631cda3bfe90612cc9908e90899060040161506f565b600060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b505050505b505050979650505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015612d9357600080fd5b505afa158015612da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcb91906145bb565b8660083373ffffffffffffffffffffffffffffffffffffffff841614801590612ec457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015612e8a57600080fd5b505afa158015612e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec2919061483f565b155b8015612fa057506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015612f6657600080fd5b505afa158015612f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9e919061483f565b155b15612fd7576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa7f2a70b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a7f2a70b90613051908c908c908c908c908c90600401615107565b602060405180830381600087803b15801561306b57600080fd5b505af115801561307f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a391906145bb565b9998505050505050505050565b60006002600054141561311f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b600260005561312e8383613318565b60016000559392505050565b6000828152600160205260408082205490517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018590526104e3919084907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b1580156131d657600080fd5b505afa1580156131ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320e91906149fb565b613c33565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561326c57838281613262576132626155a6565b04925050506104e3565b8381106132af576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610553565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101839052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b1580156133a457600080fd5b505afa1580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc919061497b565b6040517f75b0d9cd0000000000000000000000000000000000000000000000000000000081526004810186905290915060009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906375b0d9cd9060240160206040518083038186803b15801561346857600080fd5b505afa15801561347c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a091906149fb565b6000868152600160205260409020546101008401519192506134c99160081c61ffff1683613c33565b92506134d58382615462565b6000868152600160205260408082209290925590517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561356d57600080fd5b505afa158015613581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a591906145bb565b9050600084156135bf576135ba878587613cad565b6135c2565b60005b90508015613681576040517fceddd3e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820189905260448201839052600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063ceddd3e490608401600060405180830381600087803b15801561366857600080fd5b505af115801561367c573d6000803e3d6000fd5b505050505b86846000015185602001517fb12d7a78048433f69fe6d30145bf08aad8e82985b96e4db6d5c6a7e94d57086e8589868c336040516136c3959493929190614ee9565b60405180910390a45050505092915050565b600061271085351115613714576040517f5623289500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271085602001351115613754576040517f9db9ee9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271085604001351115613794576040517fddbf1bc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a249d42589896137eb6137e6368c90038c018c61485c565b6140b7565b896040518563ffffffff1660e01b815260040161380b9493929190615134565b61012060405180830381600087803b15801561382657600080fd5b505af115801561383a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385e919061497b565b905060005b8451811015613975576000858281518110613880576138806155d5565b602002602001015160200151511115613963577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639acff5ac8a84602001518885815181106138e7576138e76155d5565b602002602001015160000151898681518110613905576139056155d5565b6020026020010151602001516040518563ffffffff1660e01b81526004016139309493929190615195565b600060405180830381600087803b15801561394a57600080fd5b505af115801561395e573d6000803e3d6000fd5b505050505b8061396d81615505565b915050613863565b5060005b8351811015613c21576000848281518110613996576139966155d5565b602002602001015190507effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016816020015111156139ff576040517f95c96c6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604081015160ff1015613a3e576040517ff90c7b4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608101517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1015613a9b576040517fb5f8759400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b608081015160ff1015613ada576040517f90af4da600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602081015115613b335760408181015160208084015160008e8152600283528481208884015182528352848120865173ffffffffffffffffffffffffffffffffffffffff16825290925292902060f89190911b90911790555b606081015115613b8c576080810151606082015160008c81526003602090815260408083208883015184528252808320865173ffffffffffffffffffffffffffffffffffffffff168452909152902060f89290921b1790555b825160208085015160408051855173ffffffffffffffffffffffffffffffffffffffff1681528584015193810193909352808501519083015260608085015190830152608080850151908301523360a08301528c92917e506dbcdf2e70275bf246b8f39ca18ebea55b7253498928a3de5c5bae26bd849060c00160405180910390a45080613c1981615505565b915050613979565b506020015190505b9695505050505050565b6000806000851215613c5757613c488561553e565b613c529084615462565b613c61565b613c6185846154ee565b905080613c725760009150506104e3565b612710841415613c835790506104e3565b80613c9a81612710613c9588826154ee565b613213565b613ca491906154ee565b95945050505050565b60208201516040517f69e11cc50000000000000000000000000000000000000000000000000000000081526004810185905260248101919091526002604482015281906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906369e11cc59060640160006040518083038186803b158015613d4c57600080fd5b505afa158015613d60573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613da69190810190614743565b905060005b81518110156140ae576000828281518110613dc857613dc86155d5565b602002602001015190506000613de7868360200151633b9aca00613213565b905080156140535760a082015173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169163ceddd3e49116613f14576040840151613e4b578360600151613f1a565b60408481015190517f6352211e00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015613ed757600080fd5b505afa158015613eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0f91906145bb565b613f1a565b8360a001515b845160405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482018c90526044820185905215156064820152608401600060405180830381600087803b158015613f9757600080fd5b505af1158015613fab573d6000803e3d6000fd5b5050505060a082015173ffffffffffffffffffffffffffffffffffffffff1615614046578160a0015173ffffffffffffffffffffffffffffffffffffffff1663550b0432828a6002866040518563ffffffff1660e01b8152600401614013949392919061524e565b600060405180830381600087803b15801561402d57600080fd5b505af1158015614041573d6000803e3d6000fd5b505050505b61405081866154ee565b94505b87876000015188602001517f08b272f627530027641b54430e5e88cf4de5feb60e3df46d714a426e3cabb99f85853360405161409193929190614fe3565b60405180910390a4505080806140a690615505565b915050613dab565b50509392505050565b8051602082015160089190911b600117906018906140d7906127106154ee565b901b81179050602882604001516127106140f191906154ee565b901b8117905081606001511561410c57670100000000000000175b81608001511561412157670200000000000000175b8160a001511561413657670400000000000000175b8160c001511561414b57670800000000000000175b8160e001511561416057671000000000000000175b8161010001511561417657672000000000000000175b8161012001511561418c57674000000000000000175b816101400151156141a257678000000000000000175b816101600151156141b95768010000000000000000175b816101800151156141d05768020000000000000000175b816101a00151156141e75768040000000000000000175b816101c00151156141fe5768080000000000000000175b6101e0919091015160441b7c0ffffffffffffffffffffffffffffffffffffffff00000000000000000161790565b803561423781615633565b919050565b600082601f83011261424d57600080fd5b8135602061426261425d836153ca565b61537b565b80838252828201915082860187848660051b890101111561428257600080fd5b60005b858110156142aa57813561429881615633565b84529284019290840190600101614285565b5090979650505050505050565b600082601f8301126142c857600080fd5b813560206142d861425d836153ca565b8281528181019085830160a0808602880185018910156142f757600080fd5b6000805b8781101561435e5782848c031215614311578182fd5b6143196152c4565b843561432481615633565b81528488013588820152604080860135908201526060808601359082015260808086013590820152865294860194928201926001016142fb565b50929998505050505050505050565b600082601f83011261437e57600080fd5b602061438d61425d84356153ca565b808435825282820191508285018684873560051b88010111156143af57600080fd5b60005b86358110156145135767ffffffffffffffff80833511156143d257600080fd5b8235880160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828c0301121561440857600080fd5b6144106152ed565b87820135815260408201358381111561442857600080fd5b82019250603f83018b1361443b57600080fd5b87830135915061444d61425d836153ca565b808382528982019150604085018d604060c08702880101111561446f57600080fd5b600095505b848610156144f95760c0818f03121561448c57600080fd5b614494615310565b61449e8235615658565b813581528b8201358c8201526040820135604082015260608201356144c281615633565b60608201526080828101359082015260a08201356144df81615633565b60a0820152835260019590950194918a019160c001614474565b50828a0152508652505092840192908401906001016143b2565b50909695505050505050565b803561423781615658565b805161423781615633565b60008083601f84011261454757600080fd5b50813567ffffffffffffffff81111561455f57600080fd5b60208301915083602082850101111561457757600080fd5b9250929050565b60006080828403121561459057600080fd5b50919050565b6000610200828403121561459057600080fd5b60006040828403121561459057600080fd5b6000602082840312156145cd57600080fd5b81516104e381615633565b600080600080600080600080610340898b0312156145f557600080fd5b6145fe8961422c565b9750602089013567ffffffffffffffff8082111561461b57600080fd5b6146278c838d016145a9565b98506146368c60408d0161457e565b97506146458c60c08d01614596565b96506102c08b013595506102e08b013591508082111561466457600080fd5b6146708c838d0161436d565b94506103008b013591508082111561468757600080fd5b6146938c838d016142b7565b93506103208b01359150808211156146aa57600080fd5b506146b78b828c0161423c565b9150509295985092959890939650565b60008060008060008060a087890312156146e057600080fd5b86356146eb81615633565b95506020870135945060408701359350606087013567ffffffffffffffff81111561471557600080fd5b61472189828a01614535565b909450925050608087013561473581615658565b809150509295509295509295565b6000602080838503121561475657600080fd5b825167ffffffffffffffff81111561476d57600080fd5b8301601f8101851361477e57600080fd5b805161478c61425d826153ca565b8181528381019083850160c0808502860187018a10156147ab57600080fd5b60009550855b858110156148305781838c0312156147c7578687fd5b6147cf615310565b83516147da81615658565b81528389015189820152604080850151908201526060808501516147fd81615633565b908201526080848101519082015260a08085015161481a81615633565b90820152855293870193918101916001016147b1565b50919998505050505050505050565b60006020828403121561485157600080fd5b81516104e381615658565b6000610200828403121561486f57600080fd5b614877615333565b82358152602083013560208201526040830135604082015261489b6060840161451f565b60608201526148ac6080840161451f565b60808201526148bd60a0840161451f565b60a08201526148ce60c0840161451f565b60c08201526148df60e0840161451f565b60e08201526101006148f281850161451f565b9082015261012061490484820161451f565b9082015261014061491684820161451f565b9082015261016061492884820161451f565b9082015261018061493a84820161451f565b908201526101a061494c84820161451f565b908201526101c061495e84820161451f565b908201526101e061497084820161422c565b908201529392505050565b6000610120828403121561498e57600080fd5b614996615357565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526149e260e0840161452a565b60e0820152610100928301519281019290925250919050565b600060208284031215614a0d57600080fd5b5051919050565b60008060408385031215614a2757600080fd5b823591506020830135614a3981615633565b809150509250929050565b600080600060608486031215614a5957600080fd5b833592506020840135614a6b81615633565b91506040840135614a7b81615633565b809150509250925092565b600080600080600060608688031215614a9e57600080fd5b85359450602086013567ffffffffffffffff80821115614abd57600080fd5b614ac989838a01614535565b90965094506040880135915080821115614ae257600080fd5b50614aef88828901614535565b969995985093965092949392505050565b60008060408385031215614b1357600080fd5b8235915060208084013567ffffffffffffffff80821115614b3357600080fd5b818601915086601f830112614b4757600080fd5b813581811115614b5957614b59615604565b614b89847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161537b565b91508082528784828501011115614b9f57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000806000806103008789031215614bd757600080fd5b86359550614be8886020890161457e565b9450614bf78860a08901614596565b93506102a087013592506102c087013567ffffffffffffffff80821115614c1d57600080fd5b614c298a838b0161436d565b93506102e0890135915080821115614c4057600080fd5b50614c4d89828a016142b7565b9150509295509295509295565b6000806000806000806000610320888a031215614c7657600080fd5b87359650614c878960208a0161457e565b9550614c968960a08a01614596565b94506102a088013593506102c088013567ffffffffffffffff80821115614cbc57600080fd5b614cc88b838c0161436d565b94506102e08a0135915080821115614cdf57600080fd5b614ceb8b838c016142b7565b93506103008a0135915080821115614d0257600080fd5b50614d0f8a828b0161423c565b91505092959891949750929550565b60008060408385031215614d3157600080fd5b50508035926020909101359150565b600080600080600080600060c0888a031215614d5b57600080fd5b87359650602088013595506040880135614d7481615633565b9450606088013567ffffffffffffffff811115614d9057600080fd5b614d9c8a828b01614535565b9095509350506080880135614db081615658565b8092505060a0880135905092959891949750929550565b600080600060608486031215614ddc57600080fd5b83359250602084013591506040840135614a7b81615633565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614e9257600080fd5b8301803567ffffffffffffffff811115614eab57600080fd5b803603851315614eba57600080fd5b604080850152614ed1608085018260208501614df5565b91505060208401356060840152809150509392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260006020868184015285604084015260a0606084015284518060a085015260005b81811015614f3f5786810183015185820160c001528201614f23565b81811115614f5157600060c083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016830160c0019150613c299050608083018473ffffffffffffffffffffffffffffffffffffffff169052565b606081526000614fb6606083018688614df5565b905083602083015273ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b610100810161504582868051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b8360c083015273ffffffffffffffffffffffffffffffffffffffff831660e0830152949350505050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156142aa57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101615094565b8481526060602082015260006150e0606083018587614df5565b905073ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b858152606060208201526000615121606083018688614df5565b82810360408401526124e0818587614df5565b600060e082019050858252843560208301526020850135604083015260408501356060830152606085013561516881615633565b73ffffffffffffffffffffffffffffffffffffffff16608083015260a082019390935260c0015292915050565b600060808201868352602086818501528560408501526080606085015281855180845260a086019150828701935060005b8181101561523f5761522c8386518051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b9383019360c092909201916001016151c6565b50909998505050505050505050565b84815260208101849052604081018390526101208101613ca460608301848051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b60405160a0810167ffffffffffffffff811182821017156152e7576152e7615604565b60405290565b6040805190810167ffffffffffffffff811182821017156152e7576152e7615604565b60405160c0810167ffffffffffffffff811182821017156152e7576152e7615604565b604051610200810167ffffffffffffffff811182821017156152e7576152e7615604565b604051610120810167ffffffffffffffff811182821017156152e7576152e7615604565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156153c2576153c2615604565b604052919050565b600067ffffffffffffffff8211156153e4576153e4615604565b5060051b60200190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561542857615428615577565b827f800000000000000000000000000000000000000000000000000000000000000003841281161561545c5761545c615577565b50500190565b6000821982111561547557615475615577565b500190565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156154b4576154b4615577565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156154e8576154e8615577565b50500390565b60008282101561550057615500615577565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561553757615537615577565b5060010190565b60007f800000000000000000000000000000000000000000000000000000000000000082141561557057615570615577565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461565557600080fd5b50565b801515811461565557600080fdfea2646970667358221220d99b966133ded436500b965ef527dd941db504d5d1fcb3d208f0dad498012ced64736f6c63430008060033",
  "devdoc": {
    "details": "A project can transfer control from this contract to another allowed controller contract at any time. Inherits from: IJBController - general interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the Juicebox protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.",
    "kind": "dev",
    "methods": {
      "burnTokensOf(address,uint256,uint256,string,bool)": {
        "details": "Only a token's holder, a designated operator, or a project's terminal's delegate can burn it.",
        "params": {
          "_holder": "The account that is having its tokens burned.",
          "_memo": "A memo to pass along to the emitted event.",
          "_preferClaimedTokens": "A flag indicating whether ERC20's should be burned first if they have been issued.",
          "_projectId": "The ID of the project to which the tokens being burned belong.",
          "_tokenCount": "The number of tokens to burn."
        }
      },
      "changeTokenOf(uint256,address,address)": {
        "details": "Only a project owner or operator can change its token.",
        "params": {
          "_newOwner": "An address to transfer the current token's ownership to. This is optional, but it cannot be done later.",
          "_projectId": "The ID of the project to which the changed token belongs.",
          "_token": "The new token."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_fundingCycleStore": "A contract storing all funding cycle configurations.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers.",
          "_splitsStore": "A contract that stores splits for each project.",
          "_tokenStore": "A contract that manages token minting and burning."
        }
      },
      "distributeReservedTokensOf(uint256,string)": {
        "params": {
          "_memo": "A memo to pass along to the emitted event.",
          "_projectId": "The ID of the project to which the reserved tokens belong."
        },
        "returns": {
          "_0": "The amount of minted reserved tokens."
        }
      },
      "distributionLimitCurrencyOf(uint256,uint256,address)": {
        "params": {
          "_configuration": "The configuration during which the distribution limit currency applies.",
          "_projectId": "The ID of the project to get the distribution limit currency of.",
          "_terminal": "The terminal from which distributions are being limited."
        }
      },
      "distributionLimitOf(uint256,uint256,address)": {
        "params": {
          "_configuration": "The configuration during which the distribution limit applies.",
          "_projectId": "The ID of the project to get the distribution limit of.",
          "_terminal": "The terminal from which distributions are being limited."
        }
      },
      "issueTokenFor(uint256,string,string)": {
        "details": "Deploys a project's ERC-20 token contract.Only a project owner or operator can issue its token.",
        "params": {
          "_name": "The ERC-20's name.",
          "_projectId": "The ID of the project being issued tokens.",
          "_symbol": "The ERC-20's symbol."
        }
      },
      "launchFundingCycleFor(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[])": {
        "details": "Only a project owner or operator can launch its funding cycles.",
        "params": {
          "_data": "A JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.",
          "_fundAccessConstraints": "An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.",
          "_groupedSplits": "An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.",
          "_metadata": "A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.",
          "_mustStartAtOrAfter": "The time before which the configured funding cycle can't start.",
          "_projectId": "The ID of the project to launch funding cycles for.",
          "_terminals": "Payment terminals to add for the project."
        },
        "returns": {
          "configuration": "The configuration of the funding cycle that was successfully created."
        }
      },
      "launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[])": {
        "details": "Each operation within this transaction can be done in sequence separately.Anyone can deploy a project on an owner's behalf.",
        "params": {
          "_data": "A JBFundingCycleData data structure that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.",
          "_fundAccessConstraints": "An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.",
          "_groupedSplits": "An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.",
          "_metadata": "A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.",
          "_mustStartAtOrAfter": "The time before which the configured funding cycle can't start.",
          "_owner": "The address to set as the owner of the project. The project ERC-721 will be owned by this address.",
          "_projectMetadata": "A link to associate with the project within a particular domain. This can be updated any time by the owner of the project.",
          "_terminals": "Payment terminals to add for the project."
        },
        "returns": {
          "projectId": "The ID of the project."
        }
      },
      "migrate(uint256,address)": {
        "details": "Only a project's owner or a designated operator can migrate it.",
        "params": {
          "_projectId": "The ID of the project that will be migrated from this controller.",
          "_to": "The controller to which the project is migrating."
        }
      },
      "mintTokensOf(uint256,uint256,address,string,bool,uint256)": {
        "details": "Only a project's owner, a designated operator, or one of its terminal's delegate can mint its tokens.",
        "params": {
          "_beneficiary": "The account that the tokens are being minted for.",
          "_memo": "A memo to pass along to the emitted event.",
          "_preferClaimedTokens": "A flag indicating whether ERC20's should be minted if they have been issued.",
          "_projectId": "The ID of the project to which the tokens being minted belong.",
          "_reservedRate": "The reserved rate to use when minting tokens. A positive amount will reduce the token count minted to the beneficiary, instead being reserved for preprogrammed splits. This number is out of 10000.",
          "_tokenCount": "The amount of tokens to mint."
        },
        "returns": {
          "beneficiaryTokenCount": "The amount of tokens minted for the beneficiary."
        }
      },
      "overflowAllowanceCurrencyOf(uint256,uint256,address)": {
        "params": {
          "_configuration": "The configuration of the during which the allowance currency applies.",
          "_projectId": "The ID of the project to get the overflow allowance currency of.",
          "_terminal": "The terminal managing the overflow."
        }
      },
      "overflowAllowanceOf(uint256,uint256,address)": {
        "params": {
          "_configuration": "The configuration of the during which the allowance applies.",
          "_projectId": "The ID of the project to get the overflow allowance of.",
          "_terminal": "The terminal managing the overflow."
        }
      },
      "prepForMigrationOf(uint256,address)": {
        "params": {
          "_projectId": "The ID of the project that will be migrated to this controller."
        }
      },
      "reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[])": {
        "details": "Only a project's owner or a designated operator can configure its funding cycles.",
        "params": {
          "_data": "A JBFundingCycleData data structure that defines the project's funding cycle that will be queued. These properties will remain fixed for the duration of the funding cycle.",
          "_fundAccessConstraints": "An array containing amounts, in wei (18 decimals), that a project can use from its own overflow on-demand for each payment terminal.",
          "_groupedSplits": "An array of splits to set for any number of group. The core protocol makes use of groups defined in `JBSplitsGroups`.",
          "_metadata": "A JBFundingCycleMetadata data structure specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.",
          "_mustStartAtOrAfter": "The time before which the configured funding cycle can't start.",
          "_projectId": "The ID of the project whose funding cycles are being reconfigured."
        },
        "returns": {
          "_0": "The configuration of the funding cycle that was successfully reconfigured."
        }
      },
      "reservedTokenBalanceOf(uint256,uint256)": {
        "params": {
          "_projectId": "The ID of the project to get a reserved token balance of.",
          "_reservedRate": "The reserved rate to use when making the calculation."
        },
        "returns": {
          "_0": "The current amount of reserved tokens."
        }
      }
    },
    "stateVariables": {
      "_packedDistributionLimitDataOf": {
        "details": "bits 0-247: The amount of token that a project can withdraw per funding cycle.bits 248-255: The currency of amount that a project can withdraw. _projectId The ID of the project to get the packed distribution limit data of. _configuration The configuration during which the packed distribution limit data applies. _terminal The terminal from which distributions are being limited."
      },
      "_packedOverflowAllowanceDataOf": {
        "details": "bits 0-247: The amount of overflow that a project is allowed to tap into on-demand throughout configuration.bits 248-255: The currency of the amount of overflow that a project is allowed to tap. _projectId The ID of the project to get the packed overflow allowance data of. _configuration The configuration during which the packed overflow allowance data applies. _terminal The terminal managing the overflow."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "burnTokensOf(address,uint256,uint256,string,bool)": {
        "notice": "Burns a token holder's supply."
      },
      "changeTokenOf(uint256,address,address)": {
        "notice": "Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed."
      },
      "directory()": {
        "notice": "The directory of terminals and controllers for projects."
      },
      "distributeReservedTokensOf(uint256,string)": {
        "notice": "Distributes all outstanding reserved tokens for a project."
      },
      "distributionLimitCurrencyOf(uint256,uint256,address)": {
        "notice": "The currency of the amount of that a project can withdraw per funding cycle."
      },
      "distributionLimitOf(uint256,uint256,address)": {
        "notice": "The amount of token that a project can withdraw per funding cycle."
      },
      "fundingCycleStore()": {
        "notice": "The contract storing all funding cycle configurations."
      },
      "issueTokenFor(uint256,string,string)": {
        "notice": "Issues an owner's ERC-20 Tokens that'll be used when claiming tokens."
      },
      "launchFundingCycleFor(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[])": {
        "notice": "Creates a funding cycle for an already existing project ERC-721."
      },
      "launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[])": {
        "notice": "Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits."
      },
      "migrate(uint256,address)": {
        "notice": "Allows a project to migrate from this controller to another."
      },
      "mintTokensOf(uint256,uint256,address,string,bool,uint256)": {
        "notice": "Mint new token supply into an account."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "overflowAllowanceCurrencyOf(uint256,uint256,address)": {
        "notice": "The currency of the amount of overflow that a project is allowed to tap into."
      },
      "overflowAllowanceOf(uint256,uint256,address)": {
        "notice": "The amount of overflow that a project is allowed to tap into on-demand throughout configuration."
      },
      "prepForMigrationOf(uint256,address)": {
        "notice": "Allows other controllers to signal to this one that a migration is expected for the specified project."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership."
      },
      "reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[])": {
        "notice": "Configures the properties of the current funding cycle if the project hasn't distributed tokens yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot."
      },
      "reservedTokenBalanceOf(uint256,uint256)": {
        "notice": "Gets the amount of reserved tokens that a project has available to distribute."
      },
      "splitsStore()": {
        "notice": "The contract that stores splits for each project."
      },
      "tokenStore()": {
        "notice": "The contract that manages token minting and burning."
      }
    },
    "notice": "Stitches together funding cycles and community tokens, making sure all activity is accounted for and correct.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 693,
        "contract": "contracts/JBController.sol:JBController",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5388,
        "contract": "contracts/JBController.sol:JBController",
        "label": "_processedTokenTrackerOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 5398,
        "contract": "contracts/JBController.sol:JBController",
        "label": "_packedDistributionLimitDataOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)15109,t_uint256)))"
      },
      {
        "astId": 5408,
        "contract": "contracts/JBController.sol:JBController",
        "label": "_packedOverflowAllowanceDataOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)15109,t_uint256)))"
      }
    ],
    "types": {
      "t_contract(IJBPaymentTerminal)15109": {
        "encoding": "inplace",
        "label": "contract IJBPaymentTerminal",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_contract(IJBPaymentTerminal)15109,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IJBPaymentTerminal)15109",
        "label": "mapping(contract IJBPaymentTerminal => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)15109,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IJBPaymentTerminal => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IJBPaymentTerminal)15109,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)15109,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(contract IJBPaymentTerminal => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)15109,t_uint256))"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
