{
  "address": "0xc7742C4057A1D07308915Ef088774E166fc6E80B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "_fundingCycleStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBTokenStore",
          "name": "_tokenStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBSplitsStore",
          "name": "_splitsStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CANT_MIGRATE_TO_CURRENT_CONTROLLER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHANGE_TOKEN_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FUNDING_CYCLE_ALREADY_LAUNCHED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_BALLOT_REDEMPTION_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_DISTRIBUTION_LIMIT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_DISTRIBUTION_LIMIT_CURRENCY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_OVERFLOW_ALLOWANCE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_OVERFLOW_ALLOWANCE_CURRENCY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_REDEMPTION_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_RESERVED_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MIGRATION_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_CURRENT_CONTROLLER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NO_BURNABLE_TOKENS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_TOKENS_TO_MINT",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "BurnTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beneficiaryTokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeReservedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBSplit",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeToReservedTokenSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LaunchFundingCycles",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LaunchProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IJBController",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beneficiaryTokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservedRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MintTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IJBController",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "PrepMigration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ReconfigureFundingCycles",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IJBPaymentTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimitCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowanceCurrency",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFundAccessConstraints",
          "name": "constraints",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetFundAccessConstraints",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        }
      ],
      "name": "burnTokensOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBToken",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeTokenOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "distributeReservedTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "distributionLimitOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycleStore",
      "outputs": [
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "issueTokenFor",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reservedRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballotRedemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pausePay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseDistributions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseRedeem",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseMint",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseBurn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowChangeToken",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTerminalMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowControllerMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "holdFees",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useTotalOverflowForRedemptions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForPay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForRedeem",
              "type": "bool"
            },
            {
              "internalType": "contract IJBFundingCycleDataSource",
              "name": "dataSource",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleMetadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_mustStartAtOrAfter",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "preferClaimed",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "percent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "projectId",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IJBSplitAllocator",
                  "name": "allocator",
                  "type": "address"
                }
              ],
              "internalType": "struct JBSplit[]",
              "name": "splits",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct JBGroupedSplits[]",
          "name": "_groupedSplits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IJBPaymentTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimitCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowanceCurrency",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundAccessConstraints[]",
          "name": "_fundAccessConstraints",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IJBPaymentTerminal[]",
          "name": "_terminals",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "launchFundingCyclesFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "domain",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBProjectMetadata",
          "name": "_projectMetadata",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reservedRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballotRedemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pausePay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseDistributions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseRedeem",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseMint",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseBurn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowChangeToken",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTerminalMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowControllerMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "holdFees",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useTotalOverflowForRedemptions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForPay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForRedeem",
              "type": "bool"
            },
            {
              "internalType": "contract IJBFundingCycleDataSource",
              "name": "dataSource",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleMetadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_mustStartAtOrAfter",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "preferClaimed",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "percent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "projectId",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IJBSplitAllocator",
                  "name": "allocator",
                  "type": "address"
                }
              ],
              "internalType": "struct JBSplit[]",
              "name": "splits",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct JBGroupedSplits[]",
          "name": "_groupedSplits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IJBPaymentTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimitCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowanceCurrency",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundAccessConstraints[]",
          "name": "_fundAccessConstraints",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IJBPaymentTerminal[]",
          "name": "_terminals",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "launchProjectFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBController",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_useReservedRate",
          "type": "bool"
        }
      ],
      "name": "mintTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beneficiaryTokenCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configuration",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "overflowAllowanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBController",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "prepForMigrationOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reservedRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballotRedemptionRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pausePay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseDistributions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseRedeem",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseMint",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "pauseBurn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowChangeToken",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowTerminalMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowControllerMigration",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "holdFees",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useTotalOverflowForRedemptions",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForPay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useDataSourceForRedeem",
              "type": "bool"
            },
            {
              "internalType": "contract IJBFundingCycleDataSource",
              "name": "dataSource",
              "type": "address"
            }
          ],
          "internalType": "struct JBFundingCycleMetadata",
          "name": "_metadata",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_mustStartAtOrAfter",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "preferClaimed",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "percent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "projectId",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IJBSplitAllocator",
                  "name": "allocator",
                  "type": "address"
                }
              ],
              "internalType": "struct JBSplit[]",
              "name": "splits",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct JBGroupedSplits[]",
          "name": "_groupedSplits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract IJBPaymentTerminal",
              "name": "terminal",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionLimitCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "overflowAllowanceCurrency",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundAccessConstraints[]",
          "name": "_fundAccessConstraints",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "reconfigureFundingCyclesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservedRate",
          "type": "uint256"
        }
      ],
      "name": "reservedTokenBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitsStore",
      "outputs": [
        {
          "internalType": "contract IJBSplitsStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenStore",
      "outputs": [
        {
          "internalType": "contract IJBTokenStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservedRate",
          "type": "uint256"
        }
      ],
      "name": "totalOutstandingTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x62d3a072542d0ea2769269f75091da289a859ad510937bd40a6f55bd5b76ef04",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0xc7742C4057A1D07308915Ef088774E166fc6E80B",
    "transactionIndex": 1,
    "gasUsed": "4910426",
    "logsBloom": "0x
    "blockHash": "0x63bead2b8124a25490d0a43ddc64d9d92c7ead43c0edcb926261e9af5e1ed55b",
    "transactionHash": "0x62d3a072542d0ea2769269f75091da289a859ad510937bd40a6f55bd5b76ef04",
    "logs": [],
    "blockNumber": 10389621,
    "cumulativeGasUsed": "4956189",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD00bc9f5558838Df0e9165491917701cCdA0df99",
    "0x9E84bEcA3E4d3cfE5C3b5E1b534363E8D7468ABc",
    "0x729eE70bfdF65bEc7A530Fd49F644d07D0b2c087",
    "0x05f59E48547c4180E4a9c5d4e84f2Cd0ABeF0d54",
    "0x408dc883b700a77aC8a4e253862Cf74CfC9340B2",
    "0xc43160B6E892b09db9c3C09010Ab755CD836e803"
  ],
  "numDeployments": 4,
  "solcInputHash": "07911cdbccef7c7649816b5dacf9a911",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"_fundingCycleStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBTokenStore\",\"name\":\"_tokenStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"_splitsStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANT_MIGRATE_TO_CURRENT_CONTROLLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHANGE_TOKEN_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUNDING_CYCLE_ALREADY_LAUNCHED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_BALLOT_REDEMPTION_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_DISTRIBUTION_LIMIT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_DISTRIBUTION_LIMIT_CURRENCY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_OVERFLOW_ALLOWANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_OVERFLOW_ALLOWANCE_CURRENCY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_REDEMPTION_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_RESERVED_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MIGRATION_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_CURRENT_CONTROLLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_BURNABLE_TOKENS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_TOKENS_TO_MINT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaryTokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeReservedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBSplit\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeToReservedTokenSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LaunchFundingCycles\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LaunchProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IJBController\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaryTokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IJBController\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PrepMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ReconfigureFundingCycles\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct JBFundAccessConstraints\",\"name\":\"constraints\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetFundAccessConstraints\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"}],\"name\":\"burnTokensOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeTokenOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"distributeReservedTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"distributionLimitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycleStore\",\"outputs\":[{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"issueTokenFor\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowChangeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useTotalOverflowForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForPay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"contract IJBFundingCycleDataSource\",\"name\":\"dataSource\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleMetadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"_groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"_fundAccessConstraints\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IJBPaymentTerminal[]\",\"name\":\"_terminals\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"launchFundingCyclesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"internalType\":\"struct JBProjectMetadata\",\"name\":\"_projectMetadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowChangeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useTotalOverflowForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForPay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"contract IJBFundingCycleDataSource\",\"name\":\"dataSource\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleMetadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"_groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"_fundAccessConstraints\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IJBPaymentTerminal[]\",\"name\":\"_terminals\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"launchProjectFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBController\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useReservedRate\",\"type\":\"bool\"}],\"name\":\"mintTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beneficiaryTokenCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"overflowAllowanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBController\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"prepForMigrationOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowChangeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useTotalOverflowForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForPay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"contract IJBFundingCycleDataSource\",\"name\":\"dataSource\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleMetadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"_groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"_fundAccessConstraints\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"reconfigureFundingCyclesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedRate\",\"type\":\"uint256\"}],\"name\":\"reservedTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitsStore\",\"outputs\":[{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStore\",\"outputs\":[{\"internalType\":\"contract IJBTokenStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedRate\",\"type\":\"uint256\"}],\"name\":\"totalOutstandingTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Adheres to: IJBController - general interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the protocol's rules.Inherits from: JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\",\"kind\":\"dev\",\"methods\":{\"burnTokensOf(address,uint256,uint256,string,bool)\":{\"details\":\"Only a token's holder, a designated operator, or a project's terminal can burn it.\",\"params\":{\"_holder\":\"The account that is having its tokens burned.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_preferClaimedTokens\":\"A flag indicating whether a project's attached token contract should be burned first if they have been issued.\",\"_projectId\":\"The ID of the project to which the tokens being burned belong.\",\"_tokenCount\":\"The number of tokens to burn.\"}},\"changeTokenOf(uint256,address,address)\":{\"details\":\"Only a project's owner or operator can change its token.\",\"params\":{\"_newOwner\":\"An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\",\"_projectId\":\"The ID of the project to which the changed token belongs.\",\"_token\":\"The new token.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_fundingCycleStore\":\"A contract storing all funding cycle configurations.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\",\"_splitsStore\":\"A contract that stores splits for each project.\",\"_tokenStore\":\"A contract that manages token minting and burning.\"}},\"distributeReservedTokensOf(uint256,string)\":{\"params\":{\"_memo\":\"A memo to pass along to the emitted event.\",\"_projectId\":\"The ID of the project to which the reserved tokens belong.\"},\"returns\":{\"_0\":\"The amount of minted reserved tokens.\"}},\"distributionLimitOf(uint256,uint256,address)\":{\"details\":\"The number of decimals in the returned fixed point amount is the same as that of the specified terminal. \",\"params\":{\"_configuration\":\"The configuration during which the distribution limit applies.\",\"_projectId\":\"The ID of the project to get the distribution limit of.\",\"_terminal\":\"The terminal from which distributions are being limited.\"},\"returns\":{\"_0\":\"The distribution limit, as a fixed point number with the same number of decimals as the provided terminal.\",\"_1\":\"The currency of the distribution limit.\"}},\"issueTokenFor(uint256,string,string)\":{\"details\":\"Deploys a project's ERC20 JBToken contract.Only a project's owner or operator can issue its token.\",\"params\":{\"_name\":\"The ERC20's name.\",\"_projectId\":\"The ID of the project being issued tokens.\",\"_symbol\":\"The ERC20's symbol.\"}},\"launchFundingCyclesFor(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[],string)\":{\"details\":\"Each operation within this transaction can be done in sequence separately.Only a project owner or operator can launch its funding cycles.\",\"params\":{\"_data\":\"Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\",\"_fundAccessConstraints\":\"An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.\",\"_groupedSplits\":\"An array of splits to set for any number of groups. \",\"_memo\":\"A memo to pass along to the emitted event.\",\"_metadata\":\"Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\",\"_mustStartAtOrAfter\":\"The time before which the configured funding cycle cannot start.\",\"_projectId\":\"The ID of the project to launch funding cycles for.\",\"_terminals\":\"Payment terminals to add for the project.\"},\"returns\":{\"configuration\":\"The configuration of the funding cycle that was successfully created.\"}},\"launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[],string)\":{\"details\":\"Each operation within this transaction can be done in sequence separately.Anyone can deploy a project on an owner's behalf.\",\"params\":{\"_data\":\"Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\",\"_fundAccessConstraints\":\"An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.\",\"_groupedSplits\":\"An array of splits to set for any number of groups. \",\"_memo\":\"A memo to pass along to the emitted event.\",\"_metadata\":\"Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\",\"_mustStartAtOrAfter\":\"The time before which the configured funding cycle cannot start.\",\"_owner\":\"The address to set as the owner of the project. The project ERC-721 will be owned by this address.\",\"_projectMetadata\":\"Metadata to associate with the project within a particular domain. This can be updated any time by the owner of the project.\",\"_terminals\":\"Payment terminals to add for the project.\"},\"returns\":{\"projectId\":\"The ID of the project.\"}},\"migrate(uint256,address)\":{\"details\":\"Only a project's owner or a designated operator can migrate it.\",\"params\":{\"_projectId\":\"The ID of the project that will be migrated from this controller.\",\"_to\":\"The controller to which the project is migrating.\"}},\"mintTokensOf(uint256,uint256,address,string,bool,bool)\":{\"details\":\"Only a project's owner, a designated operator, or one of its terminals can mint its tokens.\",\"params\":{\"_beneficiary\":\"The account that the tokens are being minted for.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_preferClaimedTokens\":\"A flag indicating whether a project's attached token contract should be minted if they have been issued.\",\"_projectId\":\"The ID of the project to which the tokens being minted belong.\",\"_tokenCount\":\"The amount of tokens to mint in total, counting however many should be reserved.\",\"_useReservedRate\":\"Whether to use the current funding cycle's reserved rate in the mint calculation.\"},\"returns\":{\"beneficiaryTokenCount\":\"The amount of tokens minted for the beneficiary.\"}},\"overflowAllowanceOf(uint256,uint256,address)\":{\"details\":\"The number of decimals in the returned fixed point amount is the same as that of the specified terminal. \",\"params\":{\"_configuration\":\"The configuration of the during which the allowance applies.\",\"_projectId\":\"The ID of the project to get the overflow allowance of.\",\"_terminal\":\"The terminal managing the overflow.\"},\"returns\":{\"_0\":\"The overflow allowance, as a fixed point number with the same number of decimals as the provided terminal.\",\"_1\":\"The currency of the overflow allowance.\"}},\"prepForMigrationOf(uint256,address)\":{\"details\":\"This controller should not yet be the project's controller.\",\"params\":{\"_from\":\"The controller being migrated from.\",\"_projectId\":\"The ID of the project that will be migrated to this controller.\"}},\"reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],string)\":{\"details\":\"Only a project's owner or a designated operator can configure its funding cycles.\",\"params\":{\"_data\":\"Data that defines the funding cycle. These properties will remain fixed for the duration of the funding cycle.\",\"_fundAccessConstraints\":\"An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.\",\"_groupedSplits\":\"An array of splits to set for any number of groups. \",\"_memo\":\"A memo to pass along to the emitted event.\",\"_metadata\":\"Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\",\"_mustStartAtOrAfter\":\"The time before which the configured funding cycle cannot start.\",\"_projectId\":\"The ID of the project whose funding cycles are being reconfigured.\"},\"returns\":{\"configuration\":\"The configuration of the funding cycle that was successfully reconfigured.\"}},\"reservedTokenBalanceOf(uint256,uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get a reserved token balance of.\",\"_reservedRate\":\"The reserved rate to use when making the calculation.\"},\"returns\":{\"_0\":\"The current amount of reserved tokens.\"}},\"totalOutstandingTokensOf(uint256,uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get total outstanding tokens of.\",\"_reservedRate\":\"The reserved rate to use when making the calculation.\"},\"returns\":{\"_0\":\"The current total amount of outstanding tokens for the project.\"}}},\"stateVariables\":{\"_packedDistributionLimitDataOf\":{\"details\":\"bits 0-247: The amount of token that a project can distribute per funding cycle.bits 248-255: The currency of amount that a project can distribute. _projectId The ID of the project to get the packed distribution limit data of. _configuration The configuration during which the packed distribution limit data applies. _terminal The terminal from which distributions are being limited.\"},\"_packedOverflowAllowanceDataOf\":{\"details\":\"bits 0-247: The amount of overflow that a project is allowed to tap into on-demand throughout the configuration.bits 248-255: The currency of the amount of overflow that a project is allowed to tap. _projectId The ID of the project to get the packed overflow allowance data of. _configuration The configuration during which the packed overflow allowance data applies. _terminal The terminal managing the overflow.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"burnTokensOf(address,uint256,uint256,string,bool)\":{\"notice\":\"Burns a token holder's supply.\"},\"changeTokenOf(uint256,address,address)\":{\"notice\":\"Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\"},\"directory()\":{\"notice\":\"The directory of terminals and controllers for projects.\"},\"distributeReservedTokensOf(uint256,string)\":{\"notice\":\"Distributes all outstanding reserved tokens for a project.\"},\"distributionLimitOf(uint256,uint256,address)\":{\"notice\":\"The amount of token that a project can distribute per funding cycle, and the currency it's in terms of.\"},\"fundingCycleStore()\":{\"notice\":\"The contract storing all funding cycle configurations.\"},\"issueTokenFor(uint256,string,string)\":{\"notice\":\"Issues an owner's ERC20 JBTokens that'll be used when claiming tokens.\"},\"launchFundingCyclesFor(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[],string)\":{\"notice\":\"Creates a funding cycle for an already existing project ERC-721.\"},\"launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[],string)\":{\"notice\":\"Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits.\"},\"migrate(uint256,address)\":{\"notice\":\"Allows a project to migrate from this controller to another.\"},\"mintTokensOf(uint256,uint256,address,string,bool,bool)\":{\"notice\":\"Mint new token supply into an account, and optionally reserve a supply to be distributed according to the project's current funding cycle configuration.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"overflowAllowanceOf(uint256,uint256,address)\":{\"notice\":\"The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of.\"},\"prepForMigrationOf(uint256,address)\":{\"notice\":\"Allows other controllers to signal to this one that a migration is expected for the specified project.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership.\"},\"reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],string)\":{\"notice\":\"Proposes a configuration of a subsequent funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot.\"},\"reservedTokenBalanceOf(uint256,uint256)\":{\"notice\":\"Gets the amount of reserved tokens that a project has available to distribute.\"},\"splitsStore()\":{\"notice\":\"The contract that stores splits for each project.\"},\"tokenStore()\":{\"notice\":\"The contract that manages token minting and burning.\"},\"totalOutstandingTokensOf(uint256,uint256)\":{\"notice\":\"Gets the current total amount of outstanding tokens for a project, given a reserved rate.\"}},\"notice\":\"Stitches together funding cycles and community tokens, making sure all activity is accounted for and correct.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBController.sol\":\"JBController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0x42821345981bc0434a90ba2268a2f5278dfe9e38166981d72fc7f3b776a29495\",\"license\":\"Unlicense\"},\"contracts/JBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './abstract/JBOperatable.sol';\\nimport './interfaces/IJBProjects.sol';\\nimport './interfaces/IJBPaymentTerminal.sol';\\nimport './interfaces/IJBOperatorStore.sol';\\nimport './interfaces/IJBFundingCycleDataSource.sol';\\nimport './interfaces/IJBPrices.sol';\\nimport './interfaces/IJBController.sol';\\nimport './interfaces/IJBController.sol';\\nimport './libraries/JBConstants.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror INVALID_DISTRIBUTION_LIMIT();\\nerror INVALID_DISTRIBUTION_LIMIT_CURRENCY();\\nerror INVALID_OVERFLOW_ALLOWANCE();\\nerror INVALID_OVERFLOW_ALLOWANCE_CURRENCY();\\nerror BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\\nerror NOT_CURRENT_CONTROLLER();\\nerror CANT_MIGRATE_TO_CURRENT_CONTROLLER();\\nerror CHANGE_TOKEN_NOT_ALLOWED();\\nerror FUNDING_CYCLE_ALREADY_LAUNCHED();\\nerror INVALID_BALLOT_REDEMPTION_RATE();\\nerror INVALID_RESERVED_RATE();\\nerror INVALID_REDEMPTION_RATE();\\nerror MIGRATION_NOT_ALLOWED();\\nerror MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE();\\nerror NO_BURNABLE_TOKENS();\\nerror ZERO_TOKENS_TO_MINT();\\n\\n/**\\n  @notice\\n  Stitches together funding cycles and community tokens, making sure all activity is accounted for and correct.\\n\\n  @dev\\n  Adheres to:\\n  IJBController - general interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the protocol's rules.\\n\\n  @dev\\n  Inherits from:\\n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\\n*/\\ncontract JBController is IJBController, JBOperatable {\\n  // A library that parses the packed funding cycle metadata into a more friendly format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The difference between the processed token tracker of a project and the project's token's total supply is the amount of tokens that still need to have reserves minted against them.\\n\\n    _projectId The ID of the project to get the tracker of.\\n  */\\n  mapping(uint256 => int256) private _processedTokenTrackerOf;\\n\\n  /**\\n    @notice\\n    Data regarding the distribution limit of a project during a configuration.\\n\\n    @dev\\n    bits 0-247: The amount of token that a project can distribute per funding cycle.\\n\\n    @dev\\n    bits 248-255: The currency of amount that a project can distribute.\\n\\n    _projectId The ID of the project to get the packed distribution limit data of.\\n    _configuration The configuration during which the packed distribution limit data applies.\\n    _terminal The terminal from which distributions are being limited.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => uint256)))\\n    private _packedDistributionLimitDataOf;\\n\\n  /**\\n    @notice\\n    Data regarding the overflow allowance of a project during a configuration.\\n\\n    @dev\\n    bits 0-247: The amount of overflow that a project is allowed to tap into on-demand throughout the configuration.\\n\\n    @dev\\n    bits 248-255: The currency of the amount of overflow that a project is allowed to tap.\\n\\n    _projectId The ID of the project to get the packed overflow allowance data of.\\n    _configuration The configuration during which the packed overflow allowance data applies.\\n    _terminal The terminal managing the overflow.\\n  */\\n  mapping(uint256 => mapping(uint256 => mapping(IJBPaymentTerminal => uint256)))\\n    private _packedOverflowAllowanceDataOf;\\n\\n  //*********************************************************************//\\n  // --------------- public immutable stored properties ---------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  /**\\n    @notice\\n    The contract storing all funding cycle configurations.\\n  */\\n  IJBFundingCycleStore public immutable override fundingCycleStore;\\n\\n  /**\\n    @notice\\n    The contract that manages token minting and burning.\\n  */\\n  IJBTokenStore public immutable override tokenStore;\\n\\n  /**\\n    @notice\\n    The contract that stores splits for each project.\\n  */\\n  IJBSplitsStore public immutable override splitsStore;\\n\\n  /**\\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The amount of token that a project can distribute per funding cycle, and the currency it's in terms of.\\n\\n    @dev\\n    The number of decimals in the returned fixed point amount is the same as that of the specified terminal. \\n\\n    @param _projectId The ID of the project to get the distribution limit of.\\n    @param _configuration The configuration during which the distribution limit applies.\\n    @param _terminal The terminal from which distributions are being limited.\\n\\n    @return The distribution limit, as a fixed point number with the same number of decimals as the provided terminal.\\n    @return The currency of the distribution limit.\\n  */\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view override returns (uint256, uint256) {\\n    // Get a reference to the packed data.\\n    uint256 _data = _packedDistributionLimitDataOf[_projectId][_configuration][_terminal];\\n\\n    // The limit is in bits 0-247. The currency is in bits 248-255.\\n    return (uint256(uint248(_data)), _data >> 248);\\n  }\\n\\n  /**\\n    @notice\\n    The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of.\\n\\n    @dev\\n    The number of decimals in the returned fixed point amount is the same as that of the specified terminal. \\n\\n    @param _projectId The ID of the project to get the overflow allowance of.\\n    @param _configuration The configuration of the during which the allowance applies.\\n    @param _terminal The terminal managing the overflow.\\n\\n    @return The overflow allowance, as a fixed point number with the same number of decimals as the provided terminal.\\n    @return The currency of the overflow allowance.\\n  */\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view override returns (uint256, uint256) {\\n    // Get a reference to the packed data.\\n    uint256 _data = _packedOverflowAllowanceDataOf[_projectId][_configuration][_terminal];\\n\\n    // The allowance is in bits 0-247. The currency is in bits 248-255.\\n    return (uint256(uint248(_data)), _data >> 248);\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount of reserved tokens that a project has available to distribute.\\n\\n    @param _projectId The ID of the project to get a reserved token balance of.\\n    @param _reservedRate The reserved rate to use when making the calculation.\\n\\n    @return The current amount of reserved tokens.\\n  */\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return\\n      _reservedTokenAmountFrom(\\n        _processedTokenTrackerOf[_projectId],\\n        _reservedRate,\\n        tokenStore.totalSupplyOf(_projectId)\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Gets the current total amount of outstanding tokens for a project, given a reserved rate.\\n\\n    @param _projectId The ID of the project to get total outstanding tokens of.\\n    @param _reservedRate The reserved rate to use when making the calculation.\\n\\n    @return The current total amount of outstanding tokens for the project.\\n  */\\n  function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Get the total number of tokens in circulation.\\n    uint256 _totalSupply = tokenStore.totalSupplyOf(_projectId);\\n\\n    // Get the number of reserved tokens the project has.\\n    uint256 _reservedTokenAmount = _reservedTokenAmountFrom(\\n      _processedTokenTrackerOf[_projectId],\\n      _reservedRate,\\n      _totalSupply\\n    );\\n\\n    // Add the reserved tokens to the total supply.\\n    return _totalSupply + _reservedTokenAmount;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------------- constructor -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\\n    @param _tokenStore A contract that manages token minting and burning.\\n    @param _splitsStore A contract that stores splits for each project.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBFundingCycleStore _fundingCycleStore,\\n    IJBTokenStore _tokenStore,\\n    IJBSplitsStore _splitsStore\\n  ) JBOperatable(_operatorStore) {\\n    projects = _projects;\\n    directory = _directory;\\n    fundingCycleStore = _fundingCycleStore;\\n    tokenStore = _tokenStore;\\n    splitsStore = _splitsStore;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- external transactions ----------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits.\\n\\n    @dev\\n    Each operation within this transaction can be done in sequence separately.\\n\\n    @dev\\n    Anyone can deploy a project on an owner's behalf.\\n\\n    @param _owner The address to set as the owner of the project. The project ERC-721 will be owned by this address.\\n    @param _projectMetadata Metadata to associate with the project within a particular domain. This can be updated any time by the owner of the project.\\n    @param _data Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n    @param _metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n    @param _mustStartAtOrAfter The time before which the configured funding cycle cannot start.\\n    @param _groupedSplits An array of splits to set for any number of groups. \\n    @param _fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.\\n    @param _terminals Payment terminals to add for the project.\\n    @param _memo A memo to pass along to the emitted event.\\n\\n    @return projectId The ID of the project.\\n  */\\n  function launchProjectFor(\\n    address _owner,\\n    JBProjectMetadata calldata _projectMetadata,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] calldata _groupedSplits,\\n    JBFundAccessConstraints[] calldata _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals,\\n    string memory _memo\\n  ) external override returns (uint256 projectId) {\\n    // Mint the project into the wallet of the message sender.\\n    projectId = projects.createFor(_owner, _projectMetadata);\\n\\n    // Set this contract as the project's controller in the directory.\\n    directory.setControllerOf(projectId, this);\\n\\n    // Configure the first funding cycle.\\n    uint256 _configuration = _configure(\\n      projectId,\\n      _data,\\n      _metadata,\\n      _mustStartAtOrAfter,\\n      _groupedSplits,\\n      _fundAccessConstraints\\n    );\\n\\n    // Add the provided terminals to the list of terminals.\\n    if (_terminals.length > 0) directory.setTerminalsOf(projectId, _terminals);\\n\\n    emit LaunchProject(_configuration, projectId, _memo, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Creates a funding cycle for an already existing project ERC-721.\\n\\n    @dev\\n    Each operation within this transaction can be done in sequence separately.\\n\\n    @dev\\n    Only a project owner or operator can launch its funding cycles.\\n\\n    @param _projectId The ID of the project to launch funding cycles for.\\n    @param _data Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n    @param _metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n    @param _mustStartAtOrAfter The time before which the configured funding cycle cannot start.\\n    @param _groupedSplits An array of splits to set for any number of groups. \\n    @param _fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.\\n    @param _terminals Payment terminals to add for the project.\\n    @param _memo A memo to pass along to the emitted event.\\n\\n    @return configuration The configuration of the funding cycle that was successfully created.\\n  */\\n  function launchFundingCyclesFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] calldata _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals,\\n    string memory _memo\\n  )\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\\n    returns (uint256 configuration)\\n  {\\n    // If there is a previous configuration, reconfigureFundingCyclesOf should be called instead\\n    if (fundingCycleStore.latestConfigurationOf(_projectId) > 0)\\n      revert FUNDING_CYCLE_ALREADY_LAUNCHED();\\n\\n    // Set this contract as the project's controller in the directory.\\n    directory.setControllerOf(_projectId, this);\\n\\n    // Configure the first funding cycle.\\n    configuration = _configure(\\n      _projectId,\\n      _data,\\n      _metadata,\\n      _mustStartAtOrAfter,\\n      _groupedSplits,\\n      _fundAccessConstraints\\n    );\\n\\n    // Add the provided terminals to the list of terminals.\\n    if (_terminals.length > 0) directory.setTerminalsOf(_projectId, _terminals);\\n\\n    emit LaunchFundingCycles(configuration, _projectId, _memo, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Proposes a configuration of a subsequent funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot.\\n\\n    @dev\\n    Only a project's owner or a designated operator can configure its funding cycles.\\n\\n    @param _projectId The ID of the project whose funding cycles are being reconfigured.\\n    @param _data Data that defines the funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n    @param _metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n    @param _mustStartAtOrAfter The time before which the configured funding cycle cannot start.\\n    @param _groupedSplits An array of splits to set for any number of groups. \\n    @param _fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.\\n    @param _memo A memo to pass along to the emitted event.\\n\\n    @return configuration The configuration of the funding cycle that was successfully reconfigured.\\n  */\\n  function reconfigureFundingCyclesOf(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] calldata _groupedSplits,\\n    JBFundAccessConstraints[] calldata _fundAccessConstraints,\\n    string calldata _memo\\n  )\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\\n    returns (uint256 configuration)\\n  {\\n    // Configure the next funding cycle.\\n    configuration = _configure(\\n      _projectId,\\n      _data,\\n      _metadata,\\n      _mustStartAtOrAfter,\\n      _groupedSplits,\\n      _fundAccessConstraints\\n    );\\n\\n    emit ReconfigureFundingCycles(configuration, _projectId, _memo, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Issues an owner's ERC20 JBTokens that'll be used when claiming tokens.\\n\\n    @dev\\n    Deploys a project's ERC20 JBToken contract.\\n\\n    @dev\\n    Only a project's owner or operator can issue its token.\\n\\n    @param _projectId The ID of the project being issued tokens.\\n    @param _name The ERC20's name.\\n    @param _symbol The ERC20's symbol.\\n  */\\n  function issueTokenFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  )\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.ISSUE)\\n    returns (IJBToken token)\\n  {\\n    // Issue the token in the store.\\n    return tokenStore.issueFor(_projectId, _name, _symbol);\\n  }\\n\\n  /**\\n    @notice\\n    Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed.\\n\\n    @dev\\n    Only a project's owner or operator can change its token.\\n\\n    @param _projectId The ID of the project to which the changed token belongs.\\n    @param _token The new token.\\n    @param _newOwner An address to transfer the current token's ownership to. This is optional, but it cannot be done later.\\n  */\\n  function changeTokenOf(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  )\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.CHANGE_TOKEN)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    if (!_fundingCycle.changeTokenAllowed()) revert CHANGE_TOKEN_NOT_ALLOWED();\\n\\n    // Change the token in the store.\\n    tokenStore.changeFor(_projectId, _token, _newOwner);\\n  }\\n\\n  /**\\n    @notice\\n    Mint new token supply into an account, and optionally reserve a supply to be distributed according to the project's current funding cycle configuration.\\n\\n    @dev\\n    Only a project's owner, a designated operator, or one of its terminals can mint its tokens.\\n\\n    @param _projectId The ID of the project to which the tokens being minted belong.\\n    @param _tokenCount The amount of tokens to mint in total, counting however many should be reserved.\\n    @param _beneficiary The account that the tokens are being minted for.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _preferClaimedTokens A flag indicating whether a project's attached token contract should be minted if they have been issued.\\n    @param _useReservedRate Whether to use the current funding cycle's reserved rate in the mint calculation.\\n\\n    @return beneficiaryTokenCount The amount of tokens minted for the beneficiary.\\n  */\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    bool _useReservedRate\\n  )\\n    external\\n    override\\n    requirePermissionAllowingOverride(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.MINT,\\n      directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\\n    )\\n    returns (uint256 beneficiaryTokenCount)\\n  {\\n    // There should be tokens to mint.\\n    if (_tokenCount == 0) revert ZERO_TOKENS_TO_MINT();\\n\\n    // Define variables that will be needed outside scoped section below.\\n    uint256 _reservedRate;\\n\\n    // Scoped section prevents stack too deep. `_fundingCycle` only used within scope.\\n    {\\n      // Get a reference to the project's current funding cycle.\\n      JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n      // If the message sender is not a terminal, the current funding cycle must not be paused.\\n      if (\\n        _fundingCycle.mintPaused() &&\\n        !directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\\n      ) revert MINT_PAUSED_AND_NOT_TERMINAL_DELEGATE();\\n\\n      // Determine the reserved rate to use.\\n      _reservedRate = _useReservedRate ? _fundingCycle.reservedRate() : 0;\\n    }\\n\\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE)\\n      // Subtract the total weighted amount from the tracker so the full reserved token amount can be printed later.\\n      _processedTokenTrackerOf[_projectId] =\\n        _processedTokenTrackerOf[_projectId] -\\n        int256(_tokenCount);\\n    else {\\n      // The unreserved token count that will be minted for the beneficiary.\\n      beneficiaryTokenCount = PRBMath.mulDiv(\\n        _tokenCount,\\n        JBConstants.MAX_RESERVED_RATE - _reservedRate,\\n        JBConstants.MAX_RESERVED_RATE\\n      );\\n\\n      if (_reservedRate == 0)\\n        // If there's no reserved rate, increment the tracker with the newly minted tokens.\\n        _processedTokenTrackerOf[_projectId] =\\n          _processedTokenTrackerOf[_projectId] +\\n          int256(beneficiaryTokenCount);\\n\\n      // Mint the tokens.\\n      tokenStore.mintFor(_beneficiary, _projectId, beneficiaryTokenCount, _preferClaimedTokens);\\n    }\\n\\n    emit MintTokens(\\n      _beneficiary,\\n      _projectId,\\n      _tokenCount,\\n      beneficiaryTokenCount,\\n      _memo,\\n      _reservedRate,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Burns a token holder's supply.\\n\\n    @dev\\n    Only a token's holder, a designated operator, or a project's terminal can burn it.\\n\\n    @param _holder The account that is having its tokens burned.\\n    @param _projectId The ID of the project to which the tokens being burned belong.\\n    @param _tokenCount The number of tokens to burn.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _preferClaimedTokens A flag indicating whether a project's attached token contract should be burned first if they have been issued.\\n  */\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  )\\n    external\\n    override\\n    requirePermissionAllowingOverride(\\n      _holder,\\n      _projectId,\\n      JBOperations.BURN,\\n      directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\\n    )\\n  {\\n    // There should be tokens to burn\\n    if (_tokenCount == 0) revert NO_BURNABLE_TOKENS();\\n\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // If the message sender is not a terminal, the current funding cycle must not be paused.\\n    if (\\n      _fundingCycle.burnPaused() &&\\n      !directory.isTerminalOf(_projectId, IJBPaymentTerminal(msg.sender))\\n    ) revert BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE();\\n\\n    // Update the token tracker so that reserved tokens will still be correctly mintable.\\n    _processedTokenTrackerOf[_projectId] =\\n      _processedTokenTrackerOf[_projectId] -\\n      int256(_tokenCount);\\n\\n    // Burn the tokens.\\n    tokenStore.burnFrom(_holder, _projectId, _tokenCount, _preferClaimedTokens);\\n\\n    emit BurnTokens(_holder, _projectId, _tokenCount, _memo, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Distributes all outstanding reserved tokens for a project.\\n\\n    @param _projectId The ID of the project to which the reserved tokens belong.\\n    @param _memo A memo to pass along to the emitted event.\\n\\n    @return The amount of minted reserved tokens.\\n  */\\n  function distributeReservedTokensOf(uint256 _projectId, string calldata _memo)\\n    external\\n    override\\n    returns (uint256)\\n  {\\n    return _distributeReservedTokensOf(_projectId, _memo);\\n  }\\n\\n  /**\\n    @notice\\n    Allows other controllers to signal to this one that a migration is expected for the specified project.\\n\\n    @dev\\n    This controller should not yet be the project's controller.\\n\\n    @param _projectId The ID of the project that will be migrated to this controller.\\n    @param _from The controller being migrated from.\\n  */\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external override {\\n    // This controller must not be the project's current controller.\\n    if (directory.controllerOf(_projectId) == this) revert CANT_MIGRATE_TO_CURRENT_CONTROLLER();\\n\\n    // Set the tracker as the total supply.\\n    _processedTokenTrackerOf[_projectId] = int256(tokenStore.totalSupplyOf(_projectId));\\n\\n    emit PrepMigration(_projectId, _from, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Allows a project to migrate from this controller to another.\\n\\n    @dev\\n    Only a project's owner or a designated operator can migrate it.\\n\\n    @param _projectId The ID of the project that will be migrated from this controller.\\n    @param _to The controller to which the project is migrating.\\n  */\\n  function migrate(uint256 _projectId, IJBController _to)\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_CONTROLLER)\\n  {\\n    // This controller must be the project's current controller.\\n    if (directory.controllerOf(_projectId) != this) revert NOT_CURRENT_CONTROLLER();\\n\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Migration must be allowed\\n    if (!_fundingCycle.controllerMigrationAllowed()) revert MIGRATION_NOT_ALLOWED();\\n\\n    // All reserved tokens must be minted before migrating.\\n    if (uint256(_processedTokenTrackerOf[_projectId]) != tokenStore.totalSupplyOf(_projectId))\\n      _distributeReservedTokensOf(_projectId, '');\\n\\n    // Make sure the new controller is prepped for the migration.\\n    _to.prepForMigrationOf(_projectId, this);\\n\\n    // Set the new controller.\\n    directory.setControllerOf(_projectId, _to);\\n\\n    emit Migrate(_projectId, _to, msg.sender);\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Distributes all outstanding reserved tokens for a project.\\n\\n    @param _projectId The ID of the project to which the reserved tokens belong.\\n    @param _memo A memo to pass along to the emitted event.\\n\\n    @return tokenCount The amount of minted reserved tokens.\\n  */\\n  function _distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    private\\n    returns (uint256 tokenCount)\\n  {\\n    // Get the current funding cycle to read the reserved rate from.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Get a reference to new total supply of tokens before minting reserved tokens.\\n    uint256 _totalTokens = tokenStore.totalSupplyOf(_projectId);\\n\\n    // Get a reference to the number of tokens that need to be minted.\\n    tokenCount = _reservedTokenAmountFrom(\\n      _processedTokenTrackerOf[_projectId],\\n      _fundingCycle.reservedRate(),\\n      _totalTokens\\n    );\\n\\n    // Set the tracker to be the new total supply.\\n    _processedTokenTrackerOf[_projectId] = int256(_totalTokens + tokenCount);\\n\\n    // Get a reference to the project owner.\\n    address _owner = projects.ownerOf(_projectId);\\n\\n    // Distribute tokens to splits and get a reference to the leftover amount to mint after all splits have gotten their share.\\n    uint256 _leftoverTokenCount = tokenCount == 0\\n      ? 0\\n      : _distributeToReservedTokenSplitsOf(_projectId, _fundingCycle, tokenCount);\\n\\n    // Mint any leftover tokens to the project owner.\\n    if (_leftoverTokenCount > 0) tokenStore.mintFor(_owner, _projectId, _leftoverTokenCount, false);\\n\\n    emit DistributeReservedTokens(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _owner,\\n      tokenCount,\\n      _leftoverTokenCount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Distribute tokens to the splits according to the specified funding cycle configuration.\\n\\n    @param _projectId The ID of the project for which reserved token splits are being distributed.\\n    @param _fundingCycle The funding cycle to base the token distribution on.\\n    @param _amount The total amount of tokens to mint.\\n\\n    @return leftoverAmount If the splits percents dont add up to 100%, the leftover amount is returned.\\n  */\\n  function _distributeToReservedTokenSplitsOf(\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _amount\\n  ) private returns (uint256 leftoverAmount) {\\n    // Set the leftover amount to the initial amount.\\n    leftoverAmount = _amount;\\n\\n    // Get a reference to the project's reserved token splits.\\n    JBSplit[] memory _splits = splitsStore.splitsOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      JBSplitsGroups.RESERVED_TOKENS\\n    );\\n\\n    //Transfer between all splits.\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // Get a reference to the split being iterated on.\\n      JBSplit memory _split = _splits[_i];\\n\\n      // The amount to send towards the split.\\n      uint256 _tokenCount = PRBMath.mulDiv(\\n        _amount,\\n        _split.percent,\\n        JBConstants.SPLITS_TOTAL_PERCENT\\n      );\\n\\n      // Mints tokens for the split if needed.\\n      if (_tokenCount > 0) {\\n        tokenStore.mintFor(\\n          // If an allocator is set in the splits, set it as the beneficiary.\\n          // Otherwise if a projectId is set in the split, set the project's owner as the beneficiary.\\n          // If the split has a beneficiary send to the split's beneficiary. Otherwise send to the msg.sender.\\n          _split.allocator != IJBSplitAllocator(address(0))\\n            ? address(_split.allocator)\\n            : _split.projectId != 0\\n            ? projects.ownerOf(_split.projectId)\\n            : _split.beneficiary != address(0)\\n            ? _split.beneficiary\\n            : msg.sender,\\n          _projectId,\\n          _tokenCount,\\n          _split.preferClaimed\\n        );\\n\\n        // If there's an allocator set, trigger its `allocate` function.\\n        if (_split.allocator != IJBSplitAllocator(address(0)))\\n          _split.allocator.allocate(\\n            JBSplitAllocationData(\\n              _tokenCount,\\n              18,\\n              _projectId,\\n              JBSplitsGroups.RESERVED_TOKENS,\\n              _split\\n            )\\n          );\\n\\n        // Subtract from the amount to be sent to the beneficiary.\\n        leftoverAmount = leftoverAmount - _tokenCount;\\n      }\\n\\n      emit DistributeToReservedTokenSplit(\\n        _fundingCycle.configuration,\\n        _fundingCycle.number,\\n        _projectId,\\n        _split,\\n        _tokenCount,\\n        msg.sender\\n      );\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Configures a funding cycle and stores information pertinent to the configuration.\\n\\n    @param _projectId The ID of the project whose funding cycles are being reconfigured.\\n    @param _data Data that defines the funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n    @param _metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n    @param _mustStartAtOrAfter The time before which the configured funding cycle cannot start.\\n    @param _groupedSplits An array of splits to set for any number of groups. \\n    @param _fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.\\n\\n    @return configuration The configuration of the funding cycle that was successfully reconfigured.\\n  */\\n  function _configure(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints\\n  ) private returns (uint256) {\\n    // Make sure the provided reserved rate is valid.\\n    if (_metadata.reservedRate > JBConstants.MAX_RESERVED_RATE) revert INVALID_RESERVED_RATE();\\n\\n    // Make sure the provided redemption rate is valid.\\n    if (_metadata.redemptionRate > JBConstants.MAX_REDEMPTION_RATE)\\n      revert INVALID_REDEMPTION_RATE();\\n\\n    // Make sure the provided ballot redemption rate is valid.\\n    if (_metadata.ballotRedemptionRate > JBConstants.MAX_REDEMPTION_RATE)\\n      revert INVALID_BALLOT_REDEMPTION_RATE();\\n\\n    // Configure the funding cycle's properties.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.configureFor(\\n      _projectId,\\n      _data,\\n      JBFundingCycleMetadataResolver.packFundingCycleMetadata(_metadata),\\n      _mustStartAtOrAfter\\n    );\\n\\n    for (uint256 _i; _i < _groupedSplits.length; _i++)\\n      // Set splits for the current group being iterated on if there are any.\\n      if (_groupedSplits[_i].splits.length > 0)\\n        splitsStore.set(\\n          _projectId,\\n          _fundingCycle.configuration,\\n          _groupedSplits[_i].group,\\n          _groupedSplits[_i].splits\\n        );\\n\\n    // Set distribution limits if there are any.\\n    for (uint256 _i; _i < _fundAccessConstraints.length; _i++) {\\n      JBFundAccessConstraints memory _constraints = _fundAccessConstraints[_i];\\n\\n      // If distribution limit value is larger than 248 bits, revert.\\n      if (_constraints.distributionLimit > type(uint248).max) revert INVALID_DISTRIBUTION_LIMIT();\\n\\n      // If distribution limit currency value is larger than 8 bits, revert.\\n      if (_constraints.distributionLimitCurrency > type(uint8).max)\\n        revert INVALID_DISTRIBUTION_LIMIT_CURRENCY();\\n\\n      // If overflow allowance value is larger than 248 bits, revert.\\n      if (_constraints.overflowAllowance > type(uint248).max) revert INVALID_OVERFLOW_ALLOWANCE();\\n\\n      // If overflow allowance currency value is larger than 8 bits, revert.\\n      if (_constraints.overflowAllowanceCurrency > type(uint8).max)\\n        revert INVALID_OVERFLOW_ALLOWANCE_CURRENCY();\\n\\n      // Set the distribution limit if there is one.\\n      if (_constraints.distributionLimit > 0)\\n        _packedDistributionLimitDataOf[_projectId][_fundingCycle.configuration][\\n          _constraints.terminal\\n        ] = _constraints.distributionLimit | (_constraints.distributionLimitCurrency << 248);\\n\\n      // Set the overflow allowance if there is one.\\n      if (_constraints.overflowAllowance > 0)\\n        _packedOverflowAllowanceDataOf[_projectId][_fundingCycle.configuration][\\n          _constraints.terminal\\n        ] = _constraints.overflowAllowance | (_constraints.overflowAllowanceCurrency << 248);\\n\\n      emit SetFundAccessConstraints(\\n        _fundingCycle.configuration,\\n        _fundingCycle.number,\\n        _projectId,\\n        _constraints,\\n        msg.sender\\n      );\\n    }\\n\\n    return _fundingCycle.configuration;\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount of reserved tokens currently tracked for a project given a reserved rate.\\n\\n    @param _processedTokenTracker The tracker to make the calculation with.\\n    @param _reservedRate The reserved rate to use to make the calculation.\\n    @param _totalEligibleTokens The total amount to make the calculation with.\\n\\n    @return amount reserved token amount.\\n  */\\n  function _reservedTokenAmountFrom(\\n    int256 _processedTokenTracker,\\n    uint256 _reservedRate,\\n    uint256 _totalEligibleTokens\\n  ) private pure returns (uint256) {\\n    // Get a reference to the amount of tokens that are unprocessed.\\n    uint256 _unprocessedTokenBalanceOf = _processedTokenTracker >= 0\\n      ? _totalEligibleTokens - uint256(_processedTokenTracker)\\n      : _totalEligibleTokens + uint256(-_processedTokenTracker);\\n\\n    // If there are no unprocessed tokens, return.\\n    if (_unprocessedTokenBalanceOf == 0) return 0;\\n\\n    // If all tokens are reserved, return the full unprocessed amount.\\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE) return _unprocessedTokenBalanceOf;\\n\\n    return\\n      PRBMath.mulDiv(\\n        _unprocessedTokenBalanceOf,\\n        JBConstants.MAX_RESERVED_RATE,\\n        JBConstants.MAX_RESERVED_RATE - _reservedRate\\n      ) - _unprocessedTokenBalanceOf;\\n  }\\n}\\n\",\"keccak256\":\"0x7db93f9f6f6ce8d97ab3807fcfb1f771666b9501f7559b744100439c8fdd2836\",\"license\":\"MIT\"},\"contracts/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n// --------------------------- custom errors -------------------------- //\\n//*********************************************************************//\\nerror UNAUTHORIZED();\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0xa06d3963c762603ccf2e01c6b87a46f000389e3285a995216bdccf1adc5c640a\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed\\n}\\n\",\"keccak256\":\"0xda8544e199de385d447fc485037d66ba906a88985328a5e1e0ddcb178b44f382\",\"license\":\"MIT\"},\"contracts/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBFundingCycleData.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\nimport './../structs/JBProjectMetadata.sol';\\nimport './../structs/JBGroupedSplits.sol';\\nimport './../structs/JBFundAccessConstraints.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBToken.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBTokenStore.sol';\\nimport './IJBSplitsStore.sol';\\n\\ninterface IJBController {\\n  event LaunchProject(uint256 configuration, uint256 projectId, string memo, address caller);\\n\\n  event LaunchFundingCycles(uint256 configuration, uint256 projectId, string memo, address caller);\\n\\n  event ReconfigureFundingCycles(\\n    uint256 configuration,\\n    uint256 projectId,\\n    string memo,\\n    address caller\\n  );\\n\\n  event SetFundAccessConstraints(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBFundAccessConstraints constraints,\\n    address caller\\n  );\\n\\n  event DistributeReservedTokens(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 tokenCount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event DistributeToReservedTokenSplit(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBSplit split,\\n    uint256 tokenCount,\\n    address caller\\n  );\\n\\n  event MintTokens(\\n    address indexed beneficiary,\\n    uint256 indexed projectId,\\n    uint256 tokenCount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    uint256 reservedRate,\\n    address caller\\n  );\\n\\n  event BurnTokens(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 tokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event Migrate(uint256 indexed projectId, IJBController to, address caller);\\n\\n  event PrepMigration(uint256 indexed projectId, IJBController from, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function tokenStore() external view returns (IJBTokenStore);\\n\\n  function splitsStore() external view returns (IJBSplitsStore);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256 distributionLimit, uint256 distributionLimitCurrency);\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256 overflowAllowance, uint256 overflowAllowanceCurrency);\\n\\n  function totalOutstandingTokensOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function launchProjectFor(\\n    address _owner,\\n    JBProjectMetadata calldata _projectMetadata,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals,\\n    string calldata _memo\\n  ) external returns (uint256 projectId);\\n\\n  function launchFundingCyclesFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    IJBPaymentTerminal[] memory _terminals,\\n    string calldata _memo\\n  ) external returns (uint256 configuration);\\n\\n  function reconfigureFundingCyclesOf(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    JBFundingCycleMetadata calldata _metadata,\\n    uint256 _mustStartAtOrAfter,\\n    JBGroupedSplits[] memory _groupedSplits,\\n    JBFundAccessConstraints[] memory _fundAccessConstraints,\\n    string calldata _memo\\n  ) external returns (uint256);\\n\\n  function issueTokenFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeTokenOf(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    bool _useReservedRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function distributeReservedTokensOf(uint256 _projectId, string memory _memo)\\n    external\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function migrate(uint256 _projectId, IJBController _to) external;\\n}\\n\",\"keccak256\":\"0x4dd0f10121b36baad1e0d7f3de39b06d9a45cd583a104f69b06130ab4fcd63a3\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event SetTerminals(uint256 indexed projectId, IJBPaymentTerminal[] terminals, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function isAllowedToSetFirstController(address _address) external view returns (bool);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\\n    external\\n    view\\n    returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function setIsAllowedToSetFirstController(address _address, bool _flag) external;\\n}\\n\",\"keccak256\":\"0xf34e291ddedeb7320e70e8318c2927cb42c179e2e706c65b6e60caf93a2a4845\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0xb551f980855057e8221b30aa49ec75f312334fef3b2c0c5c38eb883236e51651\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _data)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _data)\\n    external\\n    view\\n    returns (\\n      uint256 reclaimAmount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate\\n    );\\n}\\n\",\"keccak256\":\"0xd3ce9c75c0e5da0de3bdf6fb57a75e39e4782d2042128deed0c15949c6c4e38f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xf8212a9e70b63c818f53aec3ed8728a2679d7b984d93b67a7d7e2890b6da8260\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _data) external;\\n}\\n\",\"keccak256\":\"0x09990dcf429fd0a9b740cfffdb580e6c3186e1492313d97f8c1cce03638f6f91\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBPaymentTerminal {\\n  function token() external view returns (address);\\n\\n  function currency() external view returns (uint256);\\n\\n  function decimals() external view returns (uint256);\\n\\n  // Return value must be a fixed point number with 18 decimals.\\n  function currentEthOverflowOf(uint256 _projectId) external view returns (uint256);\\n\\n  function pay(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external payable;\\n\\n  function addToBalanceOf(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    string calldata _memo\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xc6c2f826e1b14dfdff3046cbeb02eb7733cf7d9aa100093dd51a3e24d54ae273\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBPriceFeed {\\n  function currentPrice(uint256 _targetDecimals) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xac22ef5e35cdd64b1467416fd142801856ce867ecde41582f3aa437c955c9be2\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPriceFeed.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, IJBPriceFeed feed);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external view returns (IJBPriceFeed);\\n\\n  function priceFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    uint256 _decimals\\n  ) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    IJBPriceFeed _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0d9c3fce264953aaeca00db1f8d8a3cf99876fa63366f5a2148f7966967b39b7\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 projectId);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x4482009111379531b33b6d924760987a6a68c83eeb71092d74fccd65960ca5ce\",\"license\":\"MIT\"},\"contracts/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _data) external;\\n}\\n\",\"keccak256\":\"0x8f98d6412d36ad4048a878aea19e6c11ed40ce63b765b0aa32d71623d2b5068f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '../structs/JBSplitAllocationData.sol';\\n\\ninterface IJBSplitAllocator {\\n  function allocate(JBSplitAllocationData calldata _data) external payable;\\n}\\n\",\"keccak256\":\"0x0f5d9e98fa8069881d6173b956980481a76d6cddecf76e6adcb4dbb4cc80541e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _account, uint256 _projectId) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function approve(\\n    uint256,\\n    address _spender,\\n    uint256 _amount\\n  ) external;\\n\\n  function transfer(\\n    uint256 _projectId,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    uint256 _projectId,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x23ce305c82865663f8dbd3315dfc85d04a963f05a50bfcfa1c7c1ce29397422d\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 initialUnclaimedBalance,\\n    uint256 initialClaimedBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 initialUnclaimedBalance,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed newToken,\\n    IJBToken indexed oldToken,\\n    address owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external returns (IJBToken oldToken);\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    address _recipient,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x53264aaec59002551df79886591b1b7a53e8d01c64e31eea677945e828ee0259\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475\",\"license\":\"MIT\"},\"contracts/libraries/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n  @notice\\n  Global constants used across multiple Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  /** \\n    @notice\\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\\n  */\\n  uint256 public constant MAX_RESERVED_RATE = 10000;\\n\\n  /**\\n    @notice\\n    Maximum token redemption rate.  \\n    */\\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\\n\\n  /** \\n    @notice\\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\\n  */\\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum splits percentage.\\n  */\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum fee rate as a percentage out of 1000000000\\n  */\\n  uint256 public constant MAX_FEE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum discount on fee granted by a gauge.\\n  */\\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\\n}\\n\",\"keccak256\":\"0xc673508855053695e9d1310cb259b2de0910058d3eeab98137a4550ca75f7383\",\"license\":\"MIT\"},\"contracts/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBConstants.sol';\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 40));\\n  }\\n\\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 56) & 1) == 1;\\n  }\\n\\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 57) & 1) == 1;\\n  }\\n\\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 58) & 1) == 1;\\n  }\\n\\n  function mintPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 59) & 1) == 1;\\n  }\\n\\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 60) & 1) == 1;\\n  }\\n\\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 61) & 1) == 1;\\n  }\\n\\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 62) & 1) == 1;\\n  }\\n\\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 63) & 1) == 1;\\n  }\\n\\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 64) & 1) == 1;\\n  }\\n\\n  function useTotalOverflowForRedemptions(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 65) & 1) == 1;\\n  }\\n\\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 66) & 1 == 1;\\n  }\\n\\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (_fundingCycle.metadata >> 67) & 1 == 1;\\n  }\\n\\n  function dataSource(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (IJBFundingCycleDataSource)\\n  {\\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 68)));\\n  }\\n\\n  /**\\n    @notice\\n    Pack the funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\\n  */\\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // version 1 in the bits 0-7 (8 bits).\\n    packed = 1;\\n    // reserved rate in bits 8-23 (16 bits).\\n    packed |= _metadata.reservedRate << 8;\\n    // redemption rate in bits 24-39 (16 bits).\\n    // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) << 24;\\n    // ballot redemption rate rate in bits 40-55 (16 bits).\\n    // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.ballotRedemptionRate) << 40;\\n    // pause pay in bit 56.\\n    if (_metadata.pausePay) packed |= 1 << 56;\\n    // pause tap in bit 57.\\n    if (_metadata.pauseDistributions) packed |= 1 << 57;\\n    // pause redeem in bit 58.\\n    if (_metadata.pauseRedeem) packed |= 1 << 58;\\n    // pause mint in bit 59.\\n    if (_metadata.pauseMint) packed |= 1 << 59;\\n    // pause mint in bit 60.\\n    if (_metadata.pauseBurn) packed |= 1 << 60;\\n    // pause change token in bit 61.\\n    if (_metadata.allowChangeToken) packed |= 1 << 61;\\n    // allow terminal migration in bit 62.\\n    if (_metadata.allowTerminalMigration) packed |= 1 << 62;\\n    // allow controller migration in bit 63.\\n    if (_metadata.allowControllerMigration) packed |= 1 << 63;\\n    // hold fees in bit 64.\\n    if (_metadata.holdFees) packed |= 1 << 64;\\n    // useTotalOverflowForRedemptions in bit 65.\\n    if (_metadata.useTotalOverflowForRedemptions) packed |= 1 << 65;\\n    // use pay data source in bit 66.\\n    if (_metadata.useDataSourceForPay) packed |= 1 << 66;\\n    // use redeem data source in bit 67.\\n    if (_metadata.useDataSourceForRedeem) packed |= 1 << 67;\\n    // data source address in bits 68-227.\\n    packed |= uint256(uint160(address(_metadata.dataSource))) << 68;\\n  }\\n}\\n\",\"keccak256\":\"0x9ba2342257a9cc99680dbf9b3636bcb5373d890e15471c8cb0cee8c94a4bdf5e\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_METADATA = 6;\\n  uint256 public constant ISSUE = 7;\\n  uint256 public constant CHANGE_TOKEN = 8;\\n  uint256 public constant MINT = 9;\\n  uint256 public constant BURN = 10;\\n  uint256 public constant CLAIM = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant REQUIRE_CLAIM = 13;\\n  uint256 public constant SET_CONTROLLER = 14;\\n  uint256 public constant SET_TERMINALS = 15;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 16;\\n  uint256 public constant USE_ALLOWANCE = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x828971de3d07c31e294c188335e250ee0b28919dd86f0dd570f89b97cca13932\",\"license\":\"MIT\"},\"contracts/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The number of project tokens minted for the beneficiary.\\n  uint256 projectTokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xc9854f845a2aca0953e1c850d40fa8c930638e1e0ebfaea103c93c8500150bbb\",\"license\":\"MIT\"},\"contracts/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of project tokens being redeemed.\\n  uint256 projectTokenCount;\\n  // The reclaimed amount. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount reclaimedAmount;\\n  // The address to which the reclaimed amount will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xcf3cc8993b656900db99a916ee1a9a73547894ffd0295fa273c7a40ffa3b5c37\",\"license\":\"MIT\"},\"contracts/structs/JBFundAccessConstraints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBFundAccessConstraints {\\n  // The terminal within which the distribution limit and the overflow allowance applies.\\n  IJBPaymentTerminal terminal;\\n  // The amount of the distribution limit, as a fixed point number with the same number of decimals as the terminal within which the limit applies.\\n  uint256 distributionLimit;\\n  // The currency of the distribution limit.\\n  uint256 distributionLimitCurrency;\\n  // The amount of the allowance, as a fixed point number with the same number of decimals as the terminal within which the allowance applies.\\n  uint256 overflowAllowance;\\n  // The currency of the overflow allowance.\\n  uint256 overflowAllowanceCurrency;\\n}\\n\",\"keccak256\":\"0x05b5b0c7edcbd4202f4bd119c754284fa2a83840b69c0e87770970770f2cf7e8\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle that was active when this cycle was created.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on.\\n  // For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n  uint256 weight;\\n  // A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 90%, the next funding cycle will have a 10% smaller weight.\\n  // This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x1b8aabfc72ba75adcf6d26789732e3bd511976b28f6916f1ebde21a795dcfdf7\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on.\\n  // For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n  uint256 weight;\\n  // A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 90%, the next funding cycle will have a 10% smaller weight.\\n  // This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x453e70b56ec06dab62d72fe04e5e38539f6503c1d42fa0462cf51d6d94cffa66\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_RESERVED_RATE`.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the distribute functionality should be paused during the funding cycle.\\n  bool pauseDistributions;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the mint functionality should be paused during the funding cycle.\\n  bool pauseMint;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If changing tokens should be allowed during this funding cycle.\\n  bool allowChangeToken;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.\\n  bool useTotalOverflowForRedemptions;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0x81738e2c04ce0556165652e5c8059ec0a64207ffbc4715015d138b51be61ad04\",\"license\":\"MIT\"},\"contracts/structs/JBGroupedSplits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBSplit.sol';\\nimport '../libraries/JBSplitsGroups.sol';\\n\\nstruct JBGroupedSplits {\\n  // The group indentifier.\\n  uint256 group;\\n  // The splits to associate with the group.\\n  JBSplit[] splits;\\n}\\n\",\"keccak256\":\"0xdd5c829c9838a32789918ad54666d91c2489616da991a0adb040cdadb0d99dbf\",\"license\":\"MIT\"},\"contracts/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  // A domain of 0 is a wildcard domain, which gives an operator access to all domains.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x322991d4e93cf67e62b11039d3639c970abffae7707c3f773ac6c85bd326e333\",\"license\":\"MIT\"},\"contracts/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBPayParamsData {\\n  // The terminal that is facilitating the payment.\\n  IJBPaymentTerminal terminal;\\n  // The address from which the payment originated.\\n  address payer;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The ID of the project being paid.\\n  uint256 projectId;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The memo that was sent alongside the payment.\\n  string memo;\\n  // Arbitrary metadata provided by the payer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x54a73d77a14756f479d85f3fe484c88a87356790ee28f995dbdb9fe18979d810\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBProjectMetadata {\\n  // Metadata content.\\n  string content;\\n  // The domain within which the metadata applies.\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0xc3b76e617b453c6dc60cc8bd3683ff7726f1a967b28fb8e760b1d16f52c07d17\",\"license\":\"MIT\"},\"contracts/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBRedeemParamsData {\\n  // The terminal that is facilitating the redemption.\\n  IJBPaymentTerminal terminal;\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The ID of the project whos tokens are being redeemed.\\n  uint256 projectId;\\n  // The proposed number of tokens being redeemed, as a fixed point number with 18 decimals.\\n  uint256 tokenCount;\\n  // The number of decimals included in the reclaim amount fixed point number.\\n  uint256 decimals;\\n  // The currency that the reclaim amount is expected to be in terms of.\\n  uint256 currency;\\n  // The amount that should be reclaimed by the redeemer using the protocol's standard bonding curve redemption formula.\\n  uint256 reclaimAmount;\\n  // If overflow across all of a project's terminals is being used when making redemptions.\\n  bool useTotalOverflow;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Arbitrary metadata provided by the redeemer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x3ab462be415d7e8a0d56b30b86f98bf27d15ce4e13fff08ccf6decbc770b30d9\",\"license\":\"MIT\"},\"contracts/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and the project has a token contract attached.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered claimed into the beneficiary's wallet, or unclaimed to save gas.\\n  bool preferClaimed;\\n  // The percent of the whole group that this split occupies. This number is out of `JBConstants.SPLITS_TOTAL_PERCENT`.\\n  uint256 percent;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the protocol treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the claimed token preference respected.\\n  uint256 projectId;\\n  // The role the of the beneficary depends on whether or not projectId is specified, and whether or not an allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // Specifies if the split should be unchangeable until the specified time, with the exception of extending the locked period.\\n  uint256 lockedUntil;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with all properties of this split.\\n  IJBSplitAllocator allocator;\\n}\\n\",\"keccak256\":\"0x013a11e0e40e487b6414757dcbfbf3e808f2a418877672d116ad40cbb7c885d4\",\"license\":\"MIT\"},\"contracts/structs/JBSplitAllocationData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBSplit.sol';\\nimport './JBTokenAmount.sol';\\n\\nstruct JBSplitAllocationData {\\n  // The amount being sent to the split allocator, as a fixed point number.\\n  uint256 amount;\\n  // The number of decimals in the amount.\\n  uint256 decimals;\\n  // The project to which the split belongs.\\n  uint256 projectId;\\n  // The group to which the split belongs.\\n  uint256 group;\\n  // The split that caused the allocation.\\n  JBSplit split;\\n}\\n\",\"keccak256\":\"0xa8e97304f050e913bd0fac4f137e9a64cc9f49ba877b96f27c955578947894ba\",\"license\":\"MIT\"},\"contracts/structs/JBTokenAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBTokenAmount {\\n  // The token the payment was made in.\\n  address token;\\n  // The amount of tokens that was paid, as a fixed point number.\\n  uint256 value;\\n  // The number of decimals included in the value fixed point number.\\n  uint256 decimals;\\n  // The expected currency of the value.\\n  uint256 currency;\\n}\\n\",\"keccak256\":\"0x64550c4998ba63f2f602bc4f9aac4f81ede7fc475c42f5e7c9f44508b3fee769\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c80638ae9c07b116100cd578063b5f1e34d11610081578063d101307311610066578063d10130731461043b578063e867c59c1461044e578063f033b3b41461046157600080fd5b8063b5f1e34d14610401578063c41c2f241461041457600080fd5b80639f797583116100b25780639f797583146103b4578063ad007d63146103c7578063aeb4f02b146103ee57600080fd5b80638ae9c07b1461037a5780638b79543c1461038d57600080fd5b8063405b84fa116101245780635578dfd7116101095780635578dfd7146102b9578063557e71551461032c578063619306301461035357600080fd5b8063405b84fa1461021e5780635172a2bf1461023157600080fd5b8063229bb82411610155578063229bb824146101ac5780632bdfe004146101bf5780633e8c615b1461020b57600080fd5b80630e48d182146101715780631665bc0f14610197575b600080fd5b61018461017f366004614c89565b610474565b6040519081526020015b60405180910390f35b6101aa6101a5366004614710565b6109df565b005b6101aa6101ba366004614aa9565b611011565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018e565b6101aa610219366004614a79565b6114bf565b6101aa61022c366004614a79565b6116f3565b6102a461023f366004614e29565b600092835260026020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff929092168452529020547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81169160f89190911c90565b6040805192835260208301919091520161018e565b6102a46102c7366004614e29565b600092835260016020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff929092168452529020547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81169160f89190911c90565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b610184610388366004614d99565b611e47565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6101846103c2366004614bb1565b6125b4565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6101846103fc3660046145e6565b61293f565b61018461040f366004614d77565b612c13565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6101e6610449366004614b37565b612d09565b61018461045c366004614aeb565b6130af565b61018461046f366004614d77565b6130fb565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018a90526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156104fd57600080fd5b505afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053591906145c9565b8a60013373ffffffffffffffffffffffffffffffffffffffff84161480159061062e57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156105f457600080fd5b505afa158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c9190614888565b155b801561070a57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156106d057600080fd5b505afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190614888565b155b15610741576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f2cee6deb000000000000000000000000000000000000000000000000000000008152600481018e905260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632cee6deb9060240160206040518083038186803b1580156107ca57600080fd5b505afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190614a60565b111561083a576040517fffd0bc1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f714e7f32000000000000000000000000000000000000000000000000000000008152600481018e905230602482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063714e7f3290604401600060405180830381600087803b1580156108c857600080fd5b505af11580156108dc573d6000803e3d6000fd5b505050506108fa8d8d8d8d8d8d906108f49190615579565b8c6131d4565b865190945015610992577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663821b9fd88e886040518363ffffffff1660e01b815260040161095f929190615093565b600060405180830381600087803b15801561097957600080fd5b505af115801561098d573d6000803e3d6000fd5b505050505b7f8621c3692c18d8ddd4cd26457d6a3e1d916e7001c4243a6c8dfa862a7e10a823848e87336040516109c7949392919061525c565b60405180910390a15050509998505050505050505050565b6040517f6e49181f0000000000000000000000000000000000000000000000000000000081526004810186905233602482015286908690600a9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636e49181f9060440160206040518083038186803b158015610a7257600080fd5b505afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa9190614888565b80158015610ace57503373ffffffffffffffffffffffffffffffffffffffff851614155b8015610baa57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610b7057600080fd5b505afa158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba89190614888565b155b8015610c8657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c849190614888565b155b15610cbd576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610cf4576040517f7b38547b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018a90526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610d7e57600080fd5b505afa158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db691906149e0565b610100810151909150603c1c6001908116148015610e9557506040517f6e49181f000000000000000000000000000000000000000000000000000000008152600481018b90523360248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636e49181f9060440160206040518083038186803b158015610e5b57600080fd5b505afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190614888565b155b15610ecc576040517f78a4871800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a815260208190526040902054610ee6908a906154ee565b60008b8152602081905260409081902091909155517f906ebd0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152602482018c9052604482018b905287151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063906ebd0f90608401600060405180830381600087803b158015610f9757600080fd5b505af1158015610fab573d6000803e3d6000fd5b50505050898b73ffffffffffffffffffffffffffffffffffffffff167fdf04e13ee4fcd48a81ab2fd114757093740a3efa9b6475d86e05878b4c59d0798b8b8b33604051610ffc94939291906150ea565b60405180910390a35050505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561109757600080fd5b505afa1580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf91906145c9565b8360083373ffffffffffffffffffffffffffffffffffffffff8416148015906111c857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561118e57600080fd5b505afa1580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190614888565b155b80156112a457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a29190614888565b155b156112db576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561136557600080fd5b505afa158015611379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139d91906149e0565b610100810151909150603d1c6001908116146113e5576040517f2ebc601300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f57e4c7780000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff878116602483015286811660448301527f000000000000000000000000000000000000000000000000000000000000000016906357e4c77890606401602060405180830381600087803b15801561147d57600080fd5b505af1158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b591906145c9565b5050505050505050565b6040517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101839052309073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f91906145c9565b73ffffffffffffffffffffffffffffffffffffffff1614156115cd576040517ffc2ce25a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b15801561165357600080fd5b505afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b9190614a60565b6000838152602081815260409182902092909255805173ffffffffffffffffffffffffffffffffffffffff84168152339281019290925283917ff389f4f5d01fe4903d6a7a63b8790b7bf80d374b6afed808c03795c3b323d4d3910160405180910390a25050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561177957600080fd5b505afa15801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b191906145c9565b8260033373ffffffffffffffffffffffffffffffffffffffff8416148015906118aa57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a89190614888565b155b801561198657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119849190614888565b155b156119bd576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101869052309073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b158015611a4557600080fd5b505afa158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7d91906145c9565b73ffffffffffffffffffffffffffffffffffffffff1614611aca576040517fe0a0a87d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611b5457600080fd5b505afa158015611b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8c91906149e0565b610100810151909150603f1c600190811614611bd4576040517f46ace3f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b158015611c5a57600080fd5b505afa158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c929190614a60565b60008781526020819052604090205414611cc157611cbf8660405180602001604052806000815250613730565b505b6040517f3e8c615b0000000000000000000000000000000000000000000000000000000081526004810187905230602482015273ffffffffffffffffffffffffffffffffffffffff861690633e8c615b90604401600060405180830381600087803b158015611d2f57600080fd5b505af1158015611d43573d6000803e3d6000fd5b50506040517f714e7f320000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff88811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063714e7f329150604401600060405180830381600087803b158015611dd757600080fd5b505af1158015611deb573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff891681523360208201528993507f01f954abace731a88ab86e71186040cc2be49fe517ea06bc0d24f25b82b8345692500160405180910390a2505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018890526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015611ed057600080fd5b505afa158015611ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0891906145c9565b6040517f6e49181f000000000000000000000000000000000000000000000000000000008152600481018a9052336024820152899060099073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636e49181f9060440160206040518083038186803b158015611f9957600080fd5b505afa158015611fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd19190614888565b80158015611ff557503373ffffffffffffffffffffffffffffffffffffffff851614155b80156120d157506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561209757600080fd5b505afa1580156120ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cf9190614888565b155b80156121ad57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561217357600080fd5b505afa158015612187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ab9190614888565b155b156121e4576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8a61221b576040517f9fd13e5400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018d9052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b1580156122a757600080fd5b505afa1580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122df91906149e0565b610100810151909150603b1c60019081161480156123be57506040517f6e49181f000000000000000000000000000000000000000000000000000000008152600481018f905233602482015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636e49181f9060440160206040518083038186803b15801561238457600080fd5b505afa158015612398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bc9190614888565b155b156123f5576040517f8c5fb46100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8761240157600061240f565b61010081015160081c61ffff165b91505061271081141561244a5760008d815260208190526040902054612436908d906154ee565b60008e81526020819052604090205561254b565b6124628c61245a83612710615562565b612710613aed565b9550806124935760008d815260208190526040902054612483908790615462565b60008e8152602081905260409020555b6040517fceddd3e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152602482018f90526044820188905289151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063ceddd3e490608401600060405180830381600087803b15801561253257600080fd5b505af1158015612546573d6000803e3d6000fd5b505050505b8c8b73ffffffffffffffffffffffffffffffffffffffff167fe6fee9c572244c0c2238c3112ac12d411750a7ee00eeebd32521c3e5a666c14b8e898e8e873360405161259c9695949392919061520d565b60405180910390a35050505050979650505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018b90526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561263d57600080fd5b505afa158015612651573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267591906145c9565b8b60013373ffffffffffffffffffffffffffffffffffffffff84161480159061276e57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561273457600080fd5b505afa158015612748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276c9190614888565b155b801561284a57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561281057600080fd5b505afa158015612824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128489190614888565b155b15612881576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6128ed8e8e8e8e8e8e906128959190615579565b8d8d808060200260200160405190810160405280939291908181526020016000905b828210156128e3576128d460a083028601368190038101906148a5565b815260200190600101906128b7565b50505050506131d4565b93507f1a08ad37c93969a586fd0605d240c17113b20a9c9ac3847595d0ab425225f6af848f8888336040516129269594939291906151c5565b60405180910390a15050509a9950505050505050505050565b6040517f666d87a000000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063666d87a0906129b6908f908f90600401614f0b565b602060405180830381600087803b1580156129d057600080fd5b505af11580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190614a60565b6040517f714e7f32000000000000000000000000000000000000000000000000000000008152600481018290523060248201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063714e7f3290604401600060405180830381600087803b158015612a9957600080fd5b505af1158015612aad573d6000803e3d6000fd5b505050506000612b15828c8c8c8c8c90612ac79190615579565b8b8b808060200260200160405190810160405280939291908181526020016000905b828210156128e357612b0660a083028601368190038101906148a5565b81526020019060010190612ae9565b845190915015612bc6576040517f821b9fd800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063821b9fd890612b939085908890600401615093565b600060405180830381600087803b158015612bad57600080fd5b505af1158015612bc1573d6000803e3d6000fd5b505050505b7ff3e6948ba8b32d557363ea08470121c47c0127659aed09320812174d373afef281838533604051612bfb949392919061525c565b60405180910390a1509b9a5050505050505050505050565b6040517f75b0d9cd00000000000000000000000000000000000000000000000000000000815260048101839052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906375b0d9cd9060240160206040518083038186803b158015612c9e57600080fd5b505afa158015612cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd69190614a60565b60008581526020819052604081205491925090612cf4908584613bf6565b9050612d0081836154d6565b95945050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015612d9257600080fd5b505afa158015612da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dca91906145c9565b8660073373ffffffffffffffffffffffffffffffffffffffff841614801590612ec357506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015612e8957600080fd5b505afa158015612e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec19190614888565b155b8015612f9f57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015612f6557600080fd5b505afa158015612f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9d9190614888565b155b15612fd6576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa7f2a70b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a7f2a70b90613050908c908c908c908c908c9060040161512b565b602060405180830381600087803b15801561306a57600080fd5b505af115801561307e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a291906145c9565b9998505050505050505050565b60006130f18484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061373092505050565b90505b9392505050565b6000828152602081905260408082205490517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018590526130f4919084907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b15801561319757600080fd5b505afa1580156131ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cf9190614a60565b613bf6565b600061271085351115613213576040517f5623289500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271085602001351115613253576040517f9db9ee9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271085604001351115613293576040517fddbf1bc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a249d42589896132ea6132e5368c90038c018c6148c1565b613c67565b896040518563ffffffff1660e01b815260040161330a9493929190615164565b61012060405180830381600087803b15801561332557600080fd5b505af1158015613339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335d91906149e0565b905060005b845181101561347457600085828151811061337f5761337f6157bd565b602002602001015160200151511115613462577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639acff5ac8a84602001518885815181106133e6576133e66157bd565b602002602001015160000151898681518110613404576134046157bd565b6020026020010151602001516040518563ffffffff1660e01b815260040161342f94939291906152a2565b600060405180830381600087803b15801561344957600080fd5b505af115801561345d573d6000803e3d6000fd5b505050505b8061346c816156ed565b915050613362565b5060005b8351811015613720576000848281518110613495576134956157bd565b602002602001015190507effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016816020015111156134fe576040517fa9b8fbcf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604081015160ff101561353d576040517f9583faed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608101517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff101561359a576040517f5730278300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b608081015160ff10156135d9576040517fd9b93c2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020810151156136325760408181015160208084015160008e8152600183528481208884015182528352848120865173ffffffffffffffffffffffffffffffffffffffff16825290925292902060f89190911b90911790555b60608101511561368b576080810151606082015160008c81526002602090815260408083208883015184528252808320865173ffffffffffffffffffffffffffffffffffffffff168452909152902060f89290921b1790555b825160208085015160408051855173ffffffffffffffffffffffffffffffffffffffff1681528584015193810193909352808501519083015260608085015190830152608080850151908301523360a08301528c92917e506dbcdf2e70275bf246b8f39ca18ebea55b7253498928a3de5c5bae26bd849060c00160405180910390a45080613718816156ed565b915050613478565b5060200151979650505050505050565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101839052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b1580156137bc57600080fd5b505afa1580156137d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f491906149e0565b6040517f75b0d9cd0000000000000000000000000000000000000000000000000000000081526004810186905290915060009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906375b0d9cd9060240160206040518083038186803b15801561388057600080fd5b505afa158015613894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b89190614a60565b6000868152602081905260409020546101008401519192506138e19160081c61ffff1683613bf6565b92506138ed83826154d6565b6000868152602081905260408082209290925590517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561398557600080fd5b505afa158015613999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139bd91906145c9565b9050600084156139d7576139d2878587613ddc565b6139da565b60005b90508015613a99576040517fceddd3e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820189905260448201839052600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063ceddd3e490608401600060405180830381600087803b158015613a8057600080fd5b505af1158015613a94573d6000803e3d6000fd5b505050505b86846000015185602001517fb12d7a78048433f69fe6d30145bf08aad8e82985b96e4db6d5c6a7e94d57086e8589868c33604051613adb959493929190614fb6565b60405180910390a45050505092915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415613b4657838281613b3c57613b3c61578e565b04925050506130f4565b838110613b8d576040517f773cc18c000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260440160405180910390fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806000851215613c1a57613c0b85615726565b613c1590846154d6565b613c24565b613c248584615562565b905080613c355760009150506130f4565b612710841415613c465790506130f4565b80613c5d81612710613c588882615562565b613aed565b612d009190615562565b8051602082015160089190911b60011790601890613c8790612710615562565b901b8117905060288260400151612710613ca19190615562565b901b81179050816060015115613cbc57670100000000000000175b816080015115613cd157670200000000000000175b8160a0015115613ce657670400000000000000175b8160c0015115613cfb57670800000000000000175b8160e0015115613d1057671000000000000000175b81610100015115613d2657672000000000000000175b81610120015115613d3c57674000000000000000175b81610140015115613d5257678000000000000000175b81610160015115613d695768010000000000000000175b81610180015115613d805768020000000000000000175b816101a0015115613d975768040000000000000000175b816101c0015115613dae5768080000000000000000175b6101e0919091015160441b7c0ffffffffffffffffffffffffffffffffffffffff00000000000000000161790565b60208201516040517f69e11cc50000000000000000000000000000000000000000000000000000000081526004810185905260248101919091526002604482015281906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906369e11cc59060640160006040518083038186803b158015613e7b57600080fd5b505afa158015613e8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613ed5919081019061478c565b905060005b8151811015614293576000828281518110613ef757613ef76157bd565b602002602001015190506000613f16868360200151633b9aca00613aed565b905080156142385760a082015173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169163ceddd3e49116614068576040840151613f9f57606084015173ffffffffffffffffffffffffffffffffffffffff16613f95573361406e565b836060015161406e565b60408481015190517f6352211e00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561402b57600080fd5b505afa15801561403f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406391906145c9565b61406e565b8360a001515b845160405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482018c90526044820185905215156064820152608401600060405180830381600087803b1580156140eb57600080fd5b505af11580156140ff573d6000803e3d6000fd5b5050505060a082015173ffffffffffffffffffffffffffffffffffffffff161561422b5760a080830151604080518084018252848152601260208083019182528284018e81526002606080860191825260808087018c815288517fe7cd77f20000000000000000000000000000000000000000000000000000000081529751600489015295516024880152925160448701529051606486015292518051151560848601529182015160a48501529381015160c48401529081015173ffffffffffffffffffffffffffffffffffffffff90811660e484015292810151610104830152909301518116610124840152169063e7cd77f29061014401600060405180830381600087803b15801561421257600080fd5b505af1158015614226573d6000803e3d6000fd5b505050505b6142358186615562565b94505b87876000015188602001517f08b272f627530027641b54430e5e88cf4de5feb60e3df46d714a426e3cabb99f85853360405161427693929190615007565b60405180910390a45050808061428b906156ed565b915050613eda565b50509392505050565b80356142a78161581b565b919050565b600082601f8301126142bd57600080fd5b813560206142d26142cd8361543e565b6153ef565b80838252828201915082860187848660051b89010111156142f257600080fd5b60005b8581101561431a5781356143088161581b565b845292840192908401906001016142f5565b5090979650505050505050565b60008083601f84011261433957600080fd5b50813567ffffffffffffffff81111561435157600080fd5b60208301915083602060a08302850101111561436c57600080fd5b9250929050565b600082601f83011261438457600080fd5b813560206143946142cd8361543e565b8281528181019085830160a0808602880185018910156143b357600080fd5b60005b868110156143da576143c88a84614513565b855293850193918101916001016143b6565b509198975050505050505050565b60008083601f8401126143fa57600080fd5b50813567ffffffffffffffff81111561441257600080fd5b6020830191508360208260051b850101111561436c57600080fd5b80356142a781615840565b80516142a78161581b565b60008083601f84011261445557600080fd5b50813567ffffffffffffffff81111561446d57600080fd5b60208301915083602082850101111561436c57600080fd5b600082601f83011261449657600080fd5b813567ffffffffffffffff8111156144b0576144b06157ec565b6144e160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016153ef565b8181528460208386010111156144f657600080fd5b816020850160208301376000918101602001919091529392505050565b600060a0828403121561452557600080fd5b60405160a0810181811067ffffffffffffffff82111715614548576145486157ec565b60405290508082356145598161581b565b80825250602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60006080828403121561459e57600080fd5b50919050565b6000610200828403121561459e57600080fd5b60006040828403121561459e57600080fd5b6000602082840312156145db57600080fd5b81516130f48161581b565b60008060008060008060008060008060006103608c8e03121561460857600080fd5b6146118c61429c565b9a5067ffffffffffffffff8060208e0135111561462d57600080fd5b61463d8e60208f01358f016145b7565b9a5061464c8e60408f0161458c565b995061465b8e60c08f016145a4565b98506102c08d01359750806102e08e0135111561467757600080fd5b6146888e6102e08f01358f016143e8565b90975095506103008d013581101561469f57600080fd5b6146b08e6103008f01358f01614327565b90955093506103208d01358110156146c757600080fd5b6146d88e6103208f01358f016142ac565b9250806103408e013511156146ec57600080fd5b506146fe8d6103408e01358e01614485565b90509295989b509295989b9093969950565b60008060008060008060a0878903121561472957600080fd5b86356147348161581b565b95506020870135945060408701359350606087013567ffffffffffffffff81111561475e57600080fd5b61476a89828a01614443565b909450925050608087013561477e81615840565b809150509295509295509295565b6000602080838503121561479f57600080fd5b825167ffffffffffffffff8111156147b657600080fd5b8301601f810185136147c757600080fd5b80516147d56142cd8261543e565b8181528381019083850160c0808502860187018a10156147f457600080fd5b60009550855b858110156148795781838c031215614810578687fd5b61481861535b565b835161482381615840565b81528389015189820152604080850151908201526060808501516148468161581b565b908201526080848101519082015260a0808501516148638161581b565b90820152855293870193918101916001016147fa565b50919998505050505050505050565b60006020828403121561489a57600080fd5b81516130f481615840565b600060a082840312156148b757600080fd5b6130f48383614513565b600061020082840312156148d457600080fd5b6148dc615384565b8235815260208301356020820152604083013560408201526149006060840161442d565b60608201526149116080840161442d565b608082015261492260a0840161442d565b60a082015261493360c0840161442d565b60c082015261494460e0840161442d565b60e082015261010061495781850161442d565b9082015261012061496984820161442d565b9082015261014061497b84820161442d565b9082015261016061498d84820161442d565b9082015261018061499f84820161442d565b908201526101a06149b184820161442d565b908201526101c06149c384820161442d565b908201526101e06149d584820161429c565b908201529392505050565b600061012082840312156149f357600080fd5b6149fb6153a8565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152614a4760e08401614438565b60e0820152610100928301519281019290925250919050565b600060208284031215614a7257600080fd5b5051919050565b60008060408385031215614a8c57600080fd5b823591506020830135614a9e8161581b565b809150509250929050565b600080600060608486031215614abe57600080fd5b833592506020840135614ad08161581b565b91506040840135614ae08161581b565b809150509250925092565b600080600060408486031215614b0057600080fd5b83359250602084013567ffffffffffffffff811115614b1e57600080fd5b614b2a86828701614443565b9497909650939450505050565b600080600080600060608688031215614b4f57600080fd5b85359450602086013567ffffffffffffffff80821115614b6e57600080fd5b614b7a89838a01614443565b90965094506040880135915080821115614b9357600080fd5b50614ba088828901614443565b969995985093965092949392505050565b6000806000806000806000806000806103208b8d031215614bd157600080fd5b8a359950614be28c60208d0161458c565b9850614bf18c60a08d016145a4565b97506102a08b013596506102c08b013567ffffffffffffffff80821115614c1757600080fd5b614c238e838f016143e8565b90985096506102e08d0135915080821115614c3d57600080fd5b614c498e838f01614327565b90965094506103008d0135915080821115614c6357600080fd5b50614c708d828e01614443565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060006103408a8c031215614ca857600080fd5b89359850614cb98b60208c0161458c565b9750614cc88b60a08c016145a4565b96506102a08a013595506102c08a013567ffffffffffffffff80821115614cee57600080fd5b614cfa8d838e016143e8565b90975095506102e08c0135915080821115614d1457600080fd5b614d208d838e01614373565b94506103008c0135915080821115614d3757600080fd5b614d438d838e016142ac565b93506103208c0135915080821115614d5a57600080fd5b50614d678c828d01614485565b9150509295985092959850929598565b60008060408385031215614d8a57600080fd5b50508035926020909101359150565b600080600080600080600060c0888a031215614db457600080fd5b87359650602088013595506040880135614dcd8161581b565b9450606088013567ffffffffffffffff811115614de957600080fd5b614df58a828b01614443565b9095509350506080880135614e0981615840565b915060a0880135614e1981615840565b8091505092959891949750929550565b600080600060608486031215614e3e57600080fd5b83359250602084013591506040840135614ae08161581b565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6000815180845260005b81811015614ec657602081850181015186830182015201614eaa565b81811115614ed8576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614f5f57600080fd5b8301803567ffffffffffffffff811115614f7857600080fd5b803603851315614f8757600080fd5b604080850152614f9e608085018260208501614e57565b91505060208401356060840152809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835286602084015285604084015260a06060840152614ff260a0840186614ea0565b91508084166080840152509695505050505050565b610100810161506982868051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b8360c083015273ffffffffffffffffffffffffffffffffffffffff831660e0830152949350505050565b6000604082018483526020604081850152818551808452606086019150828701935060005b8181101561431a57845173ffffffffffffffffffffffffffffffffffffffff16835293830193918301916001016150b8565b848152606060208201526000615104606083018587614e57565b905073ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b858152606060208201526000615145606083018688614e57565b8281036040840152615158818587614e57565b98975050505050505050565b600060e08201905085825284356020830152602085013560408301526040850135606083015260608501356151988161581b565b73ffffffffffffffffffffffffffffffffffffffff16608083015260a082019390935260c0015292915050565b8581528460208201526080604082015260006151e5608083018587614e57565b905073ffffffffffffffffffffffffffffffffffffffff831660608301529695505050505050565b86815285602082015260a06040820152600061522d60a083018688614e57565b905083606083015273ffffffffffffffffffffffffffffffffffffffff83166080830152979650505050505050565b84815283602082015260806040820152600061527b6080830185614ea0565b905073ffffffffffffffffffffffffffffffffffffffff8316606083015295945050505050565b600060808201868352602086818501528560408501526080606085015281855180845260a086019150828701935060005b8181101561534c576153398386518051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b9383019360c092909201916001016152d3565b50909998505050505050505050565b60405160c0810167ffffffffffffffff8111828210171561537e5761537e6157ec565b60405290565b604051610200810167ffffffffffffffff8111828210171561537e5761537e6157ec565b604051610120810167ffffffffffffffff8111828210171561537e5761537e6157ec565b6040805190810167ffffffffffffffff8111828210171561537e5761537e6157ec565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715615436576154366157ec565b604052919050565b600067ffffffffffffffff821115615458576154586157ec565b5060051b60200190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561549c5761549c61575f565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156154d0576154d061575f565b50500190565b600082198211156154e9576154e961575f565b500190565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156155285761552861575f565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561555c5761555c61575f565b50500390565b6000828210156155745761557461575f565b500390565b60006155876142cd8461543e565b808482526020808301925084368760051b870111156155a557600080fd5b60005b878110156156e157813567ffffffffffffffff808211156155c857600080fd5b818901915060408083360312156155de57600080fd5b6155e66153cc565b8335815286840135838111156155fb57600080fd5b939093019236601f85011261560f57600080fd5b8335925061561f6142cd8461543e565b8381528781019085890160c03681880289018c01111561563e57600080fd5b600097505b868810156156c55780823603121561565a57600080fd5b61566261535b565b823561566d81615840565b8152828c01358c820152868301358782015260608084013561568e8161581b565b908201526080838101359082015260a0808401356156ab8161581b565b90820152845260019790970196928a019290810190615643565b50508289015250885250505093820193908201906001016155a8565b50919695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561571f5761571f61575f565b5060010190565b60007f80000000000000000000000000000000000000000000000000000000000000008214156157585761575861575f565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461583d57600080fd5b50565b801515811461583d57600080fdfea2646970667358221220c69c589950f2c4d3415f73621f902451aa90a831cdcf61336cef2f90ac7cf0f064736f6c63430008060033",
  "devdoc": {
    "details": "Adheres to: IJBController - general interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the protocol's rules.Inherits from: JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.",
    "kind": "dev",
    "methods": {
      "burnTokensOf(address,uint256,uint256,string,bool)": {
        "details": "Only a token's holder, a designated operator, or a project's terminal can burn it.",
        "params": {
          "_holder": "The account that is having its tokens burned.",
          "_memo": "A memo to pass along to the emitted event.",
          "_preferClaimedTokens": "A flag indicating whether a project's attached token contract should be burned first if they have been issued.",
          "_projectId": "The ID of the project to which the tokens being burned belong.",
          "_tokenCount": "The number of tokens to burn."
        }
      },
      "changeTokenOf(uint256,address,address)": {
        "details": "Only a project's owner or operator can change its token.",
        "params": {
          "_newOwner": "An address to transfer the current token's ownership to. This is optional, but it cannot be done later.",
          "_projectId": "The ID of the project to which the changed token belongs.",
          "_token": "The new token."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_fundingCycleStore": "A contract storing all funding cycle configurations.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers.",
          "_splitsStore": "A contract that stores splits for each project.",
          "_tokenStore": "A contract that manages token minting and burning."
        }
      },
      "distributeReservedTokensOf(uint256,string)": {
        "params": {
          "_memo": "A memo to pass along to the emitted event.",
          "_projectId": "The ID of the project to which the reserved tokens belong."
        },
        "returns": {
          "_0": "The amount of minted reserved tokens."
        }
      },
      "distributionLimitOf(uint256,uint256,address)": {
        "details": "The number of decimals in the returned fixed point amount is the same as that of the specified terminal. ",
        "params": {
          "_configuration": "The configuration during which the distribution limit applies.",
          "_projectId": "The ID of the project to get the distribution limit of.",
          "_terminal": "The terminal from which distributions are being limited."
        },
        "returns": {
          "_0": "The distribution limit, as a fixed point number with the same number of decimals as the provided terminal.",
          "_1": "The currency of the distribution limit."
        }
      },
      "issueTokenFor(uint256,string,string)": {
        "details": "Deploys a project's ERC20 JBToken contract.Only a project's owner or operator can issue its token.",
        "params": {
          "_name": "The ERC20's name.",
          "_projectId": "The ID of the project being issued tokens.",
          "_symbol": "The ERC20's symbol."
        }
      },
      "launchFundingCyclesFor(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[],string)": {
        "details": "Each operation within this transaction can be done in sequence separately.Only a project owner or operator can launch its funding cycles.",
        "params": {
          "_data": "Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.",
          "_fundAccessConstraints": "An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.",
          "_groupedSplits": "An array of splits to set for any number of groups. ",
          "_memo": "A memo to pass along to the emitted event.",
          "_metadata": "Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.",
          "_mustStartAtOrAfter": "The time before which the configured funding cycle cannot start.",
          "_projectId": "The ID of the project to launch funding cycles for.",
          "_terminals": "Payment terminals to add for the project."
        },
        "returns": {
          "configuration": "The configuration of the funding cycle that was successfully created."
        }
      },
      "launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[],string)": {
        "details": "Each operation within this transaction can be done in sequence separately.Anyone can deploy a project on an owner's behalf.",
        "params": {
          "_data": "Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.",
          "_fundAccessConstraints": "An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.",
          "_groupedSplits": "An array of splits to set for any number of groups. ",
          "_memo": "A memo to pass along to the emitted event.",
          "_metadata": "Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.",
          "_mustStartAtOrAfter": "The time before which the configured funding cycle cannot start.",
          "_owner": "The address to set as the owner of the project. The project ERC-721 will be owned by this address.",
          "_projectMetadata": "Metadata to associate with the project within a particular domain. This can be updated any time by the owner of the project.",
          "_terminals": "Payment terminals to add for the project."
        },
        "returns": {
          "projectId": "The ID of the project."
        }
      },
      "migrate(uint256,address)": {
        "details": "Only a project's owner or a designated operator can migrate it.",
        "params": {
          "_projectId": "The ID of the project that will be migrated from this controller.",
          "_to": "The controller to which the project is migrating."
        }
      },
      "mintTokensOf(uint256,uint256,address,string,bool,bool)": {
        "details": "Only a project's owner, a designated operator, or one of its terminals can mint its tokens.",
        "params": {
          "_beneficiary": "The account that the tokens are being minted for.",
          "_memo": "A memo to pass along to the emitted event.",
          "_preferClaimedTokens": "A flag indicating whether a project's attached token contract should be minted if they have been issued.",
          "_projectId": "The ID of the project to which the tokens being minted belong.",
          "_tokenCount": "The amount of tokens to mint in total, counting however many should be reserved.",
          "_useReservedRate": "Whether to use the current funding cycle's reserved rate in the mint calculation."
        },
        "returns": {
          "beneficiaryTokenCount": "The amount of tokens minted for the beneficiary."
        }
      },
      "overflowAllowanceOf(uint256,uint256,address)": {
        "details": "The number of decimals in the returned fixed point amount is the same as that of the specified terminal. ",
        "params": {
          "_configuration": "The configuration of the during which the allowance applies.",
          "_projectId": "The ID of the project to get the overflow allowance of.",
          "_terminal": "The terminal managing the overflow."
        },
        "returns": {
          "_0": "The overflow allowance, as a fixed point number with the same number of decimals as the provided terminal.",
          "_1": "The currency of the overflow allowance."
        }
      },
      "prepForMigrationOf(uint256,address)": {
        "details": "This controller should not yet be the project's controller.",
        "params": {
          "_from": "The controller being migrated from.",
          "_projectId": "The ID of the project that will be migrated to this controller."
        }
      },
      "reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],string)": {
        "details": "Only a project's owner or a designated operator can configure its funding cycles.",
        "params": {
          "_data": "Data that defines the funding cycle. These properties will remain fixed for the duration of the funding cycle.",
          "_fundAccessConstraints": "An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal.",
          "_groupedSplits": "An array of splits to set for any number of groups. ",
          "_memo": "A memo to pass along to the emitted event.",
          "_metadata": "Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.",
          "_mustStartAtOrAfter": "The time before which the configured funding cycle cannot start.",
          "_projectId": "The ID of the project whose funding cycles are being reconfigured."
        },
        "returns": {
          "configuration": "The configuration of the funding cycle that was successfully reconfigured."
        }
      },
      "reservedTokenBalanceOf(uint256,uint256)": {
        "params": {
          "_projectId": "The ID of the project to get a reserved token balance of.",
          "_reservedRate": "The reserved rate to use when making the calculation."
        },
        "returns": {
          "_0": "The current amount of reserved tokens."
        }
      },
      "totalOutstandingTokensOf(uint256,uint256)": {
        "params": {
          "_projectId": "The ID of the project to get total outstanding tokens of.",
          "_reservedRate": "The reserved rate to use when making the calculation."
        },
        "returns": {
          "_0": "The current total amount of outstanding tokens for the project."
        }
      }
    },
    "stateVariables": {
      "_packedDistributionLimitDataOf": {
        "details": "bits 0-247: The amount of token that a project can distribute per funding cycle.bits 248-255: The currency of amount that a project can distribute. _projectId The ID of the project to get the packed distribution limit data of. _configuration The configuration during which the packed distribution limit data applies. _terminal The terminal from which distributions are being limited."
      },
      "_packedOverflowAllowanceDataOf": {
        "details": "bits 0-247: The amount of overflow that a project is allowed to tap into on-demand throughout the configuration.bits 248-255: The currency of the amount of overflow that a project is allowed to tap. _projectId The ID of the project to get the packed overflow allowance data of. _configuration The configuration during which the packed overflow allowance data applies. _terminal The terminal managing the overflow."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "burnTokensOf(address,uint256,uint256,string,bool)": {
        "notice": "Burns a token holder's supply."
      },
      "changeTokenOf(uint256,address,address)": {
        "notice": "Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed."
      },
      "directory()": {
        "notice": "The directory of terminals and controllers for projects."
      },
      "distributeReservedTokensOf(uint256,string)": {
        "notice": "Distributes all outstanding reserved tokens for a project."
      },
      "distributionLimitOf(uint256,uint256,address)": {
        "notice": "The amount of token that a project can distribute per funding cycle, and the currency it's in terms of."
      },
      "fundingCycleStore()": {
        "notice": "The contract storing all funding cycle configurations."
      },
      "issueTokenFor(uint256,string,string)": {
        "notice": "Issues an owner's ERC20 JBTokens that'll be used when claiming tokens."
      },
      "launchFundingCyclesFor(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[],string)": {
        "notice": "Creates a funding cycle for an already existing project ERC-721."
      },
      "launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],address[],string)": {
        "notice": "Creates a project. This will mint an ERC-721 into the specified owner's account, configure a first funding cycle, and set up any splits."
      },
      "migrate(uint256,address)": {
        "notice": "Allows a project to migrate from this controller to another."
      },
      "mintTokensOf(uint256,uint256,address,string,bool,bool)": {
        "notice": "Mint new token supply into an account, and optionally reserve a supply to be distributed according to the project's current funding cycle configuration."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "overflowAllowanceOf(uint256,uint256,address)": {
        "notice": "The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of."
      },
      "prepForMigrationOf(uint256,address)": {
        "notice": "Allows other controllers to signal to this one that a migration is expected for the specified project."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership."
      },
      "reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,(uint256,(bool,uint256,uint256,address,uint256,address)[])[],(address,uint256,uint256,uint256,uint256)[],string)": {
        "notice": "Proposes a configuration of a subsequent funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot."
      },
      "reservedTokenBalanceOf(uint256,uint256)": {
        "notice": "Gets the amount of reserved tokens that a project has available to distribute."
      },
      "splitsStore()": {
        "notice": "The contract that stores splits for each project."
      },
      "tokenStore()": {
        "notice": "The contract that manages token minting and burning."
      },
      "totalOutstandingTokensOf(uint256,uint256)": {
        "notice": "Gets the current total amount of outstanding tokens for a project, given a reserved rate."
      }
    },
    "notice": "Stitches together funding cycles and community tokens, making sure all activity is accounted for and correct.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4601,
        "contract": "contracts/JBController.sol:JBController",
        "label": "_processedTokenTrackerOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 4611,
        "contract": "contracts/JBController.sol:JBController",
        "label": "_packedDistributionLimitDataOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)14844,t_uint256)))"
      },
      {
        "astId": 4621,
        "contract": "contracts/JBController.sol:JBController",
        "label": "_packedOverflowAllowanceDataOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)14844,t_uint256)))"
      }
    ],
    "types": {
      "t_contract(IJBPaymentTerminal)14844": {
        "encoding": "inplace",
        "label": "contract IJBPaymentTerminal",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_contract(IJBPaymentTerminal)14844,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IJBPaymentTerminal)14844",
        "label": "mapping(contract IJBPaymentTerminal => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)14844,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IJBPaymentTerminal => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IJBPaymentTerminal)14844,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)14844,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(contract IJBPaymentTerminal => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_contract(IJBPaymentTerminal)14844,t_uint256))"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
