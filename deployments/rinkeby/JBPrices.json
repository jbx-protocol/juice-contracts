{
  "address": "0x52532c9e4FaA9948ea71c5BEa31763Fc40F68C53",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PRICE_FEED_ALREADY_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRICE_FEED_NOT_FOUND",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currency",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IJBPriceFeed",
          "name": "feed",
          "type": "address"
        }
      ],
      "name": "AddFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_base",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPriceFeed",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "addFeedFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feedFor",
      "outputs": [
        {
          "internalType": "contract IJBPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "priceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef5038cf8b1dd5e35effd52109e235b79b3108a1990df1c6d6ae8814e147dc04",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x52532c9e4FaA9948ea71c5BEa31763Fc40F68C53",
    "transactionIndex": 0,
    "gasUsed": "558499",
    "logsBloom": "0x
    "blockHash": "0x6082632a723c61d59b9995b6fd1855b9ce989edde9a4053cb787dd25477d74d6",
    "transactionHash": "0xef5038cf8b1dd5e35effd52109e235b79b3108a1990df1c6d6ae8814e147dc04",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10389373,
        "transactionHash": "0xef5038cf8b1dd5e35effd52109e235b79b3108a1990df1c6d6ae8814e147dc04",
        "address": "0x52532c9e4FaA9948ea71c5BEa31763Fc40F68C53",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e9be6df23c7f9caba3005da2fa2d8714d340d0af"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6082632a723c61d59b9995b6fd1855b9ce989edde9a4053cb787dd25477d74d6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10389373,
        "transactionHash": "0xef5038cf8b1dd5e35effd52109e235b79b3108a1990df1c6d6ae8814e147dc04",
        "address": "0x52532c9e4FaA9948ea71c5BEa31763Fc40F68C53",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e9be6df23c7f9caba3005da2fa2d8714d340d0af",
          "0x000000000000000000000000e9be6df23c7f9caba3005da2fa2d8714d340d0af"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6082632a723c61d59b9995b6fd1855b9ce989edde9a4053cb787dd25477d74d6"
      }
    ],
    "blockNumber": 10389373,
    "cumulativeGasUsed": "558499",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF"
  ],
  "numDeployments": 3,
  "solcInputHash": "46c265b5697a314234d16e8dc083b5a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PRICE_FEED_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRICE_FEED_NOT_FOUND\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IJBPriceFeed\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"AddFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPriceFeed\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"addFeedFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedFor\",\"outputs\":[{\"internalType\":\"contract IJBPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"priceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Adheres to: IJBPrices: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.Inherits from: Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\",\"kind\":\"dev\",\"methods\":{\"addFeedFor(uint256,uint256,address)\":{\"details\":\"Current feeds can't be modified.\",\"params\":{\"_base\":\"The base currency unit being priced by the feed.\",\"_currency\":\"The currency units the feed's resulting price is in terms of.\",\"_feed\":\"The price feed being added.\"}},\"constructor\":{\"params\":{\"_owner\":\"The address that will own the contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"priceFor(uint256,uint256,uint256)\":{\"params\":{\"_base\":\"The base currency unit being priced.\",\"_currency\":\"The currency units the resulting price is in terms of.\",\"_decimals\":\"The number of decimals the returned fixed point price should include.\"},\"returns\":{\"_0\":\"The price of the currency in terms of the base, as a fixed point number with the specified number of decimals.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"feedFor\":{\"details\":\"The feed returns the number of `_currency` units that can be converted to 1 `_base` unit. _currency The currency units the feed's resulting price is in terms of. _base The base currency unit being priced by the feed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addFeedFor(uint256,uint256,address)\":{\"notice\":\" Add a price feed for a currency in terms of the provided base currency.\"},\"feedFor(uint256,uint256)\":{\"notice\":\" The available price feeds.\"},\"priceFor(uint256,uint256,uint256)\":{\"notice\":\"Gets the number of `_currency` units that can be converted to 1 `_base` unit.\"}},\"notice\":\"Manages and normalizes price feeds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBPrices.sol\":\"JBPrices\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/JBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './interfaces/IJBPrices.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror PRICE_FEED_ALREADY_EXISTS();\\nerror PRICE_FEED_NOT_FOUND();\\n\\n/** \\n  @notice Manages and normalizes price feeds.\\n\\n  @dev\\n  Adheres to:\\n  IJBPrices: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\\n\\n  @dev\\n  Inherits from:\\n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\\n*/\\ncontract JBPrices is IJBPrices, Ownable {\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The available price feeds.\\n\\n    @dev\\n    The feed returns the number of `_currency` units that can be converted to 1 `_base` unit.\\n\\n    _currency The currency units the feed's resulting price is in terms of.\\n    _base The base currency unit being priced by the feed.\\n  */\\n  mapping(uint256 => mapping(uint256 => IJBPriceFeed)) public override feedFor;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Gets the number of `_currency` units that can be converted to 1 `_base` unit.\\n\\n    @param _currency The currency units the resulting price is in terms of.\\n    @param _base The base currency unit being priced.\\n    @param _decimals The number of decimals the returned fixed point price should include.\\n    \\n    @return The price of the currency in terms of the base, as a fixed point number with the specified number of decimals.\\n  */\\n  function priceFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    uint256 _decimals\\n  ) external view override returns (uint256) {\\n    // If the currency is the base, return 1 since they are priced the same. Include the desired number of decimals.\\n    if (_currency == _base) return 10**_decimals;\\n\\n    // Get a reference to the feed.\\n    IJBPriceFeed _feed = feedFor[_currency][_base];\\n\\n    // Feed must exist.\\n    if (_feed == IJBPriceFeed(address(0))) revert PRICE_FEED_NOT_FOUND();\\n\\n    // Get the price.\\n    return _feed.currentPrice(_decimals);\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------------- constructor -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _owner The address that will own the contract.\\n  */\\n  constructor(address _owner) {\\n    // Transfer the ownership.\\n    transferOwnership(_owner);\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Add a price feed for a currency in terms of the provided base currency.\\n\\n    @dev\\n    Current feeds can't be modified.\\n\\n    @param _currency The currency units the feed's resulting price is in terms of.\\n    @param _base The base currency unit being priced by the feed.\\n    @param _feed The price feed being added.\\n  */\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    IJBPriceFeed _feed\\n  ) external override onlyOwner {\\n    // There can't already be a feed for the specified currency.\\n    if (feedFor[_currency][_base] != IJBPriceFeed(address(0))) revert PRICE_FEED_ALREADY_EXISTS();\\n\\n    // Store the feed.\\n    feedFor[_currency][_base] = _feed;\\n\\n    emit AddFeed(_currency, _base, _feed);\\n  }\\n}\\n\",\"keccak256\":\"0x6cf311d9822ea2959fed288e5a062e1235c9529af21d5f5ba1b3b30d242f31ff\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBPriceFeed {\\n  function currentPrice(uint256 _targetDecimals) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xac22ef5e35cdd64b1467416fd142801856ce867ecde41582f3aa437c955c9be2\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPriceFeed.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, IJBPriceFeed feed);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external view returns (IJBPriceFeed);\\n\\n  function priceFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    uint256 _decimals\\n  ) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    IJBPriceFeed _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0d9c3fce264953aaeca00db1f8d8a3cf99876fa63366f5a2148f7966967b39b7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a43380380610a4383398101604081905261002f91610167565b61003833610047565b61004181610097565b50610197565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146100f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811661015b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ed565b61016481610047565b50565b60006020828403121561017957600080fd5b81516001600160a01b038116811461019057600080fd5b9392505050565b61089d806101a66000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806396364e6d1161005057806396364e6d1461010a578063a4d0caf21461011d578063f2fde38b1461013e57600080fd5b806315d63a9114610077578063715018a6146100e25780638da5cb5b146100ec575b600080fd5b6100b8610085366004610666565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ea610151565b005b60005473ffffffffffffffffffffffffffffffffffffffff166100b8565b6100ea610118366004610688565b6101e3565b61013061012b3660046106c1565b61035f565b6040519081526020016100d9565b6100ea61014c366004610630565b61048b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101e160006105bb565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ce565b600083815260016020908152604080832085845290915290205473ffffffffffffffffffffffffffffffffffffffff16156102cb576040517fd28d564f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815260016020908152604080832085845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091559151918252839185917f2809ef679fa4c20b88a6467f2660840ad173b5205fef76c270c5d7ba44cb7057910160405180910390a3505050565b60008284141561037b5761037482600a61074e565b9050610484565b600084815260016020908152604080832086845290915290205473ffffffffffffffffffffffffffffffffffffffff16806103e2576040517f75c9d5ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f7a3c4c170000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff821690637a3c4c179060240160206040518083038186803b15801561044857600080fd5b505afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610480919061064d565b9150505b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ce565b73ffffffffffffffffffffffffffffffffffffffff81166105af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101ce565b6105b8816105bb565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561064257600080fd5b813561048481610845565b60006020828403121561065f57600080fd5b5051919050565b6000806040838503121561067957600080fd5b50508035926020909101359150565b60008060006060848603121561069d57600080fd5b833592506020840135915060408401356106b681610845565b809150509250925092565b6000806000606084860312156106d657600080fd5b505081359360208301359350604090920135919050565b600181815b8085111561074657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561072c5761072c610816565b8085161561073957918102915b93841c93908002906106f2565b509250929050565b6000610484838360008261076457506001610810565b8161077157506000610810565b81600181146107875760028114610791576107ad565b6001915050610810565b60ff8411156107a2576107a2610816565b50506001821b610810565b5060208310610133831016604e8410600b84101617156107d0575081810a610810565b6107da83836106ed565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561080c5761080c610816565b0290505b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146105b857600080fdfea2646970667358221220ec9055575838e740defcc32036a0c4ae0f09496fcb50ea808ab89459f6f639eb64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c806396364e6d1161005057806396364e6d1461010a578063a4d0caf21461011d578063f2fde38b1461013e57600080fd5b806315d63a9114610077578063715018a6146100e25780638da5cb5b146100ec575b600080fd5b6100b8610085366004610666565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ea610151565b005b60005473ffffffffffffffffffffffffffffffffffffffff166100b8565b6100ea610118366004610688565b6101e3565b61013061012b3660046106c1565b61035f565b6040519081526020016100d9565b6100ea61014c366004610630565b61048b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101e160006105bb565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ce565b600083815260016020908152604080832085845290915290205473ffffffffffffffffffffffffffffffffffffffff16156102cb576040517fd28d564f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815260016020908152604080832085845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091559151918252839185917f2809ef679fa4c20b88a6467f2660840ad173b5205fef76c270c5d7ba44cb7057910160405180910390a3505050565b60008284141561037b5761037482600a61074e565b9050610484565b600084815260016020908152604080832086845290915290205473ffffffffffffffffffffffffffffffffffffffff16806103e2576040517f75c9d5ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f7a3c4c170000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff821690637a3c4c179060240160206040518083038186803b15801561044857600080fd5b505afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610480919061064d565b9150505b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ce565b73ffffffffffffffffffffffffffffffffffffffff81166105af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101ce565b6105b8816105bb565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561064257600080fd5b813561048481610845565b60006020828403121561065f57600080fd5b5051919050565b6000806040838503121561067957600080fd5b50508035926020909101359150565b60008060006060848603121561069d57600080fd5b833592506020840135915060408401356106b681610845565b809150509250925092565b6000806000606084860312156106d657600080fd5b505081359360208301359350604090920135919050565b600181815b8085111561074657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561072c5761072c610816565b8085161561073957918102915b93841c93908002906106f2565b509250929050565b6000610484838360008261076457506001610810565b8161077157506000610810565b81600181146107875760028114610791576107ad565b6001915050610810565b60ff8411156107a2576107a2610816565b50506001821b610810565b5060208310610133831016604e8410600b84101617156107d0575081810a610810565b6107da83836106ed565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561080c5761080c610816565b0290505b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146105b857600080fdfea2646970667358221220ec9055575838e740defcc32036a0c4ae0f09496fcb50ea808ab89459f6f639eb64736f6c63430008060033",
  "devdoc": {
    "details": "Adheres to: IJBPrices: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.Inherits from: Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.",
    "kind": "dev",
    "methods": {
      "addFeedFor(uint256,uint256,address)": {
        "details": "Current feeds can't be modified.",
        "params": {
          "_base": "The base currency unit being priced by the feed.",
          "_currency": "The currency units the feed's resulting price is in terms of.",
          "_feed": "The price feed being added."
        }
      },
      "constructor": {
        "params": {
          "_owner": "The address that will own the contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "priceFor(uint256,uint256,uint256)": {
        "params": {
          "_base": "The base currency unit being priced.",
          "_currency": "The currency units the resulting price is in terms of.",
          "_decimals": "The number of decimals the returned fixed point price should include."
        },
        "returns": {
          "_0": "The price of the currency in terms of the base, as a fixed point number with the specified number of decimals."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "feedFor": {
        "details": "The feed returns the number of `_currency` units that can be converted to 1 `_base` unit. _currency The currency units the feed's resulting price is in terms of. _base The base currency unit being priced by the feed."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addFeedFor(uint256,uint256,address)": {
        "notice": " Add a price feed for a currency in terms of the provided base currency."
      },
      "feedFor(uint256,uint256)": {
        "notice": " The available price feeds."
      },
      "priceFor(uint256,uint256,uint256)": {
        "notice": "Gets the number of `_currency` units that can be converted to 1 `_base` unit."
      }
    },
    "notice": "Manages and normalizes price feeds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/JBPrices.sol:JBPrices",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9670,
        "contract": "contracts/JBPrices.sol:JBPrices",
        "label": "feedFor",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_contract(IJBPriceFeed)15378))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IJBPriceFeed)15378": {
        "encoding": "inplace",
        "label": "contract IJBPriceFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(IJBPriceFeed)15378)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IJBPriceFeed)",
        "numberOfBytes": "32",
        "value": "t_contract(IJBPriceFeed)15378"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_contract(IJBPriceFeed)15378))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => contract IJBPriceFeed))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_contract(IJBPriceFeed)15378)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}